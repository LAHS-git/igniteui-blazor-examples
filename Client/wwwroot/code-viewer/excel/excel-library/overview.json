{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/overview/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.AspNetCore.Components.Rendering\n@using Microsoft.AspNetCore.Components.Forms\n@using Microsoft.AspNetCore.Components.RenderTree\n@using Microsoft.AspNetCore.Components.Web\n@using System.Text.RegularExpressions\n@using System.Net.Http\n@using System.Net.Http.Json\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.WebAssembly.Http\n@using Microsoft.JSInterop\n@using Microsoft.JSInterop.WebAssembly\n@using Infragistics.Documents.Excel\n\n<div class=\"container vertical\">\n\n    <div class=\"options vertical\">\n        <button @onclick=\"CreateXlsx\">Save Workbook to XLSX</button>\n        <button @onclick=\"CreateXls\">Save Workbook to XLS</button>\n    </div>\n</div>\n\n@code {\n\n    [Inject]\n    public IJSRuntime Runtime { get; set; }\n    public bool canSave = false;\n    public Workbook wb;\n    public Worksheet ws;\n    public List<string> worksheetRegion = null;\n    public string selectedRegion = null;\n    private Random Rand = new Random();\n\n    protected override void OnInitialized()\n    {\n\n        this.WorkbookCreate();\n    }\n\n    private void CreateXls()\n    {\n        this.SaveFile(this.wb, \"ExcelWorkbook\", WorkbookFormat.Excel97To2003);\n    }\n\n    private void CreateXlsx()\n    {\n        this.SaveFile(this.wb, \"ExcelWorkbook\", WorkbookFormat.Excel2007);\n    }\n\n    public void WorkbookCreate() {\n        Workbook.InProcessRuntime = this.Runtime as IJSInProcessRuntime;\n\n        var wb = new Workbook(WorkbookFormat.Excel2007);\n        var employeeSheet = wb.Worksheets.Add(\"Employees\");\n        var employeeHeader = employeeSheet.Rows[0];\n        var companies = new string[] { \"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" };\n        var firstNames = new string[] { \"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" };\n        var lastNames = new string[] { \"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" };\n        var countries = new string[] { \"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" };\n        var titles = new string[] { \"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" };\n        var employeeColumns = new string[] { \"Name\", \"Company\", \"Title\", \"Age\", \"Country\" };\n        for (var col = 0; col < employeeColumns.Length; col++) {\n            employeeSheet.Columns[col].Width = 5000;\n            employeeHeader.SetCellValue(col, employeeColumns[col]);\n        }\n        for (var i = 1; i < 20; i++) {\n            var company = this.GetItem(companies);\n            var title = this.GetItem(titles);\n            var country = this.GetItem(countries);\n            var name = this.GetItem(firstNames) + \" \" + this.GetItem(lastNames);\n            var salary = this.GetRandom(45000, 95000);\n            var age = this.GetRandom(20, 65);\n            var wr = employeeSheet.Rows[i] as WorksheetRow;\n            wr.SetCellValue(0, name);\n            wr.SetCellValue(1, company);\n            wr.SetCellValue(2, title);\n            wr.SetCellValue(3, age);\n            wr.SetCellValue(4, country);\n            wr.SetCellValue(5, salary);\n        }\n        var expanseSheet = wb.Worksheets.Add(\"Expanses\");\n        var expanseHeader = expanseSheet.Rows[0];\n        var expanseNames = new string[] { \"Year\", \"Computers\", \"Research\", \"Travel\", \"Salary\", \"Software\" };\n        var expanseCol = 0;\n        foreach (var key in expanseNames) {\n            expanseSheet.Columns[expanseCol].Width = 5000;\n            expanseHeader.SetCellValue(expanseCol, key);\n            for (var i = 1; i < 20; i++) {\n                var wr = expanseSheet.Rows[i];\n                if (key == \"Year\") {\n                    wr.SetCellValue(expanseCol, 2010 + i);\n                } else if (key == \"Computers\") {\n                    wr.SetCellValue(expanseCol, this.GetRandom(50000, 65000));\n                } else if (key == \"Research\") {\n                    wr.SetCellValue(expanseCol, this.GetRandom(150000, 165000));\n                } else if (key == \"Travel\") {\n                    wr.SetCellValue(expanseCol, this.GetRandom(20000, 25000));\n                } else if (key == \"Salary\") {\n                    wr.SetCellValue(expanseCol, this.GetRandom(4000000, 450000));\n                } else if (key == \"Software\") {\n                    wr.SetCellValue(expanseCol, this.GetRandom(100000, 150000));\n                }\n            }\n            expanseCol++;\n        }\n        var incomeSheet = wb.Worksheets.Add(\"Income\");\n        var incomeHeader = incomeSheet.Rows[0];\n        var incomeNames = new string[] { \"Year\", \"Phones\", \"Computers\", \"Software\", \"Services\", \"Royalties\" };\n        var incomeCol = 0;\n        foreach (var key in incomeNames) {\n            incomeSheet.Columns[incomeCol].Width = 5000;\n            incomeHeader.SetCellValue(incomeCol, key);\n            for (var i = 1; i < 20; i++) {\n                var wr = incomeSheet.Rows[i];\n                if (key == \"Year\") {\n                    wr.SetCellValue(incomeCol, 2010 + i);\n                } else if (key == \"Software\") {\n                    wr.SetCellValue(incomeCol, this.GetRandom(700000, 850000));\n                } else if (key == \"Computers\") {\n                    wr.SetCellValue(incomeCol, this.GetRandom(250000, 265000));\n                } else if (key == \"Royalties\") {\n                    wr.SetCellValue(incomeCol, this.GetRandom(400000, 450000));\n                } else if (key == \"Phones\") {\n                    wr.SetCellValue(incomeCol, this.GetRandom(6000000, 650000));\n                } else if (key == \"Services\") {\n                    wr.SetCellValue(incomeCol, this.GetRandom(700000, 750000));\n                }\n            }\n            incomeCol++;\n        }\n        this.WorkbookParse(wb);\n    }\n\n    public void WorkbookParse(Workbook wb)\n    {\n        if (wb == null)\n        {\n            this.worksheetRegion = null;\n            this.selectedRegion = null;\n        }\n        else\n        {\n            var names = new List<string>();\n            var worksheets = wb.Worksheets;\n            var wsCount = worksheets.Count;\n            for (var i = 0; i < wsCount; i++)\n            {\n                var tables = worksheets[i].Tables;\n                var tCount = tables.Count;\n                for (var j = 0; j < tCount; j++)\n                {\n                    names.Add(worksheets[i].Name + \" - \" + tables[j].Name);\n                }\n            }\n            this.worksheetRegion = names;\n            this.selectedRegion = names.Count > 0 ? names[0] : null;\n        }\n        this.wb = wb;\n        this.canSave = wb != null;\n    }\n\n    public double GetRandom(double min, double max)\n    {\n        return Math.Round(min + (Rand.NextDouble() * (max - min)));\n    }\n\n    public string GetItem(string[] array)\n    {\n        var index = (int)Math.Round(GetRandom(0, array.Length - 1));\n        return array[index];\n    }\n\n    private void SaveFile(Workbook workbook, string fileNameWithoutExtension, WorkbookFormat format)\n    {\n        var ms = new System.IO.MemoryStream();\n        workbook.SetCurrentFormat(format);\n        workbook.Save(ms);\n\n        string extension;\n\n        switch (workbook.CurrentFormat)\n        {\n            default:\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                extension = \".xlsx\";\n                break;\n            case WorkbookFormat.Excel2007MacroEnabled:\n                extension = \".xlsm\";\n                break;\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                extension = \".xltm\";\n                break;\n            case WorkbookFormat.Excel2007Template:\n                extension = \".xltx\";\n                break;\n\n            case WorkbookFormat.Excel97To2003:\n                extension = \".xls\";\n                break;\n            case WorkbookFormat.Excel97To2003Template:\n                extension = \".xlt\";\n                break;\n        }\n\n        string fileName = fileNameWithoutExtension + extension;\n        string mime;\n\n        switch (workbook.CurrentFormat)\n        {\n            default:\n            case WorkbookFormat.Excel2007:\n            case WorkbookFormat.Excel2007MacroEnabled:\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n            case WorkbookFormat.Excel2007Template:\n            case WorkbookFormat.StrictOpenXml:\n                mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n                break;\n            case WorkbookFormat.Excel97To2003:\n            case WorkbookFormat.Excel97To2003Template:\n                mime = \"application/vnd.ms-excel\";\n                break;\n        }\n\n        ms.Position = 0;\n        var bytes = ms.ToArray();\n        this.SaveFile(bytes, fileName, mime);\n    }\n\n    private void SaveFile(byte[] bytes, string fileName, string mime)\n    {\n        if (this.Runtime is WebAssemblyJSRuntime wasmRuntime)\n            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>(\"BlazorDownloadFileFast\", fileName, mime, bytes);\n        else if (this.Runtime is IJSInProcessRuntime inProc)\n            inProc.InvokeVoid(\"BlazorDownloadFile\", fileName, mime, bytes);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/overview/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/overview/wwwroot/BlazorDownloadFile.js",
    "content": "﻿// these methods are from:\r\n// https://www.meziantou.net/generating-and-downloading-a-file-in-a-blazor-webassembly-application.htm\r\nfunction BlazorDownloadFileFast(name, contentType, content) {\r\n    // Convert the parameters to actual JS types\r\n    var nameStr = BINDING.conv_string(name);\r\n    var contentTypeStr = BINDING.conv_string(contentType);\r\n    var contentArray = Blazor.platform.toUint8Array(content);\r\n    // Create the URL\r\n    var file = new File([contentArray], nameStr, { type: contentTypeStr });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = nameStr;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\nfunction BlazorDownloadFile(filename, contentType, content) {\r\n    // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File\r\n    var data = base64DecToArr(content);\r\n    // Create the URL\r\n    var file = new File([data], filename, { type: contentType });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = filename;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\n// Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.\r\n// The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64\r\nfunction b64ToUint6(nChr) {\r\n    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\r\n}\r\nfunction base64DecToArr(sBase64, nBlocksSize) {\r\n    var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\r\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n        nMod4 = nInIdx & 3;\r\n        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n            }\r\n            nUint24 = 0;\r\n        }\r\n    }\r\n    return taBytes;\r\n}\r\n//# sourceMappingURL=BlazorDownloadFile.js.map",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/overview/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}