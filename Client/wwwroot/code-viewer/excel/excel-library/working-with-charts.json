{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/working-with-charts/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.JSInterop\n@using Microsoft.JSInterop.WebAssembly\n@using Infragistics.Documents.Excel\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <button @onclick=\"ExportData\">Save to Excel</button>\n    </div>\n    <div class=\"container vertical\">\n        <IgbCategoryChart Height=\"50%\" Width=\"100%\"\n                       DataSource=\"@ChartData\"\n                       YAxisMinimumValue=\"0\"\n                       XAxisInterval=\"1\"\n                       ChartType=\"@CategoryChartType.Column\"\n                       Brushes=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n                       Outlines=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n                       Thickness=\"0\" />\n        <IgbDataGrid Height=\"50%\" Width=\"100%\" DataSource=\"GridData\">\n            <IgbTextColumn Field=\"Expense\" Width=\"@(\"*>100\")\" />\n            <IgbNumericColumn Field=\"Jan\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Feb\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Mar\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Apr\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"May\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Jun\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Jul\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Aug\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Sep\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Oct\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Nov\" Width=\"@(\"*>75\")\" />\n            <IgbNumericColumn Field=\"Dec\" Width=\"@(\"*>75\")\" />\n        </IgbDataGrid>\n    </div>\n</div>\n\n@code {\n\n    [Inject]\n    public IJSRuntime Runtime { get; set; }\n\n    public List<ExpenseGridInfo> GridData { get; set; }\n    public List<ExpenseChartInfo> ChartData { get; set; }\n    Random r = new Random();\n\n    protected override void OnInitialized()\n    {\n\n        Workbook.InProcessRuntime = (IJSInProcessRuntime)this.Runtime;\n\n        InitData();\n    }\n\n    public void InitData()\n    {\n        var months = new string[] { \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" };\n        var groups = new string[] { \"Heating\", \"Electricity\", \"Water\", \"Taxes\" };\n\n        var expenseKey = \"Expense\";\n        var monthKey = \"Month\";\n\n        List<ExpenseGridInfo> _gridData = new List<ExpenseGridInfo>();\n        List<ExpenseChartInfo> _chartData = new List<ExpenseChartInfo>();\n\n        for (int i = 0; i < groups.Length; i++)\n        {\n            string group = groups[i];\n            ExpenseGridInfo info = new ExpenseGridInfo() { Expense = group };\n            foreach(string month in months)\n            {\n                double x = i * 15 * Math.PI / 180;\n                double rand = r.Next(50, 100);\n                double heat = Math.Abs(Math.Cos(x)) * 300 + rand;\n                double ac = Math.Abs(Math.Sin(x)) * 500 + rand;\n\n                switch (group)\n                {\n                    case \"Heating\": {\n                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, Math.Round(heat));\n                            break;\n                        }\n                    case \"Electricity\":\n                        {\n                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, Math.Round(ac));\n                            break;\n                        }\n                    case \"Water\":\n                        {\n                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, r.Next(100, 150));\n                            break;\n                        }\n                    case \"Taxes\":\n                        {\n                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, r.Next(700, 800));\n                            break;\n                        }\n                }\n            }\n\n            _gridData.Add(info);\n        }\n\n        foreach(string month in months)\n        {\n            ExpenseChartInfo data = new ExpenseChartInfo() { Month = month };\n\n            foreach(ExpenseGridInfo info in _gridData)\n            {\n                switch (info.Expense)\n                {\n                    case \"Heating\":\n                        {\n                            data.Heat = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);\n                            break;\n                        }\n                    case \"Electricity\":\n                        {\n                            data.Electricity = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);\n                            break;\n                        }\n                    case \"Water\":\n                        {\n                            data.Water = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);\n                            break;\n                        }\n                    case \"Taxes\":\n                        {\n                            data.Taxes = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);\n                            break;\n                        }\n                }\n            }\n\n            _chartData.Add(data);\n        }\n\n        this.GridData = _gridData;\n        this.ChartData = _chartData;\n    }\n\n    public void ExportData()\n    {\n        var workbook = new Workbook(WorkbookFormat.Excel2007);\n        var sheet = workbook.Worksheets.Add(\"Sheet1\");\n\n        sheet.DefaultColumnWidth = 200 * 20;\n\n        int firstDataRow = 2;\n\n        var headerRow = sheet.Rows[firstDataRow - 1];\n\n        var props = typeof(ExpenseGridInfo).GetProperties();\n\n        for (int i = 0; i < props.Count(); i++)\n        {\n            System.Reflection.PropertyInfo prop = props[i];\n            headerRow.SetCellValue(i, prop.Name);\n        }\n\n        for (int i = 0; i < this.GridData.Count; i++)\n        {\n            var worksheetRow = sheet.Rows[i + firstDataRow];\n            ExpenseGridInfo item = this.GridData[i];\n\n            for (int j = 0; j < props.Length; j++)\n            {\n                System.Reflection.PropertyInfo info = props[j];\n                worksheetRow.SetCellValue(j, info.GetValue(item));\n            }\n        }\n\n        int indexRow = firstDataRow - 1;\n        int indexData = firstDataRow + this.GridData.Count - 1;\n        int indexHeader = props.Length - 1;\n\n        var tableRegion = new WorksheetRegion(sheet, indexRow, 0, indexData, indexHeader);\n        var table = sheet.Tables.Add(tableRegion.ToString(), true);\n\n        sheet.Rows[0].Height = 5000;\n\n        var chart = sheet.Shapes.AddChart(Documents.Excel.Charts.ChartType.ColumnClustered,\n            sheet.Rows[0].Cells[0], new Infragistics.Core.Point(0, 0),\n            sheet.Rows[0].Cells[props.Length - 1], new Infragistics.Core.Point(100, 100));\n\n        chart.SetSourceData(table.WholeTableRegion.ToString(), true);\n        chart.AxisCollection[Infragistics.Documents.Excel.Charts.AxisType.Category].AxisBetweenCategories = true;\n\n        var memStream = new System.IO.MemoryStream();\n        workbook.Save(memStream);\n\n        memStream.Position = 0;\n        var bytes = memStream.ToArray();\n        this.SaveFile(bytes, \"ExelWorkbook.xlsx\", string.Empty);\n    }\n\n    private void SaveFile(byte[] bytes, string fileName, string mime)\n    {\n        if (this.Runtime is WebAssemblyJSRuntime wasmRuntime)\n            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>(\"BlazorDownloadFileFast\", fileName, mime, bytes);\n        else if (this.Runtime is IJSInProcessRuntime inProc)\n            inProc.InvokeVoid(\"BlazorDownloadFile\", fileName, mime, bytes);\n    }\n\n    public class ExpenseGridInfo\n    {\n        public string Expense { get; set; }\n        public double Jan { get; set; }\n        public double Feb { get; set; }\n        public double Mar { get; set; }\n        public double Apr { get; set; }\n        public double May { get; set; }\n        public double Jun { get; set; }\n        public double Jul { get; set; }\n        public double Aug { get; set; }\n        public double Sep { get; set; }\n        public double Oct { get; set; }\n        public double Nov { get; set; }\n        public double Dec { get; set; }\n    }\n\n    public class ExpenseChartInfo\n    {\n        public string Month { get; set; }\n        public double Heat { get; set; }\n        public double Electricity { get; set; }\n        public double Water { get; set; }\n        public double Taxes { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/working-with-charts/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls;\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbCategoryChartModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/working-with-charts/wwwroot/BlazorDownloadFile.js",
    "content": "﻿// these methods are from:\r\n// https://www.meziantou.net/generating-and-downloading-a-file-in-a-blazor-webassembly-application.htm\r\nfunction BlazorDownloadFileFast(name, contentType, content) {\r\n    // Convert the parameters to actual JS types\r\n    var nameStr = BINDING.conv_string(name);\r\n    var contentTypeStr = BINDING.conv_string(contentType);\r\n    var contentArray = Blazor.platform.toUint8Array(content);\r\n    // Create the URL\r\n    var file = new File([contentArray], nameStr, { type: contentTypeStr });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = nameStr;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\nfunction BlazorDownloadFile(filename, contentType, content) {\r\n    // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File\r\n    var data = base64DecToArr(content);\r\n    // Create the URL\r\n    var file = new File([data], filename, { type: contentType });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = filename;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\n// Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.\r\n// The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64\r\nfunction b64ToUint6(nChr) {\r\n    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\r\n}\r\nfunction base64DecToArr(sBase64, nBlocksSize) {\r\n    var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\r\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n        nMod4 = nInIdx & 3;\r\n        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n            }\r\n            nUint24 = 0;\r\n        }\r\n    }\r\n    return taBytes;\r\n}\r\n//# sourceMappingURL=BlazorDownloadFile.js.map",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/working-with-charts/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}