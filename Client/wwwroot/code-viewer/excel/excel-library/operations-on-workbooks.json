{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-workbooks/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.AspNetCore.Components.Rendering\n@using Microsoft.AspNetCore.Components.Forms\n@using Microsoft.AspNetCore.Components.RenderTree\n@using Microsoft.AspNetCore.Components.Web\n@using System.Text.RegularExpressions\n@using System.Net.Http\n@using System.Net.Http.Json\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.WebAssembly.Http\n@using Microsoft.JSInterop\n@using Microsoft.JSInterop.WebAssembly\n@using Infragistics.Documents.Excel\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n\n    <div class=\"options vertical\">\n        <button @onclick=\"GenerateData\">Generate Data</button>\n        <button @onclick=\"CreateXlsx\">Save Workbook to XLSX</button>\n        <button @onclick=\"CreateXls\">Save Workbook to XLS</button>\n        <span>Select Table to Export:</span>\n        <select @onchange=\"OnTableChange\">\n            <option>Sales Employee - Table1</option>\n            <option>Expense - Table2</option>\n            <option>Income - Table3</option>\n        </select>\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (Data != null)\n        {\n            <IgbDataGrid @ref=\"@grid\" Height=\"100%\" Width=\"100%\"\n                      DataSource=\"Data\"\n                      AutoGenerateColumns=\"true\">\n            </IgbDataGrid>\n        }\n\n    </div>\n</div>\n\n@code {\n\n    [Inject]\n    public IJSRuntime Runtime { get; set; }\n    public bool canSave = false;\n    public Random Rand = new Random();\n\n    public IgbDataGrid grid;\n    public object Data;\n    public Workbook wb;\n\n    public List<SalesEmployee> salesEmployeeData;\n    public List<Expense> expenseData;\n    public List<Income> incomeData;\n\n    public string[] companies;\n    public string[] firstNames;\n    public string[] lastNames;\n    public string[] countries;\n    public string[] cities;\n    public string[] titles;\n    public string[] employeeColumns;\n    public string[] streets;\n    public string selected = \"Employees - Table1\";\n\n    protected override void OnInitialized()\n    {\n\n        Workbook.InProcessRuntime = this.Runtime as IJSInProcessRuntime;\n\n        this.companies = new string[] { \"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" };\n        this.firstNames = new string[] { \"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" };\n        this.lastNames = new string[] { \"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" };\n        this.countries = new string[] { \"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" };\n        this.cities = new string[] { \"London\", \"Paris\", \"Boston\", \"Berlin\" };\n        this.titles = new string[] { \"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" };\n        this.employeeColumns = new string[] { \"Name\", \"Company\", \"Title\", \"Age\", \"Country\" };\n        this.streets = new string[] { \"Main St\", \"Madison St\", \"Broad Way\" };\n\n        GenerateData();\n        this.Data = this.salesEmployeeData;\n    }\n\n    public void GenerateData() {\n        this.InitData();\n        this.SwitchDataSource(this.selected);\n    }\n\n    public void InitData()\n    {\n        this.salesEmployeeData = new List<SalesEmployee>();\n        this.expenseData = new List<Expense>();\n        this.incomeData = new List<Income>();\n\n        var startYear = 2011;\n\n        for (var i = 1; i < 20; i++)\n        {\n            var year = startYear + i;\n\n            // Employee Data\n            string company = companies[Rand.Next(0, companies.Length)];\n            string title = titles[Rand.Next(0, titles.Length)];\n            string country = countries[Rand.Next(0, countries.Length)];\n            string name = firstNames[Rand.Next(0, firstNames.Length)] + \" \" + firstNames[Rand.Next(0, firstNames.Length)];\n            double salary = this.GetRandom(45000, 95000);\n            double age = this.GetRandom(20, 65);\n            string city = cities[Rand.Next(0, cities.Length)];\n            string address = this.GetRandom(10, 60).ToString() + \" \" + streets[Rand.Next(0, streets.Length)];\n            string postalCode = \"CID-\" + this.GetRandom(500, 900);\n            string phone = this.GetRandom(500, 900) + \"-\" + this.GetRandom(200, 900) + \"-\" + this.GetRandom(2000, 9000);\n            string fax = this.GetRandom(500, 900) + \"-\" + this.GetRandom(200, 900) + \"-\" + this.GetRandom(2000, 9000);\n\n            // Expense Data\n            double computerExpense = this.GetRandom(50000, 60000);\n            double researchExpense = this.GetRandom(120000, 160000);\n            double travelExpense = this.GetRandom(15000, 25000);\n            double salaryExpense = this.GetRandom(1000000, 2000000);\n            double softwareExpense = this.GetRandom(100000, 150000);\n\n            // Income Data\n            double phoneIncome = this.GetRandom(3500000, 6000000);\n            double computerIncome = this.GetRandom(200000, 300000);\n            double softwareIncome = this.GetRandom(700000, 800000);\n            double serviceIncome = this.GetRandom(650000, 750000);\n            double royaltyIncome = this.GetRandom(400000, 450000);\n\n            this.salesEmployeeData.Add(new SalesEmployee()\n            {\n                ContactName = name,\n                CompanyName = company,\n                ID = this.GetRandom(1000, 8000),\n                ContactTitle = title,\n                Age = (int)age,\n                Country = country,\n                City = city,\n                Salary = salary,\n                Phone = phone,\n                Fax = fax,\n                Address = address,\n                PostalCode = postalCode,\n                Region = GetRandom(0,100).ToString()\n            });\n\n            this.expenseData.Add(new Expense()\n            {\n                Year = year,\n                ComputerExpense = computerExpense,\n                ResearchExpense = researchExpense,\n                TravelExpense = travelExpense,\n                SalaryExpense = salaryExpense,\n                SoftwareExpense = softwareExpense\n            });\n\n            this.incomeData.Add(new Income()\n            {\n                Year = year,\n                PhoneIncome = phoneIncome,\n                ComputerIncome = computerIncome,\n                SoftwareIncome = softwareIncome,\n                ServiceIncome = serviceIncome,\n                RoyaltyIncome = royaltyIncome\n            });\n        }\n\n    }\n\n    private void CreateXls()\n    {\n        ExportGridData(WorkbookFormat.Excel97To2003);\n        this.SaveFile(this.wb, \"ExcelWorkbook\");\n    }\n\n    private void CreateXlsx()\n    {\n        ExportGridData(WorkbookFormat.Excel2007);\n        this.SaveFile(this.wb, \"ExcelWorkbook\");\n    }\n\n    public void SwitchDataSource(string value)\n    {\n        if (value.Contains(\"Sales Employee\"))\n        {\n            this.Data = this.salesEmployeeData;\n        }\n        else if (value.Contains(\"Expense\"))\n        {\n            this.Data = this.expenseData;\n        }\n        else if (value.Contains(\"Income\"))\n        {\n            this.Data = this.incomeData;\n        }\n\n        StateHasChanged();\n    }\n\n    public void ExportGridData (WorkbookFormat format)\n    {\n        this.wb = new Workbook(format);\n        var ws = this.wb.Worksheets.Add(\"Sheet1\");\n        ws.DefaultColumnWidth = 300 * 20;\n        if (this.Data is List<SalesEmployee>)\n        {\n            int worksheetRow = 0;\n            foreach (SalesEmployee emp in this.salesEmployeeData)\n            {\n                for (int i = 0; i < this.grid.ActualColumns.Count; i++)\n                {\n                    IgbDataGridColumn c = this.grid.ActualColumns[i];\n                    var value = typeof(SalesEmployee).GetProperty(c.Field).GetValue(emp);\n                    ws.Rows[worksheetRow].Cells[i].Value = value;\n                }\n\n                worksheetRow++;\n            }\n        }\n        else if (this.Data is List<Expense>)\n        {\n            int worksheetRow = 0;\n            foreach (Expense emp in this.expenseData)\n            {\n                for (int i = 0; i < this.grid.ActualColumns.Count; i++)\n                {\n                    IgbDataGridColumn c = this.grid.ActualColumns[i];\n                    var value = typeof(Expense).GetProperty(c.Field).GetValue(emp);\n                    ws.Rows[worksheetRow].Cells[i].Value = value;\n                }\n\n                worksheetRow++;\n            }\n        }\n        else if (this.Data is List<Income>)\n        {\n            int worksheetRow = 0;\n            foreach (Income emp in this.incomeData)\n            {\n                for (int i = 0; i < this.grid.ActualColumns.Count; i++)\n                {\n                    IgbDataGridColumn c = this.grid.ActualColumns[i];\n                    var value = typeof(Income).GetProperty(c.Field).GetValue(emp);\n                    ws.Rows[worksheetRow].Cells[i].Value = value;\n                }\n\n                worksheetRow++;\n            }\n        }\n    }\n\n    public void SaveFile(Workbook wb, string fileNameWithoutExtension)\n    {\n        var ms = new System.IO.MemoryStream();\n\n        if (wb != null)\n        {\n            wb.Save(ms);\n            string extension;\n\n            switch (wb.CurrentFormat)\n            {\n                default:\n                case WorkbookFormat.StrictOpenXml:\n                case WorkbookFormat.Excel2007:\n                    extension = \".xlsx\";\n                    break;\n                case WorkbookFormat.Excel2007MacroEnabled:\n                    extension = \".xlsm\";\n                    break;\n                case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                    extension = \".xltm\";\n                    break;\n                case WorkbookFormat.Excel2007Template:\n                    extension = \".xltx\";\n                    break;\n\n                case WorkbookFormat.Excel97To2003:\n                    extension = \".xls\";\n                    break;\n                case WorkbookFormat.Excel97To2003Template:\n                    extension = \".xlt\";\n                    break;\n            }\n\n            string fileName = fileNameWithoutExtension + extension;\n            string mime;\n\n            switch (wb.CurrentFormat)\n            {\n                default:\n                case WorkbookFormat.Excel2007:\n                case WorkbookFormat.Excel2007MacroEnabled:\n                case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                case WorkbookFormat.Excel2007Template:\n                case WorkbookFormat.StrictOpenXml:\n                    mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n                    break;\n                case WorkbookFormat.Excel97To2003:\n                case WorkbookFormat.Excel97To2003Template:\n                    mime = \"application/vnd.ms-excel\";\n                    break;\n            }\n\n            ms.Position = 0;\n            var bytes = ms.ToArray();\n            SaveFile(bytes, fileName, mime);\n        }\n\n    }\n\n    public void SaveFile(byte[] bytes, string fileName, string mime)\n    {\n        if (Runtime is WebAssemblyJSRuntime wasmRuntime)\n            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>(\"BlazorDownloadFileFast\", fileName, mime, bytes);\n        else if (Runtime is IJSInProcessRuntime inProc)\n            inProc.InvokeVoid(\"BlazorDownloadFile\", fileName, mime, bytes);\n    }\n\n    public void OnTableChange(ChangeEventArgs args)\n    {\n        string newVal = args.Value.ToString();\n        this.selected = newVal;\n        this.SwitchDataSource(newVal);\n    }\n\n    public double GetRandom(double min, double max)\n    {\n        return Math.Round(min + (Rand.NextDouble() * (max - min)));\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-workbooks/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls;\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-workbooks/Services/SharedExcelData.cs",
    "content": "using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SalesEmployee\n    {\n        public double ID { get; set; }\n        public string ContactName { get; set; }\n        public string CompanyName { get; set; }\n        public string ContactTitle { get; set; }\n        public int Age { get; set; }\n        public string Country { get; set; }\n        public string City { get; set; }\n        public double Salary { get; set; }\n        public string Fax { get; set; }\n        public string Phone { get; set; }\n        public string Address { get; set; }\n        public string PostalCode { get; set; }\n        public string Region { get; set; }\n        public List<Order> Order { get; set; }\n    }\n\n    public class Expense\n    {\n        public int Year { get; set; }\n        public double ComputerExpense { get; set; }\n        public double ResearchExpense { get; set; }\n        public double TravelExpense { get; set; }\n        public double SalaryExpense { get; set; }\n        public double SoftwareExpense { get; set; }\n    }\n\n    public class Income\n    {\n        public int Year { get; set; }\n        public double PhoneIncome { get; set; }\n        public double ComputerIncome { get; set; }\n        public double SoftwareIncome { get; set; }\n        public double ServiceIncome { get; set; }\n        public double RoyaltyIncome { get; set; }\n    }\n\n    public class Order : SalesEmployee\n    {\n        public string CustomerName { get; set; }\n        public string CustomerID { get; set; }\n        public double Freight { get; set; }\n        public string OrderDate { get; set; }\n        public double OrderID { get; set; }\n        public string RequiredDate { get; set; }\n        public string ShipAddress { get; set; }\n        public string ShipCity { get; set; }\n        public string ShipCountry { get; set; }\n        public string ShipName { get; set; }\n        public string ShipPostalCode { get; set; }\n        public string ShipRegion { get; set; }\n        public double ShipVia { get; set; }\n        public string ShippedDate { get; set; }\n        public double ShipperID { get; set; }\n        public string ShipperName { get; set; }\n        public double TotalItems { get; set; }\n        public double TotalPrice { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-workbooks/wwwroot/BlazorDownloadFile.js",
    "content": "﻿// these methods are from:\r\n// https://www.meziantou.net/generating-and-downloading-a-file-in-a-blazor-webassembly-application.htm\r\nfunction BlazorDownloadFileFast(name, contentType, content) {\r\n    // Convert the parameters to actual JS types\r\n    var nameStr = BINDING.conv_string(name);\r\n    var contentTypeStr = BINDING.conv_string(contentType);\r\n    var contentArray = Blazor.platform.toUint8Array(content);\r\n    // Create the URL\r\n    var file = new File([contentArray], nameStr, { type: contentTypeStr });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = nameStr;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\nfunction BlazorDownloadFile(filename, contentType, content) {\r\n    // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File\r\n    var data = base64DecToArr(content);\r\n    // Create the URL\r\n    var file = new File([data], filename, { type: contentType });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = filename;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\n// Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.\r\n// The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64\r\nfunction b64ToUint6(nChr) {\r\n    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\r\n}\r\nfunction base64DecToArr(sBase64, nBlocksSize) {\r\n    var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\r\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n        nMod4 = nInIdx & 3;\r\n        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n            }\r\n            nUint24 = 0;\r\n        }\r\n    }\r\n    return taBytes;\r\n}\r\n//# sourceMappingURL=BlazorDownloadFile.js.map",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-workbooks/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}