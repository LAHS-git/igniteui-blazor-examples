{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-worksheets/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.AspNetCore.Components.Rendering\n@using Microsoft.AspNetCore.Components.Forms\n@using Microsoft.AspNetCore.Components.RenderTree\n@using Microsoft.AspNetCore.Components.Web\n@using System.Text.RegularExpressions\n@using System.Net.Http\n@using System.Net.Http.Json\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.WebAssembly.Http\n@using Microsoft.JSInterop\n@using Microsoft.JSInterop.WebAssembly\n@using Infragistics.Documents.Excel\n@using Documents.Excel.ConditionalFormatting\n@using Documents.Excel.Sorting\n@using Documents.Excel.Filtering\n\n<div class=\"container vertical\">\n\n    <div class=\"options vertical\">\n        <button @onclick=\"CreateXlsx\">Save Workbook to XLSX</button>\n        <div class=\"options vertical\">\n            <span>Select Table to Export:</span>\n            <label class=\"options-item\"><input checked=@isSorted @onchange=\"OnSortChange\" type=\"checkbox\" />Apply Sort</label>\n            <label class=\"options-item\"><input checked=@isFiltered @onchange=OnFilterChange type=\"checkbox\" />Apply Filter</label>\n            <label class=\"options-item\"><input checked=@isProtected @onchange=OnProtectChange type=\"checkbox\" />Protect Worksheet</label>\n            <label class=\"options-item\"><input checked=@showGridlines @onchange=OnGridlinesChange type=\"checkbox\" />Show Gridlines</label>\n            <label class=\"options-item\"><input checked=@showHeaders @onchange=OnHeadersChange type=\"checkbox\" />Show Row and Column Headers</label>\n            <label class=\"options-item\"><input checked=@applyConditionalFormatting @onchange=OnFormatChange type=\"checkbox\" />Apply Conditional Formatting</label>\n        </div>\n    </div>\n</div>\n\n@code {\n\n    [Inject]\n\n    public IJSRuntime Runtime { get; set; }\n    public bool canSave = false;\n    public Random Rand = new Random();\n\n    public object data;\n    public bool isSorted;\n    public bool isFiltered;\n    public bool isProtected;\n    public bool showGridlines;\n    public bool showHeaders;\n    public bool applyConditionalFormatting;\n    public Workbook wb;\n\n    protected override void OnInitialized()\n    {\n\n        Workbook.InProcessRuntime = this.Runtime as IJSInProcessRuntime;\n\n    }\n\n    public void ExportData(WorkbookFormat format) {\n        this.InitData();\n        this.wb.SetCurrentFormat(format);\n\n        var sheet = this.wb.Worksheets[0];\n        sheet.DefaultColumnWidth = 220 * 20;\n\n        if (this.isSorted)\n        {\n            sheet.SortSettings.SetRegion(\"A2:A20\");\n            sheet.SortSettings.SortConditions.Add(\n                new RelativeIndex(0), new OrderedSortCondition(SortDirection.Ascending));\n        }\n        if (this.isFiltered)\n        {\n            sheet.FilterSettings.SetRegion(\"C1:C20\");\n            sheet.FilterSettings.ApplyCustomFilter(0, new CustomFilterCondition(ExcelComparisonOperator.Equals, \"USA\"));\n        }\n        if (this.isProtected)\n        {\n            sheet.Protect();\n        }\n        if (!this.showHeaders)\n        {\n            sheet.DisplayOptions.ShowRowAndColumnHeaders = false;\n        }\n        if (!this.showGridlines)\n        {\n            sheet.DisplayOptions.ShowGridlines = false;\n        }\n        if (this.applyConditionalFormatting)\n        {\n            var orange = Infragistics.Core.Graphics.Colors.Orange;\n            var blue = Infragistics.Core.Graphics.Colors.Blue;\n            var red = Infragistics.Core.Graphics.Colors.Red;\n\n            var format1 = sheet.ConditionalFormats.AddTextCondition(\n            \"A1:A20\", \"Amazon\", FormatConditionTextOperator.Contains);\n\n            var format2 = sheet.ConditionalFormats.AddTextCondition(\n            \"A1:A20\", \"IBM\", FormatConditionTextOperator.Contains);\n\n            var format3 = sheet.ConditionalFormats.AddTextCondition(\n            \"A1:A20\", \"Tesla\", FormatConditionTextOperator.Contains);\n\n            format1.CellFormat.Font.ColorInfo = new WorkbookColorInfo(orange);\n            format2.CellFormat.Font.ColorInfo = new WorkbookColorInfo(blue);\n            format3.CellFormat.Font.ColorInfo = new WorkbookColorInfo(red);\n        }\n    }\n\n    public void InitData()\n    {\n        var companies = new string[] { \"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" };\n        var firstNames = new string[] { \"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" };\n        var lastNames = new string[] { \"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" };\n        var cities = new string[] { \"London\", \"Paris\", \"Boston\", \"Berlin\" };\n        var countries = new string[] { \"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" };\n        var titles = new string[] { \"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\" };\n        var streets = new string[] { \"Main St\", \"Madison St\", \"Broad Way\" };\n        var headers = new string[] {\"Company Name\",\n            \"Contact Title\",\n            \"Country\",\n            \"City\",\n            \"Contact Name\",\n            \"Address\",\n            \"Postal Code\",\n            \"Customer ID\",\n            \"Salary\",\n            \"Age\" };\n\n        // generating excel data source\n        this.wb = new Workbook();\n        var sheet = this.wb.Worksheets.Add(\"Sheet1\");\n\n        for (var i = 0; i < headers.Length; i++)\n        {\n            sheet.Rows[0].Cells[i].Value = headers[i];\n        }\n\n        for (var i = 1; i < 20; i++)\n        {\n            var companyName = this.GetItem(companies);\n            var contactTitle = this.GetItem(titles);\n            var country = this.GetItem(countries);\n            var city = this.GetItem(cities);\n            var contactName = this.GetItem(firstNames) + \" \" + this.GetItem(lastNames);\n            var address = this.GetRandom(10, 60) + \" \" + this.GetItem(streets);\n            var postalCode = this.GetRandom(100, 400) + \" \" + this.GetRandom(50, 90);\n            var customerID = \"CID-\" + this.GetRandom(500, 900);\n            var salary = this.GetRandom(85000, 200000).ToString();\n            var age = this.GetRandom(20, 65).ToString();\n            var dataItem = new string[] {\n                companyName,\n                contactTitle,\n                country,\n                city,\n                contactName,\n                address,\n                postalCode,\n                customerID,\n                salary,\n                age\n            };\n            for (var j = 0; j < dataItem.Length; j++)\n            {\n                sheet.Rows[i].Cells[j].Value = dataItem[j];\n            }\n        }\n    }\n\n    private void CreateXlsx()\n    {\n        ExportData(WorkbookFormat.Excel2007);\n        this.SaveFile(this.wb, \"ExcelWorkbook\");\n    }\n\n    public void SaveFile(Workbook wb, string fileNameWithoutExtension)\n    {\n        var ms = new System.IO.MemoryStream();\n\n        if (wb != null)\n        {\n            wb.Save(ms);\n            string extension;\n\n            switch (wb.CurrentFormat)\n            {\n                default:\n                case WorkbookFormat.StrictOpenXml:\n                case WorkbookFormat.Excel2007:\n                    extension = \".xlsx\";\n                    break;\n                case WorkbookFormat.Excel2007MacroEnabled:\n                    extension = \".xlsm\";\n                    break;\n                case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                    extension = \".xltm\";\n                    break;\n                case WorkbookFormat.Excel2007Template:\n                    extension = \".xltx\";\n                    break;\n\n                case WorkbookFormat.Excel97To2003:\n                    extension = \".xls\";\n                    break;\n                case WorkbookFormat.Excel97To2003Template:\n                    extension = \".xlt\";\n                    break;\n            }\n\n            string fileName = fileNameWithoutExtension + extension;\n            string mime;\n\n            switch (wb.CurrentFormat)\n            {\n                default:\n                case WorkbookFormat.Excel2007:\n                case WorkbookFormat.Excel2007MacroEnabled:\n                case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                case WorkbookFormat.Excel2007Template:\n                case WorkbookFormat.StrictOpenXml:\n                    mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n                    break;\n                case WorkbookFormat.Excel97To2003:\n                case WorkbookFormat.Excel97To2003Template:\n                    mime = \"application/vnd.ms-excel\";\n                    break;\n            }\n\n            ms.Position = 0;\n            var bytes = ms.ToArray();\n            SaveFile(bytes, fileName, mime);\n        }\n\n    }\n\n    public void SaveFile(byte[] bytes, string fileName, string mime)\n    {\n        if (Runtime is WebAssemblyJSRuntime wasmRuntime)\n            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>(\"BlazorDownloadFileFast\", fileName, mime, bytes);\n        else if (Runtime is IJSInProcessRuntime inProc)\n            inProc.InvokeVoid(\"BlazorDownloadFile\", fileName, mime, bytes);\n    }\n\n    public void OnSortChange(ChangeEventArgs args)\n    {\n        this.isSorted = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public void OnFilterChange(ChangeEventArgs args)\n    {\n        this.isFiltered = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public void OnProtectChange(ChangeEventArgs args)\n    {\n        this.isProtected = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public void OnGridlinesChange(ChangeEventArgs args)\n    {\n        this.showGridlines = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public void OnHeadersChange(ChangeEventArgs args)\n    {\n        this.showHeaders = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public void OnFormatChange(ChangeEventArgs args)\n    {\n        this.applyConditionalFormatting = args.Value != null ? (bool)args.Value : false;\n    }\n\n    public double GetRandom(double min, double max)\n    {\n        return Math.Round(min + (Rand.NextDouble() * (max - min)));\n    }\n\n    public string GetItem(string[] array)\n    {\n        var index = (int)Math.Round(GetRandom(0, array.Length - 1));\n        return array[index];\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-worksheets/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-worksheets/wwwroot/BlazorDownloadFile.js",
    "content": "﻿// these methods are from:\r\n// https://www.meziantou.net/generating-and-downloading-a-file-in-a-blazor-webassembly-application.htm\r\nfunction BlazorDownloadFileFast(name, contentType, content) {\r\n    // Convert the parameters to actual JS types\r\n    var nameStr = BINDING.conv_string(name);\r\n    var contentTypeStr = BINDING.conv_string(contentType);\r\n    var contentArray = Blazor.platform.toUint8Array(content);\r\n    // Create the URL\r\n    var file = new File([contentArray], nameStr, { type: contentTypeStr });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = nameStr;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\nfunction BlazorDownloadFile(filename, contentType, content) {\r\n    // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File\r\n    var data = base64DecToArr(content);\r\n    // Create the URL\r\n    var file = new File([data], filename, { type: contentType });\r\n    var exportUrl = URL.createObjectURL(file);\r\n    // Create the <a> element and click on it\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.href = exportUrl;\r\n    a.download = filename;\r\n    a.target = \"_self\";\r\n    a.click();\r\n    // We don't need to keep the url, let's release the memory\r\n    URL.revokeObjectURL(exportUrl);\r\n}\r\n// Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.\r\n// The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64\r\nfunction b64ToUint6(nChr) {\r\n    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\r\n}\r\nfunction base64DecToArr(sBase64, nBlocksSize) {\r\n    var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\r\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n        nMod4 = nInIdx & 3;\r\n        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n            }\r\n            nUint24 = 0;\r\n        }\r\n    }\r\n    return taBytes;\r\n}\r\n//# sourceMappingURL=BlazorDownloadFile.js.map",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/excel/excel-library/operations-on-worksheets/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}