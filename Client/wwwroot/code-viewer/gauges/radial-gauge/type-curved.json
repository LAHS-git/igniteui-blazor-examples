{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/type-curved/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        <IgbRadialGauge Height=\"100%\" Width=\"100%\"\n                     MinimumValue=\"0\"\n                     MaximumValue=\"220\"\n                     Value=\"120\"\n                     Interval=\"20\"\n                     TransitionDuration=\"500\"\n                     LabelExtent=\"0.55\"\n                     LabelInterval=\"20\"\n                     Font=\"15px Verdana,Arial\"\n                     ScaleStartAngle=\"135\"\n                     ScaleEndAngle=\"45\"\n                     ScaleBrush=\"transparent\"\n                     ScaleOversweepShape=\"RadialGaugeScaleOversweepShape.Fitted\"\n                     ScaleSweepDirection=\"SweepDirection.Clockwise\"\n                     ScaleEndExtent=\"0.9\"\n                     ScaleStartExtent=\"0.7\"\n                     BackingShape=\"RadialGaugeBackingShape.Circular\"\n                     BackingBrush=\"transparent\"\n                     BackingOutline=\"transparent\"\n                     NeedleShape=\"RadialGaugeNeedleShape.Needle\"\n                     NeedlePivotShape=\"RadialGaugePivotShape.CircleOverlay\"\n                     NeedleEndExtent=\"0.5\"\n                     NeedlePointFeatureExtent=\"0.2\"\n                     NeedlePivotWidthRatio=\"0.1\"\n                     NeedleBrush=\"#9F9FA0\"\n                     NeedleOutline=\"#9F9FA0\"\n                     NeedlePivotBrush=\"#9F9FA0\"\n                     NeedlePivotOutline=\"#9F9FA0\"\n                     TickBrush=\"#494949\"\n                     TickStartExtent=\"0.65\"\n                     TickEndExtent=\"0.7\"\n                     TickStrokeThickness=\"1\"\n                     MinorTickBrush=\"#494949\"\n                     MinorTickCount=\"4\"\n                     MinorTickStartExtent=\"0.675\"\n                     MinorTickEndExtent=\"0.7\"\n                     MinorTickStrokeThickness=\"1\"\n                     RangeBrushes=@RangeColors\n                     RangeOutlines=@RangeColors>\n            @for (int i = 0; i < RangeInfo.Length; i++)\n            {\n                GaugeRangeInfo info = RangeInfo[i];\n                <IgbRadialGaugeRange StartValue=@info.StartValue\n                                  EndValue=@info.EndValue\n                                  Brush=\"@info.Brush\"\n                                  Outline=\"@info.Brush\"\n                                  InnerStartExtent=@info.InnerStartExtent\n                                  InnerEndExtent=@info.InnerEndExtent\n                                  OuterStartExtent=@info.OuterStartExtent\n                                  OuterEndExtent=@info.OuterEndExtent>\n                </IgbRadialGaugeRange>\n            }\n        </IgbRadialGauge>\n    </div>\n</div>\n\n@code {\n\n    private string RangeColors;\n    private GaugeRangeInfo[] RangeInfo;\n\n    protected override void OnInitialized()\n    {\n\n        RangeColors = \"#3ebe2e, #44d12b, #62e133, #8eef46, #c3f961, #fbc624, #f38e1c, #dc5815, #b8250c, #840000\";\n        string[] colors = RangeColors.Split(',');\n\n        double scaleStartExtent = 0.7;\n        double scaleEndExtent = 0.9;\n\n        double extentSpan = scaleEndExtent - scaleStartExtent - 0.025;\n        double extentInterval = extentSpan / colors.Length;\n\n        double valueSpan = 220;\n        double valueInterval = valueSpan / colors.Length;\n\n        RangeInfo = new GaugeRangeInfo[11];\n\n        RangeInfo[0] = new GaugeRangeInfo()\n        {\n            Brush = \"#494949\",\n            Outline = \"#494949\",\n            StartValue = 0,\n            EndValue = 220,\n            InnerStartExtent = scaleStartExtent,\n            InnerEndExtent = scaleStartExtent,\n            OuterStartExtent = scaleStartExtent,\n            OuterEndExtent = scaleStartExtent\n        };\n\n        for (int i = 0; i < colors.Length; i++)\n        {\n            string color = colors[i];\n            GaugeRangeInfo info = new GaugeRangeInfo()\n            {\n                Brush = color,\n                Outline = color,\n                StartValue = (valueInterval * i),\n                EndValue = (valueInterval * (i + 1)),\n                InnerStartExtent = scaleStartExtent + 0.005,\n                InnerEndExtent = scaleStartExtent + 0.005,\n                OuterStartExtent = scaleStartExtent + 0.005 + (extentInterval * i),\n                OuterEndExtent = scaleStartExtent + 0.005 + (extentInterval * (i + 1))\n            };\n\n            RangeInfo[i + 1] = info;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/type-curved/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(typeof(IgbRadialGaugeModule));\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/type-curved/Services/GaugeRangeInfo.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class GaugeRangeInfo\n    {\n        public string Name { get; set; }\n        public string Brush { get; set; }\n        public string Outline { get; set; }\n        public double StartValue { get; set; }\n        public double EndValue { get; set; }\n        public double InnerStartExtent { get; set; }\n        public double InnerEndExtent { get; set; }\n        public double OuterStartExtent { get; set; }\n        public double OuterEndExtent { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/type-curved/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}