{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/animation/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <button @onclick=\"onAnimateToGauge1\">Gauge Animation #1</button>\n        <button @onclick=\"onAnimateToGauge2\">Gauge Animation #2</button>\n        <button @onclick=\"onAnimateToGauge3\">Gauge Animation #3</button>\n        <button @onclick=\"onAnimateToGauge4\">Gauge Animation #4</button>\n    </div>\n    <div class=\"container vertical\">\n        <IgbRadialGauge @ref=\"Gauge\"\n                     Height=\"100%\" Width=\"100%\"\n                     TransitionDuration=\"@TransitionDuration\"\n                     Value=@Value\n                     Interval=@Interval\n                     MinimumValue=@MinimumValue\n                     MaximumValue=@MaximumValue\n                     Font=@Font\n                     LabelInterval=@LabelInterval\n                     LabelExtent=@LabelExtent\n                     MinorTickCount=@MinorTickCount\n                     MinorTickEndExtent=@MinorTickEndExtent\n                     MinorTickStartExtent=@MinorTickStartExtent\n                     MinorTickStrokeThickness=@MinorTickStrokeThickness\n                     MinorTickBrush=@MinorTickBrush\n                     TickStartExtent=@TickStartExtent\n                     TickEndExtent=@TickEndExtent\n                     TickStrokeThickness=@TickStrokeThickness\n                     TickBrush=\"@TickBrush\"\n                     NeedleShape=@NeedleShape\n                     NeedleEndExtent=@NeedleEndExtent\n                     NeedleEndWidthRatio=@NeedleEndWidthRatio\n                     NeedleStartWidthRatio=@NeedleStartWidthRatio\n                     NeedlePivotShape=@NeedlePivotShape\n                     NeedlePivotWidthRatio=@NeedlePivotWidthRatio\n                     NeedleBaseFeatureWidthRatio=@NeedleBaseFeatureWidthRatio\n                     NeedleBrush=@NeedleBrush\n                     NeedleOutline=@NeedleOutline\n                     NeedlePivotBrush=@NeedlePivotBrush\n                     NeedlePivotOutline=@NeedlePivotOutline\n                     NeedlePointFeatureExtent=@NeedlePointFeatureExtent\n                     IsNeedleDraggingEnabled=@IsNeedleDraggingEnabled\n                     BackingBrush=@BackingBrush\n                     BackingOutline=@BackingOutline\n                     BackingStrokeThickness=@BackingStrokeThickness\n                     BackingShape=@BackingShape\n                     BackingOversweep=@BackingOversweep\n                     BackingCornerRadius=@BackingCornerRadius\n                     BackingOuterExtent=@BackingOuterExtent\n                     ScaleStartAngle=@ScaleStartAngle\n                     ScaleEndAngle=@ScaleEndAngle\n                     ScaleEndExtent=@ScaleEndExtent\n                     ScaleStartExtent=@ScaleStartExtent\n                     ScaleOversweepShape=@ScaleOversweepShape\n                     ScaleBrush=@ScaleBrush\n                     ScaleSweepDirection=@ScaleSweepDirection>\n            @for (int i = 0; i < RangeInfo.Count; i++)\n            {\n                GaugeRangeInfo info = RangeInfo[i];\n                <IgbRadialGaugeRange StartValue=@info.StartValue\n                                  EndValue=@info.EndValue\n                                  InnerStartExtent=@info.InnerStartExtent\n                                  InnerEndExtent=@info.InnerEndExtent\n                                  OuterStartExtent=@info.OuterStartExtent\n                                  OuterEndExtent=@info.OuterEndExtent\n                                  Brush=\"@info.Brush\"\n                                  Outline=\"@info.Outline\">\n                </IgbRadialGaugeRange>\n            }\n        </IgbRadialGauge>\n    </div>\n</div>\n\n@code {\n\n    private IgbRadialGauge Gauge;\n    private double MinimumValue;\n    private double MaximumValue;\n    private double Value;\n    private double Interval;\n    private int TransitionDuration;\n\n    private double LabelExtent;\n    private double LabelInterval;\n    private string Font;\n\n    private double ScaleStartAngle;\n    private double ScaleEndAngle;\n    private string ScaleBrush;\n    private SweepDirection ScaleSweepDirection;\n    private double ScaleEndExtent;\n    private double ScaleStartExtent;\n    private RadialGaugeScaleOversweepShape ScaleOversweepShape;\n\n    private string BackingOutline;\n    private string BackingBrush;\n    private RadialGaugeBackingShape BackingShape;\n    private double BackingStrokeThickness;\n    private double BackingOversweep;\n    private double BackingCornerRadius;\n    private double BackingOuterExtent;\n\n    private bool IsNeedleDraggingEnabled;\n    private double NeedlePointFeatureExtent;\n    private double NeedleEndExtent;\n    private RadialGaugeNeedleShape NeedleShape;\n    private RadialGaugePivotShape NeedlePivotShape;\n    private double NeedlePivotWidthRatio;\n    private string NeedleBrush;\n    private string NeedleOutline;\n    private double NeedleStartWidthRatio;\n    private double NeedleEndWidthRatio;\n    private double NeedleBaseFeatureWidthRatio;\n    private string NeedlePivotBrush;\n    private string NeedlePivotOutline;\n\n    private string TickBrush;\n    private double TickEndExtent;\n    private double TickStartExtent;\n    private double TickStrokeThickness;\n    private string MinorTickBrush;\n    private double MinorTickEndExtent;\n    private double MinorTickStartExtent;\n    private double MinorTickCount;\n    private double MinorTickStrokeThickness;\n\n    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo;\n\n    protected override void OnInitialized()\n    {\n\n        this.MinimumValue = 0;\n        this.MaximumValue = 50;\n        this.Value = 25;\n        this.Interval = 5;\n\n        this.Font = null;\n        this.LabelInterval = 5;\n        this.LabelExtent = 0.71;\n\n        this.ScaleStartAngle = 120;\n        this.ScaleEndAngle = 60;\n        this.ScaleEndExtent = 0;\n        this.ScaleStartExtent = 0;\n        this.ScaleBrush = \"#D6D6D6\";\n        this.ScaleSweepDirection = SweepDirection.Clockwise;\n        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Auto;\n\n        this.BackingOutline = \"#D6D6D6\";\n        this.BackingBrush = \"#FCFCFC\";\n        this.BackingShape = RadialGaugeBackingShape.Circular;\n        this.BackingStrokeThickness = 5;\n        this.BackingOversweep = 0;\n        this.BackingCornerRadius = 0;\n        this.BackingOuterExtent = 0;\n\n        this.IsNeedleDraggingEnabled = true;\n        this.NeedleEndExtent = 0.8;\n        this.NeedleShape = RadialGaugeNeedleShape.Triangle;\n        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;\n        this.NeedlePivotWidthRatio = 0.15;\n        this.NeedleBrush = \"#79797A\";\n        this.NeedleOutline = \"#79797A\";\n        this.NeedleStartWidthRatio = 0.05;\n        this.NeedleEndWidthRatio = 0.03;\n        this.NeedleBaseFeatureWidthRatio = 0.15;\n        this.NeedlePivotBrush = \"#79797A\";\n        this.NeedlePivotOutline = \"#79797A\";\n        this.NeedlePointFeatureExtent = 0;\n\n        this.MinorTickCount = 4;\n        this.MinorTickEndExtent = 0.625;\n        this.MinorTickStartExtent = 0.6;\n        this.MinorTickStrokeThickness = 1;\n        this.MinorTickBrush = \"#79797A\";\n        this.TickStartExtent = 0.6;\n        this.TickEndExtent = 0.65;\n        this.TickStrokeThickness = 2;\n\n        RangeInfo = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();\n        //RangeInfo.Add(new GaugeRangeInfo()\n        //{\n        //    Brush = \"red\",\n        //    Outline = \"red\",\n        //    StartValue = 0,\n        //    EndValue = 100,\n        //    InnerStartExtent = 0.3,\n        //    InnerEndExtent = 0.3,\n        //    OuterStartExtent = 0.9,\n        //    OuterEndExtent = 0.9\n        //});\n    }\n\n    public void onAnimateToGauge1()\n    {\n        this.TransitionDuration = 1000;\n        this.MinimumValue = 0;\n        this.MaximumValue = 10;\n        this.Value = 7.5;\n\n        // Scale Settings\n        this.ScaleStartAngle = 180;\n        this.ScaleEndAngle = 270;\n        this.ScaleBrush = \"transparent\";\n        this.ScaleSweepDirection = SweepDirection.Clockwise;\n\n        // Backing Settings\n        this.BackingOutline = \"white\";\n        this.BackingBrush = \"white\";\n        this.BackingShape = RadialGaugeBackingShape.Fitted;\n\n        // Needle Settings\n        this.NeedleEndExtent = 0.8;\n        this.NeedleShape = RadialGaugeNeedleShape.Triangle;\n        this.NeedlePivotShape = RadialGaugePivotShape.Circle;\n        this.NeedlePivotWidthRatio = 0.1;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#79797a\";\n\n        // TickMark Settings\n        this.TickBrush = \"transparent\";\n        this.MinorTickBrush = \"transparent\";\n\n        // Label Settings\n        this.LabelInterval = 5;\n        this.LabelExtent = 0.915;\n        this.Font = \"15px Verdana,Arial\";\n\n        // setting custom gauge ranges\n        GaugeRangeInfo range1 = new GaugeRangeInfo()\n        {\n            Brush = \"#A4BD29\",\n            Outline = \"#A4BD29\",\n            StartValue = 0,\n            EndValue = 5,\n            InnerStartExtent = 0.3,\n            InnerEndExtent = 0.3,\n            OuterStartExtent = 0.9,\n            OuterEndExtent = 0.9\n        };\n\n        GaugeRangeInfo range2 = new GaugeRangeInfo()\n        {\n            Brush = \"#F86232\",\n            Outline = \"#F86232\",\n            StartValue = 5,\n            EndValue = 10,\n            InnerStartExtent = 0.3,\n            InnerEndExtent = 0.3,\n            OuterStartExtent = 0.9,\n            OuterEndExtent = 0.9\n        };\n\n        RangeInfo.Clear();\n\n        RangeInfo.Add(range1);\n        RangeInfo.Add(range2);\n    }\n\n    public void onAnimateToGauge2()\n    {\n        this.TransitionDuration = 1000;\n        this.MinimumValue = 100;\n        this.MaximumValue = 200;\n        this.Value = 125;\n\n        // Scale Settings\n        this.ScaleStartAngle = 180;\n        this.ScaleEndAngle = 0;\n        this.ScaleBrush = \"transparent\";\n        this.ScaleSweepDirection = SweepDirection.Clockwise;\n\n        // Backing Settings\n        this.BackingOutline = \"white\";\n        this.BackingBrush = \"white\";\n        this.BackingShape = RadialGaugeBackingShape.Fitted;\n\n        // Needle Settings\n        this.NeedleEndExtent = 0.8;\n        this.NeedleShape = RadialGaugeNeedleShape.Triangle;\n        this.NeedlePivotShape = RadialGaugePivotShape.Circle;\n        this.NeedlePivotWidthRatio = 0.1;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#79797a\";\n\n        // TickMark Settings\n        this.TickBrush = \"transparent\";\n        this.MinorTickBrush = \"transparent\";\n\n        // Label Settings\n        this.LabelInterval = 50;\n        this.LabelExtent = 0.935;\n        this.Font = \"13px Verdana,Arial\";\n\n        GaugeRangeInfo range1 = new GaugeRangeInfo()\n        {\n            Brush = \"#32F845\",\n            Outline = \"#32F845\",\n            StartValue = 100,\n            EndValue = 150,\n            InnerStartExtent = 0.3,\n            InnerEndExtent = 0.3,\n            OuterStartExtent = 0.9,\n            OuterEndExtent = 0.9\n        };\n\n        GaugeRangeInfo range2 = new GaugeRangeInfo()\n        {\n            Brush = \"#BF32F8\",\n            Outline = \"#BF32F8\",\n            StartValue = 150,\n            EndValue = 200,\n            InnerStartExtent = 0.3,\n            InnerEndExtent = 0.3,\n            OuterStartExtent = 0.9,\n            OuterEndExtent = 0.9\n        };\n\n        RangeInfo.Clear();\n        RangeInfo.Add(range1);\n        RangeInfo.Add(range2);\n    }\n\n    public void onAnimateToGauge3()\n    {\n        this.TransitionDuration = 1000;\n        this.MinimumValue = 0;\n        this.MaximumValue = 80;\n        this.Value = 10;\n        this.Interval = 10;\n\n        // Label Settings\n        this.LabelExtent = 0.6;\n        this.LabelInterval = 10;\n        this.Font = \"15px Verdana,Arial\";\n\n        // Scale Settings\n        this.ScaleStartAngle = 135;\n        this.ScaleEndAngle = 45;\n        this.ScaleBrush = \"#0b8fed\";\n        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Auto;\n        this.ScaleSweepDirection = SweepDirection.Clockwise;\n        this.ScaleEndExtent = 0.825;\n        this.ScaleStartExtent = 0.775;\n\n        this.MinorTickStartExtent = 0.7;\n        this.MinorTickEndExtent = 0.75;\n        this.TickStartExtent = 0.675;\n        this.TickEndExtent = 0.75;\n\n        // Backing Settings\n        this.BackingShape = RadialGaugeBackingShape.Fitted;\n        this.BackingBrush = \"#fcfcfc\";\n        this.BackingOutline = \"#d6d6d6\";\n        this.BackingOversweep = 5;\n        this.BackingCornerRadius = 10;\n        this.BackingOuterExtent = 0.9;\n\n        // Needle Settings\n        this.NeedleShape = RadialGaugeNeedleShape.NeedleWithBulb;\n        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;\n        this.NeedleEndExtent = 0.5;\n        this.NeedlePointFeatureExtent = 0.3;\n        this.NeedlePivotWidthRatio = 0.2;\n        this.NeedleBrush = \"#9f9fa0\";\n        this.NeedleOutline = \"#9f9fa0\";\n        this.NeedlePivotBrush = \"#9f9fa0\";\n        this.NeedlePivotOutline = \"#9f9fa0\";\n\n        // TickMark Settings\n        this.TickBrush = \"rgba(51, 51, 51, 1)\";\n        this.MinorTickBrush = \"rgba(73, 73, 73, 1)\";\n        this.MinorTickCount = 6;\n\n        RangeInfo.Clear();\n    }\n\n    public void onAnimateToGauge4()\n    {\n        this.TransitionDuration = 1000;\n        this.MinimumValue = 0;\n        this.MaximumValue = 50;\n        this.Value = 25;\n        this.Interval = 5;\n\n        // setting appearance of labels\n        this.LabelInterval = 5;\n        this.LabelExtent = 0.71;\n        this.Font = \"15px Verdana,Arial\";\n\n        // setting custom needle\n        this.IsNeedleDraggingEnabled = true;\n        this.NeedleEndExtent = 0.5;\n        this.NeedleShape = RadialGaugeNeedleShape.Triangle;\n        this.NeedleEndWidthRatio = 0.03;\n        this.NeedleStartWidthRatio = 0.05;\n        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;\n        this.NeedlePivotWidthRatio = 0.15;\n        this.NeedleBaseFeatureWidthRatio = 0.15;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#79797a\";\n        this.NeedlePivotBrush = \"#79797a\";\n        this.NeedlePivotOutline = \"#79797a\";\n\n        // setting appearance of major/minor ticks\n        this.MinorTickCount = 4;\n        this.MinorTickEndExtent = 0.625;\n        this.MinorTickStartExtent = 0.6;\n        this.MinorTickStrokeThickness = 1;\n        this.MinorTickBrush = \"#79797a\";\n        this.TickStartExtent = 0.6;\n        this.TickEndExtent = 0.65;\n        this.TickStrokeThickness = 2;\n        this.TickBrush = \"#79797a\";\n\n        // setting extent of gauge scale\n        this.ScaleStartAngle = 120;\n        this.ScaleEndAngle = 60;\n        this.ScaleBrush = \"#d6d6d6\";\n        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Fitted;\n        this.ScaleSweepDirection = SweepDirection.Clockwise;\n        this.ScaleEndExtent = 0.57;\n        this.ScaleStartExtent = 0.5;\n\n        // setting appearance of backing dial\n        this.BackingBrush = \"#fcfcfc\";\n        this.BackingOutline = \"#d6d6d6\";\n        this.BackingStrokeThickness = 5;\n        this.BackingShape = RadialGaugeBackingShape.Circular;\n\n        GaugeRangeInfo range1 = new GaugeRangeInfo()\n        {\n            Brush = \"#F86232\",\n            Outline = \"F86232\",\n            StartValue = 5,\n            EndValue = 15,\n            InnerStartExtent = 0.5,\n            InnerEndExtent = 0.5,\n            OuterStartExtent = 0.57,\n            OuterEndExtent = 0.57\n        };\n\n        GaugeRangeInfo range2 = new GaugeRangeInfo()\n        {\n            Brush = \"#DC3F76\",\n            Outline = \"DC3F76\",\n            StartValue = 15,\n            EndValue = 35,\n            InnerStartExtent = 0.5,\n            InnerEndExtent = 0.5,\n            OuterStartExtent = 0.57,\n            OuterEndExtent = 0.57\n        };\n\n        GaugeRangeInfo range3 = new GaugeRangeInfo()\n        {\n            Brush = \"#7446B9\",\n            Outline = \"7446B9\",\n            StartValue = 35,\n            EndValue = 45,\n            InnerStartExtent = 0.5,\n            InnerEndExtent = 0.5,\n            OuterStartExtent = 0.57,\n            OuterEndExtent = 0.57\n        };\n\n        RangeInfo.Clear();\n        RangeInfo.Add(range1);\n        RangeInfo.Add(range2);\n        RangeInfo.Add(range3);\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/animation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(typeof(IgbRadialGaugeModule));\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/animation/Services/GaugeRangeInfo.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class GaugeRangeInfo\n    {\n        public string Name { get; set; }\n        public string Brush { get; set; }\n        public string Outline { get; set; }\n        public double StartValue { get; set; }\n        public double EndValue { get; set; }\n        public double InnerStartExtent { get; set; }\n        public double InnerEndExtent { get; set; }\n        public double OuterStartExtent { get; set; }\n        public double OuterEndExtent { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/radial-gauge/animation/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}