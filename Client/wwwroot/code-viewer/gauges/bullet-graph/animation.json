{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/bullet-graph/animation/App.razor",
    "content": "\n@using System.Collections.ObjectModel\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <button @onclick=\"onAnimateToGauge1\">Gauge Animation #1</button>\n        <button @onclick=\"onAnimateToGauge2\">Gauge Animation #2</button>\n        <button @onclick=\"onAnimateToGauge3\">Gauge Animation #3</button>\n    </div>\n    <div class=\"container vertical\">\n        <IgbBulletGraph Height=\"80px\" Width=\"100%\"\n                     TransitionDuration=@TransitionDuration\n                     MinimumValue=@MinimumValue\n                     MaximumValue=@MaximumValue\n                     Value=@Value\n                     Interval=@Interval\n                     LabelInterval=@LabelInterval\n                     LabelExtent=@LabelExtent\n                     ValueBrush=@ValueBrush\n                     ValueInnerExtent=@ValueInnerExtent\n                     ValueOuterExtent=@ValueOuterExtent\n                     TargetValueBrush=@TargetValueBrush\n                     TargetValueBreadth=@TargetValueBreadth\n                     TargetValue=@TargetValue\n                     MinorTickCount=@MinorTickCount\n                     MinorTickEndExtent=@MinorTickEndExtent\n                     MinorTickStartExtent=@MinorTickStartExtent\n                     TickStartExtent=@TickStartExtent\n                     TickEndExtent=@TickEndExtent\n                     TickStrokeThickness=@TickStrokeThickness\n                     ScaleBackgroundThickness=@ScaleBackgroundThickness\n                     ScaleBackgroundBrush=@ScaleBackgroundBrush\n                     ScaleBackgroundOutline=@ScaleBackgroundOutline\n                     ScaleStartExtent=@ScaleStartExtent\n                     ScaleEndExtent=@ScaleEndExtent\n                     BackingBrush=@BackingBrush\n                     BackingOutline=@BackingOutline\n                     BackingStrokeThickness=@BackingStrokeThickness>\n\n            @if (GaugeRanges.Count > 0)\n            {\n                 GaugeRangeInfo info0 = GaugeRanges[0];\n                 <IgbLinearGraphRange Name=info0.Name\n                                  StartValue=info0.StartValue\n                                  EndValue=info0.EndValue\n                                  InnerStartExtent=info0.InnerStartExtent\n                                  InnerEndExtent=info0.InnerEndExtent\n                                  OuterStartExtent=info0.OuterStartExtent\n                                  OuterEndExtent=info0.OuterEndExtent\n                                  Brush=\"@info0.Brush\"\n                                  Outline=\"@info0.Outline\">\n                 </IgbLinearGraphRange>\n            }\n            @if (GaugeRanges.Count > 1)\n            {\n                 GaugeRangeInfo info1 = GaugeRanges[1];\n                 <IgbLinearGraphRange Name=info1.Name\n                                  StartValue=info1.StartValue\n                                  EndValue=info1.EndValue\n                                  InnerStartExtent=info1.InnerStartExtent\n                                  InnerEndExtent=info1.InnerEndExtent\n                                  OuterStartExtent=info1.OuterStartExtent\n                                  OuterEndExtent=info1.OuterEndExtent\n                                  Brush=\"@info1.Brush\"\n                                  Outline=\"@info1.Outline\">\n                 </IgbLinearGraphRange>\n            }\n            @if (GaugeRanges.Count > 2)\n            {\n                 GaugeRangeInfo info2 = GaugeRanges[2];\n                 <IgbLinearGraphRange Name=info2.Name\n                                  StartValue=info2.StartValue\n                                  EndValue=info2.EndValue\n                                  InnerStartExtent=info2.InnerStartExtent\n                                  InnerEndExtent=info2.InnerEndExtent\n                                  OuterStartExtent=info2.OuterStartExtent\n                                  OuterEndExtent=info2.OuterEndExtent\n                                  Brush=\"@info2.Brush\"\n                                  Outline=\"@info2.Outline\">\n                 </IgbLinearGraphRange>\n            }\n        </IgbBulletGraph>\n\n    </div>\n</div>\n\n@code {\n\n    private double MinimumValue;\n    private double MaximumValue;\n    private double Value;\n    private double Interval;\n    private int TransitionDuration;\n\n    private double LabelInterval;\n    private double LabelExtent;\n\n    private double ValueInnerExtent;\n    private double ValueOuterExtent;\n    private string ValueBrush;\n\n    private string TargetValueBrush;\n    private double TargetValueBreadth;\n    private double TargetValue;\n\n    private double MinorTickCount;\n    private double MinorTickEndExtent;\n    private double MinorTickStartExtent;\n    private double TickStartExtent;\n    private double TickEndExtent;\n    private double TickStrokeThickness;\n\n    private double ScaleBackgroundThickness;\n    private string ScaleBackgroundBrush;\n    private string ScaleBackgroundOutline;\n    private double ScaleStartExtent;\n    private double ScaleEndExtent;\n\n    private string BackingBrush;\n    private string BackingOutline;\n    private double BackingStrokeThickness;\n\n    private bool ShouldAnimate = false;\n\n    private List<GaugeRangeInfo> GaugeRanges;\n\n    protected override void OnInitialized()\n    {\n\n        this.MinimumValue = 0;\n        this.MaximumValue = 120;\n        this.ValueBrush = \"#4286F4\";\n        this.Value = 70;\n        this.TargetValueBrush = \"#4286F4\";\n        this.TargetValue = 90;\n        this.TargetValueBreadth = 10;\n        this.Interval = 10;\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.02;\n        this.ScaleBackgroundThickness = 0;\n        this.ScaleBackgroundBrush = \"#DBDBDB\";\n        this.ScaleBackgroundOutline = \"Gray\";\n        this.TransitionDuration = 0;\n\n        this.GaugeRanges = new List<GaugeRangeInfo>();\n\n        this.onAnimateToGauge3();\n    }\n\n    private void onAnimateToGauge1()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        this.MinimumValue = 0;\n        this.MaximumValue = 80;\n        this.Value = 70;\n        this.Interval = 20;\n\n        // setting appearance of labels\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.ValueInnerExtent = 0.5;\n        this.ValueOuterExtent = 0.7;\n        this.ValueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.TargetValueBrush = \"#000000\";\n        this.TargetValueBreadth = 10;\n        this.TargetValue = 60;\n\n        // setting appearance of major/minor ticks\n        this.MinorTickCount = 5;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.TickStartExtent = 0.20;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleBackgroundThickness = 0.5;\n        this.ScaleBackgroundBrush = \"#dbdbdb\";\n        this.ScaleBackgroundOutline = \"gray\";\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n        this.ScaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#f7f7f7\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        var colors = new List<string>() { \"#A4BD29\", \"#F86232\" };\n        var ranges = new List<GaugeRangeInfo>();\n        for (int i = 0; i < colors.Count; i++)\n        {\n            var info = new GaugeRangeInfo()\n            {\n                Name = \"range \" + i.ToString(),\n                StartValue = i * 40,\n                EndValue = (i * 40) + 40,\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.2,\n                InnerEndExtent = 0.2,\n                OuterStartExtent = 0.95,\n                OuterEndExtent = 0.95\n            };\n            ranges.Add(info);\n        }\n        this.GaugeRanges = ranges;\n        this.ShouldAnimate = true;\n    }\n\n    private void onAnimateToGauge2()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        this.MinimumValue = 100;\n        this.MaximumValue = 200;\n        this.Value = 120;\n        this.Interval = 10;\n\n        // setting appearance of labels\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.ValueInnerExtent = 0.5;\n        this.ValueOuterExtent = 0.7;\n        this.ValueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.TargetValueBrush = \"#000000\";\n        this.TargetValueBreadth = 10;\n        this.TargetValue = 180;\n\n        // setting appearance of major/minor ticks\n        this.MinorTickCount = 5;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.TickStartExtent = 0.20;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleBackgroundThickness = 0.5;\n        this.ScaleBackgroundBrush = \"#dbdbdb\";\n        this.ScaleBackgroundOutline = \"gray\";\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n        this.ScaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#f7f7f7\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        var colors = new List<string>() { \"#0078C8\", \"#21A7FF\", \"#4FB9FF\" };\n        double[] startValues = { 100, 150, 175 };\n        double[] endValues   = { 150, 175, 200 };\n\n        var ranges = new List<GaugeRangeInfo>();\n        for (int i = 0; i < colors.Count; i++)\n        {\n            var info = new GaugeRangeInfo()\n            {\n                Name = \"range \" + i.ToString(),\n                StartValue = startValues[i],\n                EndValue = endValues[i],\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.2,\n                InnerEndExtent = 0.2,\n                OuterStartExtent = 0.95,\n                OuterEndExtent = 0.95\n            };\n            ranges.Add(info);\n        }\n        this.GaugeRanges = ranges;\n        this.ShouldAnimate = true;\n    }\n\n    private void onAnimateToGauge3()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        this.MinimumValue = 0;\n        this.MaximumValue = 120;\n        this.Value = 70;\n        this.Interval = 10;\n\n        // setting appearance of labels\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.ValueInnerExtent = 0.5;\n        this.ValueOuterExtent = 0.7;\n        this.ValueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.TargetValueBrush = \"#000000\";\n        this.TargetValueBreadth = 10;\n        this.TargetValue = 90;\n\n        // setting appearance of major/minor ticks\n        this.MinorTickCount = 5;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.TickStartExtent = 0.20;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleBackgroundThickness = 0.5;\n        this.ScaleBackgroundBrush = \"#dbdbdb\";\n        this.ScaleBackgroundOutline = \"gray\";\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n        this.ScaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#f7f7f7\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        var colors = new List<string>() { \"#FF9800\", \"#F96232\", \"#C62828\" };\n        var ranges = new List<GaugeRangeInfo>();\n\n        for (int i = 0; i < colors.Count; i++)\n        {\n            var info = new GaugeRangeInfo()\n            {\n                Name = \"range \" + i.ToString(),\n                StartValue = i * 40,\n                EndValue = (i * 40) + 40,\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.2,\n                InnerEndExtent = 0.2,\n                OuterStartExtent = 0.95,\n                OuterEndExtent = 0.95\n            };\n            ranges.Add(info);\n        }\n        this.GaugeRanges = ranges;\n        this.ShouldAnimate = true;\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/bullet-graph/animation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(typeof(IgbBulletGraphModule));\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/bullet-graph/animation/Services/GaugeRangeInfo.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class GaugeRangeInfo\n    {\n        public string Name { get; set; }\n        public string Brush { get; set; }\n        public string Outline { get; set; }\n        public double StartValue { get; set; }\n        public double EndValue { get; set; }\n        public double InnerStartExtent { get; set; }\n        public double InnerEndExtent { get; set; }\n        public double OuterStartExtent { get; set; }\n        public double OuterEndExtent { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/bullet-graph/animation/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}