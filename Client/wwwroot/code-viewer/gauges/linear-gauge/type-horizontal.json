{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/type-horizontal/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        <IgbLinearGauge Height=\"120px\" Width=\"100%\"\n                     Orientation=\"LinearScaleOrientation.Horizontal\"\n                     Value=\"80\"\n                     MinimumValue=\"0\"\n                     MaximumValue=\"100\"\n                     Interval=\"10\"\n                     LabelInterval=\"10\"\n                     LabelExtent=\"0.0\"\n                     TransitionDuration=\"500\"\n                     ScaleInnerExtent=\"0.25\"\n                     ScaleOuterExtent=\"0.8\"\n                     ScaleStartExtent=\"0.05\"\n                     ScaleEndExtent=\"0.95\">\n            @for (int i = 0; i < RangeInfo1.Count; i++)\n            {\n                GaugeRangeInfo info1 = RangeInfo1[i];\n                <IgbLinearGraphRange StartValue=info1.StartValue\n                                  EndValue=info1.EndValue\n                                  InnerStartExtent=info1.InnerStartExtent\n                                  InnerEndExtent=info1.InnerEndExtent\n                                  OuterStartExtent=info1.OuterStartExtent\n                                  OuterEndExtent=info1.OuterEndExtent\n                                  Brush=\"@info1.Brush\"\n                                  Outline=\"@info1.Outline\">\n                </IgbLinearGraphRange>\n            }\n        </IgbLinearGauge>\n        <IgbLinearGauge Height=\"120px\" Width=\"100%\"\n                     Orientation=\"LinearScaleOrientation.Horizontal\"\n                     Value=\"60\"\n                     MinimumValue=\"0\"\n                     MaximumValue=\"100\"\n                     Interval=\"10\"\n                     LabelInterval=\"10\"\n                     LabelExtent=\"0.0\"\n                     TransitionDuration=\"500\"\n                     ScaleInnerExtent=\"0.25\"\n                     ScaleOuterExtent=\"0.8\"\n                     ScaleStartExtent=\"0.05\"\n                     ScaleEndExtent=\"0.95\">\n            @for (int i = 0; i < RangeInfo2.Count; i++)\n            {\n                GaugeRangeInfo info2 = RangeInfo2[i];\n                <IgbLinearGraphRange StartValue=info2.StartValue\n                                  EndValue=info2.EndValue\n                                  InnerStartExtent=info2.InnerStartExtent\n                                  InnerEndExtent=info2.InnerEndExtent\n                                  OuterStartExtent=info2.OuterStartExtent\n                                  OuterEndExtent=info2.OuterEndExtent\n                                  Brush=\"@info2.Brush\"\n                                  Outline=\"@info2.Outline\">\n                </IgbLinearGraphRange>\n            }\n        </IgbLinearGauge>\n        <IgbLinearGauge Height=\"120px\" Width=\"100%\"\n                     Orientation=\"LinearScaleOrientation.Horizontal\"\n                     Value=\"40\"\n                     MinimumValue=\"0\"\n                     MaximumValue=\"100\"\n                     Interval=\"10\"\n                     LabelInterval=\"10\"\n                     LabelExtent=\"0.0\"\n                     TransitionDuration=\"500\"\n                     ScaleInnerExtent=\"0.25\"\n                     ScaleOuterExtent=\"0.8\"\n                     ScaleStartExtent=\"0.05\"\n                     ScaleEndExtent=\"0.95\">\n            @for (int i = 0; i < RangeInfo3.Count; i++)\n            {\n                GaugeRangeInfo info3 = RangeInfo3[i];\n                <IgbLinearGraphRange StartValue=info3.StartValue\n                                  EndValue=info3.EndValue\n                                  InnerStartExtent=info3.InnerStartExtent\n                                  InnerEndExtent=info3.InnerEndExtent\n                                  OuterStartExtent=info3.OuterStartExtent\n                                  OuterEndExtent=info3.OuterEndExtent\n                                  Brush=\"@info3.Brush\"\n                                  Outline=\"@info3.Outline\">\n                </IgbLinearGraphRange>\n            }\n        </IgbLinearGauge>\n    </div>\n</div>\n\n@code {\n\n    private List<GaugeRangeInfo> RangeInfo1;\n    private List<GaugeRangeInfo> RangeInfo2;\n    private List<GaugeRangeInfo> RangeInfo3;\n\n    protected override void OnInitialized()\n    {\n\n        RangeInfo1 = new List<GaugeRangeInfo>();\n        RangeInfo2 = new List<GaugeRangeInfo>();\n        RangeInfo3 = new List<GaugeRangeInfo>();\n\n        List<string> colors1 = new List<string>() { \"#008000\", \"#10B401\", \"#45EC03\", \"#2EFA2E\" };\n        List<string> colors2 = new List<string>() { \"#E29B03\", \"#FDB417\", \"#FDC957\", \"#FDD682\" };\n        List<string> colors3 = new List<string>() { \"#CF0000\", \"#FF0000\", \"#FD3939\", \"#FA6363\" };\n\n        CreateGaugeRangeCollection(colors1, RangeInfo1);\n        CreateGaugeRangeCollection(colors2, RangeInfo2);\n        CreateGaugeRangeCollection(colors3, RangeInfo3);\n    }\n\n    private void CreateGaugeRangeCollection(List<string> colors, List<GaugeRangeInfo> collection)\n    {\n        double rangeSpan = 100;\n        double rangeValueInterval = rangeSpan / colors.Count;\n\n        for (int i = 0; i < colors.Count; i++)\n        {\n            string color = colors[i];\n\n            GaugeRangeInfo info = new GaugeRangeInfo()\n            {\n                StartValue = rangeValueInterval * i,\n                EndValue = rangeValueInterval * (i + 1),\n                Brush = color,\n                Outline = color,\n                InnerStartExtent = 0.25,\n                InnerEndExtent = 0.25,\n                OuterStartExtent = 0.8,\n                OuterEndExtent = 0.8\n            };\n\n            collection.Add(info);\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/type-horizontal/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(typeof(IgbLinearGaugeModule));\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/type-horizontal/Services/GaugeRangeInfo.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class GaugeRangeInfo\n    {\n        public string Name { get; set; }\n        public string Brush { get; set; }\n        public string Outline { get; set; }\n        public double StartValue { get; set; }\n        public double EndValue { get; set; }\n        public double InnerStartExtent { get; set; }\n        public double InnerEndExtent { get; set; }\n        public double OuterStartExtent { get; set; }\n        public double OuterEndExtent { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/type-horizontal/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}