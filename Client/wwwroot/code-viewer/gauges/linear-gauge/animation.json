{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/animation/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <button @onclick=\"onAnimateToGauge1\">Gauge Animation #1</button>\n        <button @onclick=\"onAnimateToGauge2\">Gauge Animation #2</button>\n        <button @onclick=\"onAnimateToGauge3\">Gauge Animation #3</button>\n    </div>\n    <div class=\"container vertical\">\n        <IgbLinearGauge Height=\"80px\" Width=\"100%\"\n                     TransitionDuration=\"@TransitionDuration\"\n                     MinimumValue=@MinimumValue\n                     MaximumValue=@MaximumValue\n                     Value=@Value\n                     Interval=@Interval\n                     LabelInterval=@LabelInterval\n                     LabelExtent=@LabelExtent\n                     IsNeedleDraggingEnabled=@IsNeedleDraggingEnabled\n                     NeedleShape=@NeedleShape\n                     NeedleBrush=@NeedleBrush\n                     NeedleOutline=@NeedleOutline\n                     NeedleStrokeThickness=@NeedleStrokeThickness\n                     NeedleOuterExtent=@NeedleOuterExtent\n                     NeedleInnerExtent=@NeedleInnerExtent\n                     MinorTickCount=@MinorTickCount\n                     MinorTickEndExtent=@MinorTickEndExtent\n                     MinorTickStartExtent=@MinorTickStartExtent\n                     MinorTickStrokeThickness=@MinorTickStrokeThickness\n                     TickStartExtent=@TickStartExtent\n                     TickEndExtent=@TickEndExtent\n                     TickStrokeThickness=@TickStrokeThickness\n                     ScaleStrokeThickness=@ScaleStrokeThickness\n                     ScaleBrush=@ScaleBrush\n                     ScaleOutline=@ScaleOutline\n                     ScaleInnerExtent=@ScaleInnerExtent\n                     ScaleOuterExtent=@ScaleOuterExtent\n                     ScaleStartExtent=@ScaleStartExtent\n                     ScaleEndExtent=@ScaleEndExtent\n                     BackingBrush=@BackingBrush\n                     BackingOutline=@BackingOutline\n                     BackingStrokeThickness=@BackingStrokeThickness>\n            @for (int i = 0; i < RangeInfo.Count; i++)\n            {\n                GaugeRangeInfo info = RangeInfo[i];\n                <IgbLinearGraphRange StartValue=info.StartValue\n                                  EndValue=info.EndValue\n                                  InnerStartExtent=info.InnerStartExtent\n                                  InnerEndExtent=info.InnerEndExtent\n                                  OuterStartExtent=info.OuterStartExtent\n                                  OuterEndExtent=info.OuterEndExtent\n                                  Brush=\"@info.Brush\"\n                                  Outline=\"@info.Outline\">\n                </IgbLinearGraphRange>\n            }\n        </IgbLinearGauge>\n    </div>\n</div>\n\n@code {\n\n    private double MinimumValue;\n    private double MaximumValue;\n    private double Value;\n    private double Interval;\n    private int TransitionDuration;\n\n    private double LabelInterval;\n    private double LabelExtent;\n\n    private bool IsNeedleDraggingEnabled;\n    private LinearGraphNeedleShape NeedleShape;\n    private string NeedleBrush;\n    private string NeedleOutline;\n    private double NeedleStrokeThickness;\n    private double NeedleOuterExtent;\n    private double NeedleInnerExtent;\n\n    private double MinorTickCount;\n    private double MinorTickEndExtent;\n    private double MinorTickStartExtent;\n    private double MinorTickStrokeThickness;\n    private double TickStartExtent;\n    private double TickEndExtent;\n    private double TickStrokeThickness;\n\n    private double ScaleStrokeThickness;\n    private string ScaleBrush;\n    private string ScaleOutline;\n    private double ScaleInnerExtent;\n    private double ScaleOuterExtent;\n    private double ScaleStartExtent;\n    private double ScaleEndExtent;\n\n    private string BackingBrush;\n    private string BackingOutline;\n    private double BackingStrokeThickness;\n\n    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo;\n\n    private bool ShouldAnimate = false;\n\n    protected override void OnInitialized()\n    {\n\n        this.MinimumValue = 0;\n        this.MaximumValue = 100;\n        this.Value = 50;\n        this.Interval = 10;\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.0;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.TickStartExtent = 0.25;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n        this.NeedleShape = LinearGraphNeedleShape.Needle;\n        this.NeedleBrush = \"#79797A\";\n        this.NeedleOutline = \"#79797A\";\n        this.ScaleStrokeThickness = 0;\n        this.ScaleBrush = \"#FFFFFF\";\n        this.ScaleOutline = \"#D3D3D3\";\n        this.BackingBrush = \"#FFFFFF\";\n        this.BackingOutline = \"#D1D1D1\";\n        this.BackingStrokeThickness = 0;\n\n        this.RangeInfo = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();\n\n        this.onAnimateToGauge3();\n    }\n\n    private void onAnimateToGauge1()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        // linear gauge requires settings for these properties:\n        this.MinimumValue = 0;\n        this.MaximumValue = 80;\n        this.Value = 60;\n        this.Interval = 20;\n\n        // setting custom appearance of labels\n        this.LabelInterval = 20;\n        this.LabelExtent = 0.0;\n\n        // setting custom appearance of needle\n        this.IsNeedleDraggingEnabled = true;\n        this.NeedleShape = LinearGraphNeedleShape.Trapezoid;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#ffffffff\";\n        this.NeedleStrokeThickness = 1;\n        this.NeedleOuterExtent = 0.9;\n        this.NeedleInnerExtent = 0.3;\n\n        // setting custom appearance of major/minor ticks\n        this.MinorTickCount = 5;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.MinorTickStrokeThickness = 1;\n        this.TickStartExtent = 0.25;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleStrokeThickness = 0;\n        this.ScaleBrush = \"#ffffff\";\n        this.ScaleOutline = \"#dbdbdb\";\n        this.ScaleInnerExtent = 0.075;\n        this.ScaleOuterExtent = 0.85;\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#ffffff\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        this.RangeInfo.Clear();\n\n        List<string> colors = new List<string>() { \"#A4BD29\", \"#F86232\" };\n        double[] startValues = { 0, 40 };\n        double[] endValues = { 40, 80 };\n\n        for (int i = 0; i < colors.Count; i++)\n        {\n            GaugeRangeInfo info = new GaugeRangeInfo()\n            {\n                StartValue = startValues[i],\n                EndValue = endValues[i],\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.075,\n                InnerEndExtent = 0.075,\n                OuterStartExtent = 0.65,\n                OuterEndExtent = 0.65\n            };\n\n            this.RangeInfo.Add(info);\n        }\n\n        this.ShouldAnimate = true;\n    }\n\n    private void onAnimateToGauge2()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        // linear gauge requires settings for these properties:\n        this.MinimumValue = 100;\n        this.MaximumValue = 200;\n        this.Value = 150;\n        this.Interval = 20;\n\n        // setting custom appearance of labels\n        this.LabelInterval = 20;\n        this.LabelExtent = 0.0;\n\n        // setting custom appearance of needle\n        this.IsNeedleDraggingEnabled = true;\n        this.NeedleShape = LinearGraphNeedleShape.Triangle;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#ffffffff\";\n        this.NeedleStrokeThickness = 1;\n        this.NeedleOuterExtent = 0.9;\n        this.NeedleInnerExtent = 0.3;\n\n        // setting custom appearance of major/minor ticks\n        this.MinorTickCount = 4;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.MinorTickStrokeThickness = 1;\n        this.TickStartExtent = 0.25;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleStrokeThickness = 0;\n        this.ScaleBrush = \"#ffffff\";\n        this.ScaleOutline = \"#dbdbdb\";\n        this.ScaleInnerExtent = 0.075;\n        this.ScaleOuterExtent = 0.85;\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#ffffff\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        this.RangeInfo.Clear();\n\n        List<string> colors = new List<string>() { \"#0078C8\",\"#0099FF\",\"#21A7FF\",\"#45B9FF\" };\n        double[] startValues = { 100, 125, 150, 175 };\n        double[] endValues = { 125, 150, 175, 200 };\n\n        for (int i = 0; i < colors.Count; i++)\n        {\n            GaugeRangeInfo info = new GaugeRangeInfo()\n            {\n                StartValue = startValues[i],\n                EndValue = endValues[i],\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.075,\n                InnerEndExtent = 0.075,\n                OuterStartExtent = 0.65,\n                OuterEndExtent = 0.65\n            };\n\n            this.RangeInfo.Add(info);\n        }\n\n        this.ShouldAnimate = true;\n    }\n\n    private void onAnimateToGauge3()\n    {\n        if (ShouldAnimate)\n        {\n            this.TransitionDuration = 1000;\n        }\n        // linear gauge requires settings for these properties:\n        this.MinimumValue = 0;\n        this.MaximumValue = 100;\n        this.Value = 50;\n        this.Interval = 10;\n\n        // setting custom appearance of labels\n        this.LabelInterval = 10;\n        this.LabelExtent = 0.0;\n\n        // setting custom appearance of needle\n        this.IsNeedleDraggingEnabled = true;\n        this.NeedleShape = LinearGraphNeedleShape.Needle;\n        this.NeedleBrush = \"#79797a\";\n        this.NeedleOutline = \"#ffffffff\";\n        this.NeedleStrokeThickness = 1;\n        this.NeedleOuterExtent = 0.9;\n        this.NeedleInnerExtent = 0.3;\n\n        // setting custom appearance of major/minor ticks\n        this.MinorTickCount = 5;\n        this.MinorTickEndExtent = 0.10;\n        this.MinorTickStartExtent = 0.20;\n        this.MinorTickStrokeThickness = 1;\n        this.TickStartExtent = 0.25;\n        this.TickEndExtent = 0.05;\n        this.TickStrokeThickness = 2;\n\n        // setting extent of gauge scale\n        this.ScaleStrokeThickness = 0;\n        this.ScaleBrush = \"#ffffff\";\n        this.ScaleOutline = \"#dbdbdb\";\n        this.ScaleInnerExtent = 0.075;\n        this.ScaleOuterExtent = 0.85;\n        this.ScaleStartExtent = 0.05;\n        this.ScaleEndExtent = 0.95;\n\n        // setting appearance of backing fill and outline\n        this.BackingBrush = \"#ffffff\";\n        this.BackingOutline = \"#d1d1d1\";\n        this.BackingStrokeThickness = 0;\n\n        this.RangeInfo.Clear();\n\n        List<string> colors = new List<string>() { \"#9FB328\", \"#438C47\", \"#3F51B5\" };\n        double[] startValues = { 0, 30, 70 };\n        double[] endValues = { 30, 70, 100 };\n\n        for (int i = 0; i < colors.Count; i++)\n        {\n            GaugeRangeInfo info = new GaugeRangeInfo()\n            {\n                StartValue = startValues[i],\n                EndValue = endValues[i],\n                Brush = colors[i],\n                Outline = colors[i],\n                InnerStartExtent = 0.075,\n                InnerEndExtent = 0.075,\n                OuterStartExtent = 0.95,\n                OuterEndExtent = 0.95\n            };\n\n            this.RangeInfo.Add(info);\n        }\n\n        this.ShouldAnimate = true;\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/animation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(typeof(IgbLinearGaugeModule));\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/animation/Services/GaugeRangeInfo.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class GaugeRangeInfo\n    {\n        public string Name { get; set; }\n        public string Brush { get; set; }\n        public string Outline { get; set; }\n        public double StartValue { get; set; }\n        public double EndValue { get; set; }\n        public double InnerStartExtent { get; set; }\n        public double InnerEndExtent { get; set; }\n        public double OuterStartExtent { get; set; }\n        public double OuterEndExtent { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/gauges/linear-gauge/animation/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}