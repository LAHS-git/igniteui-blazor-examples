{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/high-frequency/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n@using System.Collections.ObjectModel\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <label class=\"options-label\" style=\"width: 5rem;\">Data Update:</label>\n        <label class=\"options-value\">@DataUpdateInfo</label>\n        <input class=\"options-slider\" type=\"range\" min=\"20\" max=\"1000\" step=\"10\"\n               value=@DataUpdateInterval\n               @onchange=OnDataUpdateIntervalChanged />\n\n        <button @onclick=\"OnDataToggleFeedClick\">@DataFeedStatus</button>\n        <label class=\"options-label\">FPS: @FramePerSecond</label>\n    </div>\n\n    <div class=\"options horizontal\">\n        <label class=\"options-label\" style=\"width: 5rem;\">Data Points:</label>\n        <label class=\"options-value\">@DataPoints</label>\n        <input class=\"options-slider\" type=\"range\" min=\"10\" max=\"10000\" step=\"1\"\n               value=@DataPoints\n               @onchange=OnDataPointsChanged />\n\n        <button @onclick=\"OnDataGenerateClick\">Generate</button>\n        <label class=\"options-label\">Optimize Scaling: </label>\n        <input type=\"checkbox\" @onchange=\"OnOptimizeScalingChanged\" />\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (Data != null)\n        {\n            <IgbFinancialChart Width=\"100%\" @ref=\"Chart\" Height=\"100%\"\n                            ChartType=\"FinancialChartType.Line\"\n                            Thickness=2\n                            DataSource=\"Data\"\n                            PixelScalingRatio=\"ScalingRatio\"\n                            ZoomSliderType=\"FinancialChartZoomSliderType.None\" />\n        }\n    </div>\n</div>\n\n@code {\n    \n\n    private IgbFinancialChart Chart;\n    private double ScalingRatio { get; set; } = 1;\n    private ObservableCollection<StockItem> Data;\n\n    private string DataInfo { get; set; }\n    private int DataPoints { get; set; } = 1000;\n\n    private int DataUpdateInterval { get; set; } = 100; // milliseconds\n    private string DataUpdateInfo { get; set; }\n    private string DataFeedStatus { get; set; } = \"Live Data\";\n    private bool DataFeedActive { get; set; } = false;\n\n    private int FramePerSecond { get; set; } = 0;\n    private int FrameCount = 0;\n    private DateTime FrameUpdateTime;\n\n    protected override async Task OnInitializedAsync()\n    {\n        var dataList = StocksUtility.GetStocksItems(this.DataPoints);\n        this.Data = new ObservableCollection<StockItem>(dataList);\n\n        this.DataInfo = StocksUtility.ToShortString(this.DataPoints);\n        this.FrameUpdateTime = DateTime.Now;\n        this.DataUpdateInfo = (this.DataUpdateInterval / 1000.0).ToString(\"0.0\") + \"s \";\n\n        await Task.Delay(1000);\n        this.OnDataToggleFeedClick();\n    }\n\n    private void OnDataToggleFeedClick()\n    {\n        DataFeedActive = !DataFeedActive;\n        DataFeedStatus = DataFeedActive ? \"Stop Data\" : \"Live Data\";\n        SetupInterval();\n    }\n\n    private void OnOptimizeScalingChanged(ChangeEventArgs e)\n    {\n        if ((bool)e.Value == true)\n        {\n            this.ScalingRatio = 1.0;\n        }\n        else\n        {\n            this.ScalingRatio = 0;\n        }\n    }\n\n    private void OnDataGenerateClick()\n    {\n        var dataList = StocksUtility.GetStocksItems(this.DataPoints);\n\n        this.Data = new ObservableCollection<StockItem>(dataList);\n        SetupInterval();\n    }\n\n    private void OnDataUpdateIntervalChanged(ChangeEventArgs e)\n    {\n        int num = int.Parse(e.Value.ToString());\n\n        if (num < 10) num = 10;\n        if (num > 1000) num = 1000;\n\n        this.DataUpdateInterval = num;\n        this.DataUpdateInfo = (this.DataUpdateInterval / 1000.0).ToString(\"0.0\") + \"s \";\n\n        if (this.Data.Count > 0)\n        {\n            this.SetupInterval();\n        }\n    }\n\n    private void OnDataPointsChanged(ChangeEventArgs e)\n    {\n        var num = int.Parse(e.Value.ToString());\n\n        if (num < 10) num = 10;\n        if (num > 100000) num = 100000;\n\n        this.DataPoints = num;\n        this.DataInfo = StocksUtility.ToShortString(num);\n    }\n\n    private void SetupInterval()\n    {\n        if (DataFeedActive)\n            Task.Delay(this.DataUpdateInterval).ContinueWith((t) => OnTimerTick());\n    }\n\n    private void OnTimerTick()\n    {\n        if (!DataFeedActive) return;\n\n        var oldItem = this.Data[0];\n        var newItem = StocksUtility.GetNewItem(this.Data.ToList(), 60);\n\n        this.Data.Add(newItem.FirstOrDefault());\n        this.Chart.NotifyInsertItem(this.Data, this.Data.Count - 1, newItem);\n        this.Data.RemoveAt(0);\n        this.Chart.NotifyRemoveItem(this.Data, 0, oldItem);\n\n        this.FrameCount++;\n        var currTime = DateTime.Now;\n        var elapsed = currTime.Subtract(FrameUpdateTime);\n\n        if (elapsed.TotalSeconds > 5)\n        {\n            var fps = this.FrameCount / elapsed.TotalSeconds;\n            this.FrameUpdateTime = currTime;\n            this.FrameCount = 0;\n            this.FramePerSecond = (int)Math.Round(fps);\n            this.StateHasChanged();\n        }\n\n        if (DataFeedActive)\n        {\n            Task.Delay(this.DataUpdateInterval).ContinueWith((t) => OnTimerTick());\n        }\n\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/high-frequency/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbFinancialChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/high-frequency/Services/StocksUtility.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public class StocksUtility\n    {\n        public static int intervalDays = 1;\n        public static int intervalHours = 0;\n        public static int intervalMinutes = 0;\n\n        public static double priceStart = 200;\n        public static double priceRange = 1;\n        public static double volumeRange = 1000;\n        public static double volumeStart = 20000000;\n\n        public static Random rand = new Random();\n\n        public static List<StockItem> GetStocksFrom(DateTime dateEnd, int years)\n        {\n            var dateStart = dateEnd.AddYears(-years);\n            return GetStocksBetween(dateStart, dateEnd);\n        }\n\n        public static List<StockItem> GetStocksItems(int points)\n        {\n            intervalDays = 0;\n            intervalHours = 1;\n            intervalMinutes = 0;\n\n            var today = DateTime.Today;\n            var year = today.Year;\n            var dateEnd = new DateTime(year, 11, 1);\n            var dateStart = dateEnd.AddHours(-points);\n            return GetStocksBetween(dateStart, dateEnd);\n        }\n\n        public static List<StockItem> GetStocksBetween(DateTime dateStart, DateTime dateEnd)\n        {\n\n            var interval = intervalDays * 24 * 60;\n            interval += intervalHours * 60;\n            interval += intervalMinutes;\n\n            var time = dateStart.AddDays(0);\n            var v = volumeStart;\n            var o = priceStart;\n\n            var h = o + (rand.NextDouble() * priceRange);\n            var l = o - (rand.NextDouble() * priceRange);\n            var c = l + (rand.NextDouble() * (h - l));\n\n            var stock = new List<StockItem> { };\n            while (time < dateEnd)\n            {\n                var stockItem =\n                new StockItem {\n                    Date = time, Open = o, High = h, Low = l, Close = c, Volume = v\n                };\n\n                stock.Add(stockItem);\n\n                o = c + ((rand.NextDouble() - 0.5) * priceRange);\n                if (o < 0)\n                {\n                    o = Math.Abs(o) + 2;\n                }\n                h = o + (rand.NextDouble() * priceRange);\n                l = o - (rand.NextDouble() * priceRange);\n                c = l + (rand.NextDouble() * (h - l));\n                v = v + ((rand.NextDouble() - 0.5) * volumeRange);\n                if (v < 0)\n                {\n                    v = Math.Abs(v) + 10000;\n                }\n\n                o = Math.Round(o * 100) / 100;\n                h = Math.Round(h * 100) / 100;\n                l = Math.Round(l * 100) / 100;\n                c = Math.Round(c * 100) / 100;\n                v = Math.Round(v * 100) / 100;\n\n                time = time.AddMinutes(interval);\n            }\n            //setting data intent for Series Title\n            //   (stock as any).__dataIntents = {\n            //    close: [\"SeriesTitle/Stock Prices\"]\n            //};\n\n            return stock;\n        }\n\n        public static string ToShortString(double largeValue)\n        {\n            double roundValue;\n\n            if (largeValue >= 1000000)\n            {\n                roundValue = Math.Round(largeValue / 100000) / 10;\n                return roundValue + \"M\";\n            }\n            if (largeValue >= 1000)\n            {\n                roundValue = Math.Round(largeValue / 100) / 10;\n                return roundValue + \"K\";\n            }\n\n            roundValue = Math.Round(largeValue);\n            return roundValue + \"\";\n        }\n\n        public static DateTime GetYear(DateTime date)\n        {\n            return new DateTime(date.Year);\n        }\n\n        public static double GetQuarter(DateTime date)\n        {\n            var month = date.Month;\n            double d = (month + 2) / 3;\n            return Math.Round(d);\n        }\n\n        public static StockItem GetLastItem(List<StockItem> array)\n        {\n            if (array.Count == 0)\n            {\n                return null;\n            }\n            return array.LastOrDefault();\n        }\n\n        public static List<StockItem> GetNewItem(List<StockItem> array, int ?interval)\n        {\n            var lastItem = GetLastItem(array);\n\n            if (interval == null)\n            {\n                interval = intervalDays * 24 * 60;\n                interval += intervalHours * 60;\n                interval += intervalMinutes;\n            }\n\n            var time = lastItem.Date.AddMinutes(interval.Value);\n            double v = lastItem.Volume;\n            double c = lastItem.Close;\n            double h;\n            double l;\n\n            double o = c + ((rand.NextDouble() - 0.5) * priceRange);\n            if (o < 0)\n            {\n                o = Math.Abs(o) + 2;\n            }\n            h = o + (rand.NextDouble() * priceRange);\n            l = o - (rand.NextDouble() * priceRange);\n            c = l + (rand.NextDouble() * (h - l));\n            v += ((rand.NextDouble() - 0.5) * volumeRange);\n            if (v < 0)\n            {\n                v = Math.Abs(v) + 10000;\n            }\n\n            var newValue = new List<StockItem> { new StockItem { Date = time, Open = o, High = h, Low = l, Close = c, Volume = v } };\n\n            return newValue;\n        }\n    }\n\n    public class StockItem\n    {\n        public DateTime Date { get; set; }\n        public double Open { get; set; }\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n        public int Index { get; set; }\n        public string Info { get; set; }\n        public int Value { get; set; }\n\n        public StockItem Clone()\n        {\n            var copy = new StockItem();\n            copy.Date = this.Date;\n            copy.Open = this.Open;\n            copy.High = this.High;\n            copy.Low = this.Low;\n            copy.Close = this.Close;\n            copy.Volume = this.Volume;\n            return copy;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/high-frequency/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}