{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/multiple-data/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n\n        @if (Data != null)\n        {\n            <IgbFinancialChart Width=\"100%\"\n                Height=\"100%\"\n                ChartType=FinancialChartType.Line\n                Thickness=2\n                DataSource=\"Data\"\n                ChartTitle=\"Google vs Microsoft Changes\"\n                Subtitle=\"Between 2013 and 2017\"\n                YAxisMode=\"FinancialChartYAxisMode.PercentChange\"\n                YAxisTitle=\"Percent Changed\"\n             />\n        }\n    </div>\n</div>\n\n@code {\n    \n\n    protected List<StockPrice[]> Data;\n\n    protected override async Task OnInitializedAsync()\n    {\n        this.Data = await StocksHistory.GetMultipleStocks();\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/multiple-data/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbFinancialChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/multiple-data/Services/StockHistory.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Globalization;\n\nnamespace Infragistics.Samples\n{\n    public class StocksHistory\n    {\n        public static async Task<List<StockPrice[]>> GetMultipleStocks()\n        {\n            // getting prices of multiples stocks asynchronously\n            var dataSources = new List<StockPrice[]> {\n                //await GetAmazonStock(),\n                await GetGoogleStock(),\n                await GetMicrosoftStock(),\n                //await GetTeslaStock()\n            };\n\n            return dataSources;\n        }\n\n        /** gets Amazon stock OHLC prices from a .JSON file */\n        public static async Task<StockPrice[]> GetAmazonStock() {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockAmazon.json\";\n\n            //TODO\n            // setting data intent for Series Title, e.g. FinancialChart usage\n            //(stockData as any).__dataIntents = {\n            //  close: [\"SeriesTitle/Amazon\"]\n            //};\n            // console.log(\"fetchAmazonStock: \", stockData.length);\n\n            //var serializeOptions = new JsonSerializerOptions();\n            //serializeOptions.Converters.Add(new DateTimeConverter());\n\n            var http = new HttpClient();\n            var data = await http.GetFromJsonAsync<StockPrice[]>(url);\n            foreach (var item in data)\n            {\n                var dateArray = item.Date.Split(\"-\");\n                var d = int.Parse(dateArray[2]);\n                var m = int.Parse(dateArray[1]) + 1;\n                var y = int.Parse(dateArray[0]);\n\n                item.Time = new DateTime(y, m, d);\n            }\n\n            return data;\n\n        }\n\n        /** gets Tesla stock OHLC prices from a .JSON file */\n        public static async Task<StockPrice[]> GetTeslaStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockTesla.json\";\n\n            //TODO\n            // setting data intent for Series Title, e.g. FinancialChart usage\n            //(stockData as any).__dataIntents = {\n            //  close: [\"SeriesTitle/Amazon\"]\n            //};\n            // console.log(\"fetchAmazonStock: \", stockData.length);\n\n            var serializeOptions = new JsonSerializerOptions();\n            serializeOptions.Converters.Add(new DateTimeConverter());\n\n            var http = new HttpClient();\n            var data = await http.GetFromJsonAsync<StockPrice[]>(url);\n            foreach (var item in data)\n            {\n                var dateArray = item.Date.Split(\"-\");\n                var d = int.Parse(dateArray[2]);\n                var m = int.Parse(dateArray[1]) + 1;\n                var y = int.Parse(dateArray[0]);\n\n                item.Time = new DateTime(y, m, d);\n            }\n            return data;\n\n        }\n\n        /** gets Microsoft stock OHLC prices from a .JSON file */\n        public static async Task<StockPrice[]> GetMicrosoftStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockMicrosoft.json\";\n\n            //TODO\n            // setting data intent for Series Title, e.g. FinancialChart usage\n            //(stockData as any).__dataIntents = {\n            //  close: [\"SeriesTitle/Amazon\"]\n            //};\n            // console.log(\"fetchAmazonStock: \", stockData.length);\n            var serializeOptions = new JsonSerializerOptions();\n            serializeOptions.Converters.Add(new DateTimeConverter());\n\n            var http = new HttpClient();\n            var data = await http.GetFromJsonAsync<StockPrice[]>(url);\n            foreach (var item in data)\n            {\n                var dateArray = item.Date.Split(\"-\");\n                var d = int.Parse(dateArray[2]);\n                var m = int.Parse(dateArray[1]) + 1;\n                var y = int.Parse(dateArray[0]);\n\n                item.Time = new DateTime(y, m, d);\n            }\n            return data;\n\n        }\n\n        public static async Task<StockPrice[]> GetGoogleStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockGoogle.json\";\n\n            //TODO\n            // setting data intent for Series Title, e.g. FinancialChart usage\n            //(stockData as any).__dataIntents = {\n            //  close: [\"SeriesTitle/Amazon\"]\n            //};\n            // console.log(\"fetchAmazonStock: \", stockData.length);\n\n            var serializeOptions = new JsonSerializerOptions();\n            serializeOptions.Converters.Add(new DateTimeConverter());\n\n            var http = new HttpClient();\n            var data = await http.GetFromJsonAsync<StockPrice[]>(url);\n            foreach (var item in data)\n            {\n                var dateArray = item.Date.Split(\"-\");\n                var d = int.Parse(dateArray[2]);\n                var m = int.Parse(dateArray[1]) + 1;\n                var y = int.Parse(dateArray[0]);\n\n                item.Time = new DateTime(y, m, d);\n            }\n\n            return data;\n        }\n    }\n\n    public class DateTimeConverter : JsonConverter<DateTime>\n    {\n        public override DateTime Read(\n            ref Utf8JsonReader reader,\n            Type typeToConvert,\n            JsonSerializerOptions options)\n        {\n            return DateTime.Now;\n        }\n\n        public override void Write(\n           Utf8JsonWriter writer,\n           DateTime date,\n           JsonSerializerOptions options) =>\n               writer.WriteStringValue(date.ToString());\n    }\n\n    public class StockPrice\n    {\n        public string Date { get; set; }\n        public DateTime Time { get; set; }\n        public double Open { get; set; }\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n        public int Index { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/multiple-data/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}