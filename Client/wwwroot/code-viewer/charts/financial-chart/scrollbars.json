{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/scrollbars/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n\n    <div class=\"container vertical fill\">\n        <IgbFinancialChart\n        Name=\"chart\"\n        @ref=\"chart\"\n        IsToolbarVisible=\"false\"\n        IsVerticalZoomEnabled=\"true\"\n        IsHorizontalZoomEnabled=\"true\"\n        DataSource=\"MultipleStocks\"\n        VerticalViewScrollbarMode=\"SeriesViewerScrollbarMode.Fading\"\n        HorizontalViewScrollbarMode=\"SeriesViewerScrollbarMode.Persistent\"\n        ZoomSliderType=\"FinancialChartZoomSliderType.None\"\n        WindowRect=\"@(new Rect(0, 0, 0.5, 1))\">\n        </IgbFinancialChart>\n\n    </div>\n</div>\n\n@code {\n    \n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var chart = this.chart;\n\n    }\n\n    private IgbFinancialChart chart;\n\n    private MultipleStocks _multipleStocks = null;\n    public MultipleStocks MultipleStocks\n    {\n        get\n        {\n            if (_multipleStocks == null)\n            {\n                MultipleStocks.Fetch().ContinueWith((t) => {_multipleStocks = t.Result;  StateHasChanged(); });\n            }\n            return _multipleStocks;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/scrollbars/MultipleStocks.cs",
    "content": "//begin async data\n    using System;\n    using System.Collections.Generic;\n    using System.Text.Json;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using System.Net.Http;\n    using System.Collections.ObjectModel;\n    using IgniteUI.Blazor.Controls;\n\n    public class MultipleStocks : List<TitledStockData>\n    {\n        public async static Task<MultipleStocks> Fetch()\n        {\n            var google = await MultipleStocks.GetGoogleStock();\n            var amazon = await MultipleStocks.GetAmazonStock();\n\n            var val = new MultipleStocks();\n            val.Add(google);\n            val.Add(amazon);\n            return val;\n        }\n\n        /** gets Amazon stock OHLC prices from a .JSON file */\n        public async static Task<TitledStockData> GetAmazonStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockAmazon.json\";\n            var data = await Fetch(url);\n            var stockData = ConvertData(data);\n            stockData[0].Title = \"Amazon\";\n            return stockData;\n        }\n\n        /** gets Tesla stock OHLC prices from a .JSON file */\n        public async static Task<TitledStockData> GetTeslaStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockTesla.json\";\n            var data = await Fetch(url);\n            var stockData = ConvertData(data);\n            stockData[0].Title = \"Tesla\";\n            return stockData;\n        }\n\n        /** gets Microsoft stock OHLC prices from a .JSON file */\n        public async static Task<TitledStockData> GetMicrosoftStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockMicrosoft.json\";\n            var data = await Fetch(url);\n            var stockData = ConvertData(data);\n            stockData[0].Title = \"Microsoft\";\n            return stockData;\n        }\n\n        /** gets Google stock OHLC prices from a .JSON file */\n        public async static Task<TitledStockData> GetGoogleStock()\n        {\n            var url = \"https://static.infragistics.com/xplatform/data/stocks/stockGoogle.json\";\n            var data = await Fetch(url);\n            var stockData = ConvertData(data);\n            stockData[0].Title = \"Google\";\n            return stockData;\n        }\n\n        private async static Task<Dictionary<string, object>[]> Fetch(string url)\n        {\n            HttpClient client = new HttpClient();\n            var str = await client.GetStringAsync(url);\n            var arr = JsonSerializer.Deserialize<Dictionary<string, object>[]>(str);\n            return arr;\n        }\n\n        public static TitledStockData ConvertData(Dictionary<string, object>[] arr)\n        {\n            var ret = new TitledStockData();\n\n            foreach (var json in arr)\n            {\n                var date = ((JsonElement)json[\"date\"]).GetString();\n                var parts = date.Split('-'); // \"2020-01-01\"\n                var item = new MultipleStocksItem();\n                item.Date = new DateTime(int.Parse(parts[0]), int.Parse(parts[1]) + 1, int.Parse(parts[2]));\n                item.Open = ((JsonElement)json[\"open\"]).GetDouble();\n                item.High = ((JsonElement)json[\"high\"]).GetDouble();\n                item.Low = ((JsonElement)json[\"low\"]).GetDouble();\n                item.Close = ((JsonElement)json[\"close\"]).GetDouble();\n                item.Volume = ((JsonElement)json[\"volume\"]).GetDouble();\n                ret.Add(item);\n            }\n\n            return ret;\n        }\n    }\n\n    public class MultipleStocksItem\n    {\n        [DataSeriesMemberIntent(DataSeriesIntent.SeriesTitle)]\n        public string Title { get; set; }\n        public DateTime Date { get; set; }\n        public double Open { get; set; }\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n    }\n\n    public class TitledStockData\n        : ObservableCollection<MultipleStocksItem>\n    {\n\n    }\n    //end async data",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/scrollbars/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbFinancialChartModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbLegendModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/scrollbars/wwwroot/index.css",
    "content": "/*\r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}