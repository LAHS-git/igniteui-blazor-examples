{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/annotations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <label class=\"options-label\">Annotations: </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\"\n                   checked=@CrosshairsVisible\n                   @onchange=\"OnCrosshairsVisible\" /> Crosshair\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\"\n                   checked=@CalloutsAnnotationVisible\n                   @onchange=\"OnCalloutsVisible\" /> Callouts\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\"\n                   checked=@ItemTooltipVisible\n                   @onchange=\"OnItemTooltipVisible\" /> Item Tooltip\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\"\n                   checked=@FinalValuesVisible\n                   @onchange=\"OnFinalValuesVisible\" /> Final Values\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\"\n                   checked=@MarkersVisible\n                   @onchange=\"OnMarkersVisible\" /> Markers\n        </label>\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (Data != null)\n        {\n            <IgbFinancialChart Width=\"100%\"\n                Height=\"100%\"\n                @ref=\"@Chart\"\n                ChartType=FinancialChartType.Line\n                Thickness=2\n                XAxisMode=\"XAxisMode\"\n                YAxisMode=\"YAxisMode\"\n                DataSource=\"Data\"\n                ExcludedProperties=ExcludedProps\n                CalloutsVisible=\"@CalloutsAnnotationVisible\"\n                CalloutsXMemberPath=\"Index\"\n                CalloutsYMemberPath=\"Value\"\n                CalloutsLabelMemberPath=\"Info\"\n                CalloutsContentMemberPath=\"Info\"\n                CrosshairsSnapToData=false\n                ToolTipType=\"@TooltipType\"\n                CrosshairsDisplayMode=\"CrosshairsMode\"\n                CrosshairsAnnotationEnabled=\"@CrosshairsVisible\"\n                FinalValueAnnotationsVisible=\"@FinalValuesVisible\"/>\n        }\n    </div>\n</div>\n\n@code {\n\n    public IgbFinancialChart _Chart;\n    public IgbFinancialChart Chart\n    {\n        get { return _Chart; }\n        set\n        {\n            _Chart = value;\n            this.Chart.MarkerTypes.Clear();\n            this.Chart.MarkerTypes.Add(MarkerType.None);\n            StateHasChanged();\n        }\n    }\n    public FinancialChartXAxisMode XAxisMode = FinancialChartXAxisMode.Ordinal;\n    public FinancialChartYAxisMode YAxisMode = FinancialChartYAxisMode.Numeric;\n    List<StockItem> Data;\n\n    public string[] ExcludedProps { get; set; } = new string[] { \"Index\", \"Info\" };\n    public CrosshairsDisplayMode CrosshairsMode = CrosshairsDisplayMode.Both;\n    public ToolTipType TooltipType = ToolTipType.Item;\n    public Boolean CalloutsAnnotationVisible { get; set; } = true;\n    public Boolean CrosshairsVisible { get; set; } = true;\n    public Boolean FinalValuesVisible { get; set; } = true;\n    public Boolean ItemTooltipVisible { get; set; } = true;\n    public Boolean MarkersVisible { get; set; } = false;\n\n    protected override void OnInitialized()\n    {\n\n        InitData();\n    }\n\n    private void OnItemTooltipVisible(ChangeEventArgs e)\n    {\n        if ((bool)e.Value == true)\n        {\n            TooltipType = ToolTipType.Item;\n        }\n        else\n        {\n            TooltipType = ToolTipType.None;\n        }\n        ItemTooltipVisible = (bool)e.Value;\n    }\n    private void OnCrosshairsVisible(ChangeEventArgs e)\n    {\n        if ((bool)e.Value == true)\n        {\n            CrosshairsMode = CrosshairsDisplayMode.Both;\n        }\n        else\n        {\n            CrosshairsMode = CrosshairsDisplayMode.None;\n        }\n        CrosshairsVisible = (bool)e.Value;\n    }\n    private void OnCalloutsVisible(ChangeEventArgs e)\n    {\n        CalloutsAnnotationVisible = (bool)e.Value;\n    }\n    private void OnFinalValuesVisible(ChangeEventArgs e)\n    {\n        FinalValuesVisible = (bool)e.Value;\n    }\n    private void OnMarkersVisible(ChangeEventArgs e)\n    {\n\n        if ((bool)e.Value == true)\n        {\n            this.Chart.MarkerTypes.Clear();\n            this.Chart.MarkerTypes.Add(MarkerType.Automatic);\n        }\n        else\n        {\n            this.Chart.MarkerTypes.Clear();\n            this.Chart.MarkerTypes.Add(MarkerType.None);\n        }\n        MarkersVisible = (bool)e.Value;\n    }\n\n    public void InitData()\n    {\n        var today = DateTime.Now;\n        var year = today.Year;\n        var dateMonth = today.Month;\n        var dateEnd = new DateTime(year + 5, dateMonth, 1);\n        var dateStart = new DateTime(year - 1, dateMonth, 1);\n\n        var stockData = StocksUtility.GetStocksBetween(dateStart, dateEnd);\n\n        var minVal = int.MaxValue;\n        var maxVal = int.MinValue;\n        var minIndex = 0;\n        var maxIndex = 0;\n        var idx = 0;\n        var currentYear = 0;\n        var currentQuarter = 0;\n\n        // adding annotation data for some data item\n        foreach (var item in stockData) {\n\n            if (minVal > item.Close)\n            {\n                minVal = (int)item.Close;\n                minIndex = idx;\n            }\n            if (maxVal < item.Close)\n            {\n                maxVal = (int)item.Close;\n                maxIndex = idx;\n            }\n            var itemYear = StocksUtility.GetYear(item.Date);\n            if (currentYear != itemYear.Year)\n            {\n                currentYear = itemYear.Year;\n                item.Info = itemYear.Year.ToString();\n            }\n\n            var itemQuarter = StocksUtility.GetQuarter(item.Date);\n            if (currentQuarter != itemQuarter)\n            {\n                currentQuarter = (int)itemQuarter;\n                item.Info = \"Q\" + itemQuarter;\n            }\n\n            item.Index = idx;\n            item.Value = (int)item.Close;\n            idx++;\n        }\n\n        stockData[100].Info = \"SPLIT\";\n        stockData[200].Info = \"SPLIT\";\n        stockData[250].Info = \"SPLIT\";\n\n        stockData[130].Info = \"DIV\";\n        stockData[270].Info = \"DIV\";\n        stockData[320].Info = \"DIV\";\n\n        stockData[minIndex].Info = \"MIN\";\n        stockData[maxIndex].Info = \"MAX\";\n\n        this.Data = stockData;\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/annotations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbFinancialChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/annotations/Services/StocksUtility.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public class StocksUtility\n    {\n        public static int intervalDays = 1;\n        public static int intervalHours = 0;\n        public static int intervalMinutes = 0;\n\n        public static double priceStart = 200;\n        public static double priceRange = 1;\n        public static double volumeRange = 1000;\n        public static double volumeStart = 20000000;\n\n        public static Random rand = new Random();\n\n        public static List<StockItem> GetStocksFrom(DateTime dateEnd, int years)\n        {\n            var dateStart = dateEnd.AddYears(-years);\n            return GetStocksBetween(dateStart, dateEnd);\n        }\n\n        public static List<StockItem> GetStocksItems(int points)\n        {\n            intervalDays = 0;\n            intervalHours = 1;\n            intervalMinutes = 0;\n\n            var today = DateTime.Today;\n            var year = today.Year;\n            var dateEnd = new DateTime(year, 11, 1);\n            var dateStart = dateEnd.AddHours(-points);\n            return GetStocksBetween(dateStart, dateEnd);\n        }\n\n        public static List<StockItem> GetStocksBetween(DateTime dateStart, DateTime dateEnd)\n        {\n\n            var interval = intervalDays * 24 * 60;\n            interval += intervalHours * 60;\n            interval += intervalMinutes;\n\n            var time = dateStart.AddDays(0);\n            var v = volumeStart;\n            var o = priceStart;\n\n            var h = o + (rand.NextDouble() * priceRange);\n            var l = o - (rand.NextDouble() * priceRange);\n            var c = l + (rand.NextDouble() * (h - l));\n\n            var stock = new List<StockItem> { };\n            while (time < dateEnd)\n            {\n                var stockItem =\n                new StockItem {\n                    Date = time, Open = o, High = h, Low = l, Close = c, Volume = v\n                };\n\n                stock.Add(stockItem);\n\n                o = c + ((rand.NextDouble() - 0.5) * priceRange);\n                if (o < 0)\n                {\n                    o = Math.Abs(o) + 2;\n                }\n                h = o + (rand.NextDouble() * priceRange);\n                l = o - (rand.NextDouble() * priceRange);\n                c = l + (rand.NextDouble() * (h - l));\n                v = v + ((rand.NextDouble() - 0.5) * volumeRange);\n                if (v < 0)\n                {\n                    v = Math.Abs(v) + 10000;\n                }\n\n                o = Math.Round(o * 100) / 100;\n                h = Math.Round(h * 100) / 100;\n                l = Math.Round(l * 100) / 100;\n                c = Math.Round(c * 100) / 100;\n                v = Math.Round(v * 100) / 100;\n\n                time = time.AddMinutes(interval);\n            }\n            //setting data intent for Series Title\n            //   (stock as any).__dataIntents = {\n            //    close: [\"SeriesTitle/Stock Prices\"]\n            //};\n\n            return stock;\n        }\n\n        public static string ToShortString(double largeValue)\n        {\n            double roundValue;\n\n            if (largeValue >= 1000000)\n            {\n                roundValue = Math.Round(largeValue / 100000) / 10;\n                return roundValue + \"M\";\n            }\n            if (largeValue >= 1000)\n            {\n                roundValue = Math.Round(largeValue / 100) / 10;\n                return roundValue + \"K\";\n            }\n\n            roundValue = Math.Round(largeValue);\n            return roundValue + \"\";\n        }\n\n        public static DateTime GetYear(DateTime date)\n        {\n            return new DateTime(date.Year);\n        }\n\n        public static double GetQuarter(DateTime date)\n        {\n            var month = date.Month;\n            double d = (month + 2) / 3;\n            return Math.Round(d);\n        }\n\n        public static StockItem GetLastItem(List<StockItem> array)\n        {\n            if (array.Count == 0)\n            {\n                return null;\n            }\n            return array.LastOrDefault();\n        }\n\n        public static List<StockItem> GetNewItem(List<StockItem> array, int ?interval)\n        {\n            var lastItem = GetLastItem(array);\n\n            if (interval == null)\n            {\n                interval = intervalDays * 24 * 60;\n                interval += intervalHours * 60;\n                interval += intervalMinutes;\n            }\n\n            var time = lastItem.Date.AddMinutes(interval.Value);\n            double v = lastItem.Volume;\n            double c = lastItem.Close;\n            double h;\n            double l;\n\n            double o = c + ((rand.NextDouble() - 0.5) * priceRange);\n            if (o < 0)\n            {\n                o = Math.Abs(o) + 2;\n            }\n            h = o + (rand.NextDouble() * priceRange);\n            l = o - (rand.NextDouble() * priceRange);\n            c = l + (rand.NextDouble() * (h - l));\n            v += ((rand.NextDouble() - 0.5) * volumeRange);\n            if (v < 0)\n            {\n                v = Math.Abs(v) + 10000;\n            }\n\n            var newValue = new List<StockItem> { new StockItem { Date = time, Open = o, High = h, Low = l, Close = c, Volume = v } };\n\n            return newValue;\n        }\n    }\n\n    public class StockItem\n    {\n        public DateTime Date { get; set; }\n        public double Open { get; set; }\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n        public int Index { get; set; }\n        public string Info { get; set; }\n        public int Value { get; set; }\n\n        public StockItem Clone()\n        {\n            var copy = new StockItem();\n            copy.Date = this.Date;\n            copy.Open = this.Open;\n            copy.High = this.High;\n            copy.Low = this.Low;\n            copy.Close = this.Close;\n            copy.Volume = this.Volume;\n            return copy;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/financial-chart/annotations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}