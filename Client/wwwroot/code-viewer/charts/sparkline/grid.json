{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/grid/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.AspNetCore.Components.Rendering\n@using IgniteUI.Blazor.Controls\n;\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                      RowHeight=\"90\"\n                      AutoGenerateColumns=\"false\"\n\n                      DataSource=\"Data\">\n                <IgbTextColumn Field=\"ProductID\" HeaderText=\"ID\" Width=\"@(\"*>110\")\"\n                            HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" />\n                <IgbTextColumn Field=\"ProductName\" HeaderText=\"Product\" Width=\"@(\"*>140\")\" />\n                <IgbNumericColumn Field=\"ProductPrice\" HeaderText=\"Price\" Width=\"@(\"*>110\")\"\n                               PositivePrefix=\"$\" ShowGroupingSeparator=\"true\"\n                               MinFractionDigits=\"2\" />\n\n                @* custom sparkline solumn: *@\n                <IgbTemplateColumn Field=\"OrderHistory\" Width=\"@(\"*>180\")\"\n                                HeaderText=\"Order History\" PaddingTop=\"10\" PaddingBottom=\"10\"\n                                HorizontalAlignment=\"CellContentHorizontalAlignment.Center\">\n                    <Template>\n                        <div style=\"width: 100%; height: 70px; background: transparent\">\n                            <IgbSparkline Height=\"100%\" Width=\"100%\"\n                                       DataSource=\"@((context.RowItem as Product).OrderHistory)\"\n                                       DisplayType=\"SparklineDisplayType.Line\"\n                                       ValueMemberPath=\"Sold\"\n                                       LabelMemberPath=\"Week\"\n                                       Brush=\"rgb(21, 190, 6)\">\n                            </IgbSparkline>\n                        </div>\n                    </Template>\n                </IgbTemplateColumn>\n\n                <IgbNumericColumn Field=\"OrderCount\" HeaderText=\"Orders\" Width=\"@(\"*>110\")\"\n                               HorizontalAlignment=\"CellContentHorizontalAlignment.Center\" />\n                <IgbNumericColumn Field=\"Profit\" Width=\"@(\"*>120\")\" PositivePrefix=\"$\" ShowGroupingSeparator=\"true\" />\n\n                <IgbImageColumn IsEditable=\"false\" Field=\"CountryFlag\" HeaderText=\"Country\" Width=\"@(\"*>120\")\"\n                             ContentOpacity=\"1\" HorizontalAlignment=\"CellContentHorizontalAlignment.Center\"\n                             PaddingTop=\"10\" PaddingBottom=\"10\"/>\n                <IgbTextColumn Field=\"Status\" HeaderText=\"Status\" Width=\"@(\"*>120\")\"\n                            HorizontalAlignment=\"CellContentHorizontalAlignment.Center\" />\n            </IgbDataGrid>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<Product> Data;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = Products.GetData(20);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/grid/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbSparklineModule),\n                typeof(IgbDataGridModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/grid/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/grid/Services/Products.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class Product\n    {\n        public string CountryFlag { get; set; }\n        public string CountryName { get; set; }\n        public double Margin { get; set; }\n        public int OrderCount { get; set; }\n        public List<OrderHistoryItem> OrderHistory { get; set; }\n        public int OrderShipped { get; set; }\n        public double OrderValue { get; set; }\n        public DateTime OrderDate { get; set; }\n        public string ProductID { get; set; }\n        public string ProductName { get; set; }\n        public double ProductPrice { get; set; }\n        public double Profit { get; set; }\n        //public List<ReturnRateItem> ReturnRate { get; set; }\n        public string Status { get; set; }\n    }\n\n    public class ReturnRateItem\n    {\n        public double Balance { get; set; }\n        public int Week { get; set; }\n    }\n\n    public class OrderHistoryItem\n    {\n        public double Sold { get; set; }\n        public int Week { get; set; }\n    }\n\n    public class Products\n    {\n        public static List<Product> GetData(int? count)\n        {\n            if (count == null)\n            {\n                count = 20;\n            }\n\n            string[] names = {\n                \"Intel CPU\", \"AMD CPU\",\n                \"Intel Motherboard\", \"AMD Motherboard\", \"NVIDIA Motherboard\",\n                \"NVIDIA GPU\", \"GIGABYTE GPU\", \"Asus GPU\", \"AMD GPU\", \"MSI GPU\",\n                \"Corsair Memory\", \"Patriot Memory\", \"Skill Memory\",\n                \"Samsung HDD\", \"WD HDD\", \"Seagate HDD\", \"Intel HDD\",\n                \"Samsung SSD\", \"WD SSD\", \"Seagate SSD\", \"Intel SSD\",\n                \"Samsung Monitor\", \"Asus Monitor\", \"LG Monitor\", \"HP Monitor\" };\n            string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\" };\n            string[] status = { \"Packing\", \"Shipped\", \"Delivered\" };\n\n            var products = new List<Product>();\n            for (int i = 0; i < count; i++)\n            {\n                var id = DataGenerator.Pad((int)count - i, count.ToString().Length);\n                var price = Math.Round((DataGenerator.GetNumber(10000, 90000) / 100), 2);\n                var orderCount = (int)DataGenerator.GetNumber(4, 30);\n                var orderValue = Math.Round((price * orderCount), 2);\n                var orderShipped = (int)DataGenerator.GetNumber(30, 100);\n                var margin = DataGenerator.GetNumber(5, 10);\n                var profit = Math.Round(orderValue * (margin / 100));\n                var country = DataGenerator.GetItem(countries);\n\n                products.Add(new Product()\n                {\n                    CountryFlag = DataGenerator.GetCountryFlag(country),\n                    CountryName = country,\n                    Margin = margin,\n                    OrderCount = orderCount,\n                    OrderHistory = GetOrderHistory(26),\n                    OrderShipped = orderShipped,\n                    OrderValue = orderValue,\n                    OrderDate = DataGenerator.GetDate(),\n                    ProductID = id,\n                    ProductName = DataGenerator.GetItem(names),\n                    ProductPrice = price,\n                    Profit = profit,\n                    //ReturnRate = GetReturnRates(26),\n                    Status = DataGenerator.GetItem(status)\n                });\n            }\n\n            return products;\n        }\n\n        public static List<OrderHistoryItem> GetOrderHistory(int weekCount)\n        {\n            var items = new List<OrderHistoryItem>();\n            for (int i = 0; i < weekCount; i++)\n            {\n                double value = DataGenerator.GetNumber(0, 100);\n                items.Add(new OrderHistoryItem() { Sold = value, Week = i });\n            }\n\n            return items;\n        }\n\n        public static List<ReturnRateItem> GetReturnRates(int weekCount)\n        {\n            var items = new List<ReturnRateItem>();\n            for (int i = 0; i < weekCount; i++)\n            {\n                double value = DataGenerator.GetNumber(-100, 100);\n                items.Add(new ReturnRateItem() { Balance = value, Week = i });\n            }\n\n            return items;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/grid/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}