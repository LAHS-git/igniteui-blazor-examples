{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/markers/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <IgbPropertyEditorPanel\n\n        DescriptionType=\"Sparkline\"\n        IsHorizontal=\"true\"\n        IsWrappingEnabled=\"true\"\n        Name=\"propertyEditorPanel1\"\n        @ref=\"propertyEditorPanel1\">\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"FirstMarkerVisibility\"\n            Name=\"FirstMarkerVisibilityEditor\"\n            @ref=\"firstMarkerVisibilityEditor\"\n            Label=\"First Markers\"\n            ShouldOverrideDefaultEditor=\"true\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"HighMarkerVisibility\"\n            Name=\"HighMarkerVisibilityEditor\"\n            @ref=\"highMarkerVisibilityEditor\"\n            Label=\"High Markers\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"LowMarkerVisibility\"\n            Name=\"LowMarkerVisibilityEditor\"\n            @ref=\"lowMarkerVisibilityEditor\"\n            Label=\"Low Markers\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"NegativeMarkerVisibility\"\n            Name=\"NegativeMarkerVisibilityEditor\"\n            @ref=\"negativeMarkerVisibilityEditor\"\n            Label=\"Negative Markers\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"LastMarkerVisibility\"\n            Name=\"LastMarkerVisibilityEditor\"\n            @ref=\"lastMarkerVisibilityEditor\"\n            Label=\"Last Markers\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"MarkerVisibility\"\n            Name=\"MarkerVisibilityEditor\"\n            @ref=\"markerVisibilityEditor\"\n            Label=\"All Markers\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            DropDownValues=\"@(new string[] { \"Visible\", \"Collapsed\" })\"\n            PrimitiveValue=\"@(\"Visible\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n        </IgbPropertyEditorPanel>\n\n    </div>\n\n    <div class=\"container vertical fill\">\n        <IgbSparkline\n        Name=\"chart\"\n        @ref=\"chart\"\n        DataSource=\"SparklineProfitData\"\n        DisplayType=\"SparklineDisplayType.Line\"\n        LabelMemberPath=\"Label\"\n        ValueMemberPath=\"Value\"\n        MarkerVisibility=\"Visibility.Visible\"\n        HighMarkerVisibility=\"Visibility.Visible\"\n        LowMarkerVisibility=\"Visibility.Visible\"\n        FirstMarkerVisibility=\"Visibility.Visible\"\n        LastMarkerVisibility=\"Visibility.Visible\"\n        NegativeMarkerVisibility=\"Visibility.Visible\"\n        MarkerSize=\"10\"\n        FirstMarkerSize=\"10\"\n        LastMarkerSize=\"10\"\n        LowMarkerSize=\"10\"\n        HighMarkerSize=\"10\"\n        NegativeMarkerSize=\"10\"\n        Minimum=\"0\"\n        Maximum=\"60\">\n        </IgbSparkline>\n\n    </div>\n</div>\n\n@code {\n    \n\n    private Action BindElements { get; set; }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var propertyEditorPanel1 = this.propertyEditorPanel1;\n        var firstMarkerVisibilityEditor = this.firstMarkerVisibilityEditor;\n        var highMarkerVisibilityEditor = this.highMarkerVisibilityEditor;\n        var lowMarkerVisibilityEditor = this.lowMarkerVisibilityEditor;\n        var negativeMarkerVisibilityEditor = this.negativeMarkerVisibilityEditor;\n        var lastMarkerVisibilityEditor = this.lastMarkerVisibilityEditor;\n        var markerVisibilityEditor = this.markerVisibilityEditor;\n        var chart = this.chart;\n\n        this.BindElements = () => {\n            propertyEditorPanel1.Target = this.chart;\n        };\n        this.BindElements();\n\n    }\n\n    private IgbPropertyEditorPanel propertyEditorPanel1;\n    private IgbPropertyEditorPropertyDescription firstMarkerVisibilityEditor;\n    private IgbPropertyEditorPropertyDescription highMarkerVisibilityEditor;\n    private IgbPropertyEditorPropertyDescription lowMarkerVisibilityEditor;\n    private IgbPropertyEditorPropertyDescription negativeMarkerVisibilityEditor;\n    private IgbPropertyEditorPropertyDescription lastMarkerVisibilityEditor;\n    private IgbPropertyEditorPropertyDescription markerVisibilityEditor;\n    private IgbSparkline chart;\n\n    private SparklineProfitData _sparklineProfitData = null;\n    public SparklineProfitData SparklineProfitData\n    {\n        get\n        {\n            if (_sparklineProfitData == null)\n            {\n                _sparklineProfitData = new SparklineProfitData();\n            }\n            return _sparklineProfitData;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/markers/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbSparklineModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/markers/SparklineProfitData.cs",
    "content": "using System;\nusing System.Collections.Generic;\npublic class SparklineProfitDataItem\n{\n    public double Value { get; set; }\n    public string Label { get; set; }\n}\n\npublic class SparklineProfitData\n    : List<SparklineProfitDataItem>\n{\n    public SparklineProfitData()\n    {\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 30,\n            Label = @\"A\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 40,\n            Label = @\"B\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 50,\n            Label = @\"C\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 40,\n            Label = @\"D\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 30,\n            Label = @\"E\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 20,\n            Label = @\"F\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 30,\n            Label = @\"G\"\n        });\n        this.Add(new SparklineProfitDataItem()\n        {\n            Value = 40,\n            Label = @\"H\"\n        });\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/sparkline/markers/wwwroot/index.css",
    "content": "/*\r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}