{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/pie-chart/explosion/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <span class=\"legend-title\">Global Electricity Demand by Energy Use</span>\n        <div class=\"legend\">\n            <IgbItemLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n        </div>\n        <div class=\"overlay-right\">\n            <div class=\"options horizontal\">\n                <label class=\"options-label\">\n                    <input type=\"checkbox\" @onchange=\"onExplosionModeChanged\"\n                           checked=\"@ExplodeMultipleSlices\"/>Allow Multi-Slice Explosion\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (Data != null)\n        {\n            <IgbPieChart Height=\"100%\" Width=\"100%\"\n                      DataSource=\"Data\"\n                      Legend=\"Legend\"\n                      LabelMemberPath=\"Summary\"\n                      LegendLabelMemberPath=\"Category\"\n                      ValueMemberPath=\"MarketShare\"\n                      Outlines=\"white\"\n                      RadiusFactor=\"0.7\"\n                      StartAngle=\"0\"\n                      SliceClick=\"OnSliceClick\"\n                      LabelsPosition=\"LabelsPosition.OutsideEnd\"\n                      LabelExtent=\"10\"\n                      AllowSliceSelection=\"false\"\n                      AllowSliceExplosion=\"true\"\n                      ExplodedSlices=\"ExplodedSlices\"\n                      ExplodedRadius=\"0.1\">\n            </IgbPieChart>\n        }\n\n    </div>\n</div>\n\n@code {\n\n    private List<DataItem> Data;\n\n    private IgbItemLegend _legend;\n    public IgbItemLegend Legend\n    {\n        get { return _legend; }\n        set { _legend = value; StateHasChanged(); }\n    }\n\n    public int[] ExplodedSlices { get; set; } = new int[1];\n    public bool ExplodeMultipleSlices = true;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = new List<DataItem>();\n        this.Data.Add(new DataItem { MarketShare = 37, Category = \"Cooling\", });\n        this.Data.Add(new DataItem { MarketShare = 25, Category = \"Residential\", });\n        this.Data.Add(new DataItem { MarketShare = 12, Category = \"Heating\", });\n        this.Data.Add(new DataItem { MarketShare = 11, Category = \"Lighting\", });\n        this.Data.Add(new DataItem { MarketShare = 15, Category = \"Other\", });\n    }\n\n    public class DataItem\n    {\n        public string Category { get; set; }\n        public double MarketShare { get; set; }\n        public string Summary { get { return Category + \" \" + MarketShare + \"%\"; } }\n    }\n\n    private void onExplosionModeChanged(ChangeEventArgs args)\n    {\n        this.ExplodeMultipleSlices = (bool)args.Value;\n    }\n\n    protected void OnSliceClick(IgbSliceClickEventArgs e)\n    {\n        var slice = e.Index;\n\n        if (ExplodedSlices.Contains(slice))\n        {\n            if (ExplodeMultipleSlices)\n            {\n                var list = ExplodedSlices.ToList(); list.Remove(slice);\n                ExplodedSlices = list.ToArray();\n            }\n            else\n            {\n                ExplodedSlices = new int[] { e.Index }; // for single selection\n            }\n        }\n        else\n        {\n            if (ExplodeMultipleSlices)\n            {\n                var list = ExplodedSlices.ToList(); list.Add(slice);\n                ExplodedSlices = list.ToArray();\n            }\n            else\n            {\n                ExplodedSlices = new int[] { e.Index }; // for single selection\n            }\n\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/pie-chart/explosion/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbItemLegendModule),\n                typeof(IgbPieChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/pie-chart/explosion/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}