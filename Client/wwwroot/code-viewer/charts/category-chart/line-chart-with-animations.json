{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-animations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-label\">Transition Type </span>\n        <select @bind=\"@SelectedTransition\">\n            <option>@CategoryTransitionInMode.AccordionFromBottom</option>\n            <option>@CategoryTransitionInMode.AccordionFromCategoryAxisMaximum</option>\n            <option>@CategoryTransitionInMode.AccordionFromCategoryAxisMinimum</option>\n            <option>@CategoryTransitionInMode.AccordionFromLeft</option>\n            <option>@CategoryTransitionInMode.AccordionFromRight</option>\n            <option>@CategoryTransitionInMode.AccordionFromTop</option>\n            <option>@CategoryTransitionInMode.AccordionFromValueAxisMaximum</option>\n            <option>@CategoryTransitionInMode.AccordionFromValueAxisMinimum</option>\n            <option>@CategoryTransitionInMode.Expand</option>\n            <option>@CategoryTransitionInMode.FromZero</option>\n            <option>@CategoryTransitionInMode.SweepFromBottom</option>\n            <option>@CategoryTransitionInMode.SweepFromCategoryAxisMaximum</option>\n            <option>@CategoryTransitionInMode.SweepFromCategoryAxisMinimum</option>\n            <option>@CategoryTransitionInMode.SweepFromCenter</option>\n            <option>@CategoryTransitionInMode.SweepFromLeft</option>\n            <option>@CategoryTransitionInMode.SweepFromRight</option>\n            <option>@CategoryTransitionInMode.SweepFromTop</option>\n            <option>@CategoryTransitionInMode.SweepFromValueAxisMaximum</option>\n            <option>@CategoryTransitionInMode.SweepFromValueAxisMinimum</option>\n            <option>@CategoryTransitionInMode.Auto</option>\n        </select>\n        <label class=\"options-value\" style=\"width: 75px\">@IntervalLabel</label>\n        <input class=\"options-slider\" type=\"range\" min=\"50\" max=\"2000\" step=\"50\"\n               value=@TransitionInInterval @onchange=\"OnTransitionIntervalChange\" />\n        <button @onclick=\"OnReloadChart\">Reload Chart</button>\n    </div>\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbCategoryChart Height=\"100%\" Width=\"100%\"\n                @ref=\"Chart\"\n                DataSource=\"Data\"\n                ChartType=\"CategoryChartType.Line\"\n                IsTransitionInEnabled=\"true\"\n                TransitionInMode=\"@SelectedTransition\"\n                TransitionInDuration=\"@TransitionInInterval\"\n                IsHorizontalZoomEnabled=\"false\"\n                IsVerticalZoomEnabled=\"false\"\n                YAxisTitle=\"TWh\"\n                YAxisTitleLeftMargin=\"10\"\n                YAxisTitleRightMargin=\"5\"\n                YAxisLabelLeftMargin=\"0\"\n                ComputedPlotAreaMarginMode=ComputedPlotAreaMarginMode.Series>\n            </IgbCategoryChart>\n        }\n    </div>\n</div>\n\n@code {\n    \n\n    private int _transitionInterval = 1000; // milliseconds\n    private int TransitionInInterval\n    {\n        get { return _transitionInterval; }\n        set\n        {\n            _transitionInterval = value;\n            StateHasChanged();\n        }\n    }\n    private string IntervalLabel\n    {\n        get\n        {\n            return (_transitionInterval).ToString(\"0\") + \"ms\";\n        }\n    }\n    private CategoryTransitionInMode _selectedTransition;\n    private CategoryTransitionInMode SelectedTransition\n    {\n        get { return _selectedTransition; }\n        set\n        {\n            _selectedTransition = value;\n            StateHasChanged();\n        }\n    }\n    private IgbCategoryChart _Chart;\n    private IgbCategoryChart Chart\n    {\n        get { return _Chart; }\n        set { _Chart = value;\n            StateHasChanged();\n        }\n    }\n\n    private List<EnergyRenewableInfo> Data = new EnergyRenewableData();\n\n    private void OnTransitionIntervalChange(ChangeEventArgs args)\n    {\n        this.TransitionInInterval = int.Parse(args.Value.ToString());\n    }\n\n    private void OnReloadChart()\n    {\n        this.Chart.ReplayTransitionIn();\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-animations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbLegendModule),\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbCategoryChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-animations/Services/EnergyRenewableData.cs",
    "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class EnergyRenewableInfo\n    {\n        public string Year { get; set; }\n        public int Europe { get; set; }\n        public int China { get; set; }\n        public int USA { get; set; }\n    }\n\n    public class EnergyRenewableData : List<EnergyRenewableInfo>\n    {\n        public EnergyRenewableData()\n        {\n            Add(new EnergyRenewableInfo() { Year = \"2009\", Europe = 31, China = 21, USA = 19 });\n            Add(new EnergyRenewableInfo() { Year = \"2010\", Europe = 43, China = 26, USA = 24 });\n            Add(new EnergyRenewableInfo() { Year = \"2011\", Europe = 66, China = 29, USA = 28 });\n            Add(new EnergyRenewableInfo() { Year = \"2012\", Europe = 69, China = 32, USA = 26 });\n            Add(new EnergyRenewableInfo() { Year = \"2013\", Europe = 58, China = 47, USA = 38 });\n            Add(new EnergyRenewableInfo() { Year = \"2014\", Europe = 40, China = 46, USA = 31 });\n            Add(new EnergyRenewableInfo() { Year = \"2015\", Europe = 78, China = 50, USA = 19 });\n            Add(new EnergyRenewableInfo() { Year = \"2016\", Europe = 13, China = 90, USA = 52 });\n            Add(new EnergyRenewableInfo() { Year = \"2017\", Europe = 78, China = 132, USA = 50 });\n            Add(new EnergyRenewableInfo() { Year = \"2018\", Europe = 40, China = 134, USA = 34 });\n            Add(new EnergyRenewableInfo() { Year = \"2019\", Europe = 80, China = 96, USA = 38 });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-animations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}