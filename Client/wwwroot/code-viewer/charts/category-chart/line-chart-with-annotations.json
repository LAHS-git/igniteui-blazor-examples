{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-annotations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n            <label class=\"options-label\">Annotations: </label>\n            <label class=\"options-item\">\n                <input type=\"checkbox\" @onchange=\"OnCrosshairsVisibleCheckboxChange\" checked=\"@CrosshairsVisible\" /> Crosshair\n            </label>\n            <label class=\"options-item\">\n                <input type=\"checkbox\" @onchange=\"OnCalloutsVisibleCheckboxChange\" checked=\"@CalloutsVisible\" /> Callouts\n            </label>\n            <label class=\"options-item\">\n                <input type=\"checkbox\" @onchange=\"OnFinalValuesCheckboxChange\" checked=\"@FinalValuesVisible\" /> Final Values\n            </label>\n            <label class=\"options-item\">\n                <input type=\"checkbox\" @onchange=\"OnMarkersVisibleCheckBoxChange\" checked=\"@MarkersVisible\" /> Markers\n            </label>\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbCategoryChart Height=\"100%\" Width=\"100%\"\n                           @ref=\"Chart\"\n                           DataSource=\"Data\"\n                           ChartType=\"CategoryChartType.Line\"\n                           Subtitle=\"Renewable Electricity Generated\"\n                           YAxisTitle=\"TWh\"\n                           Thickness=\"2\"\n                           CrosshairsSnapToData=\"true\"\n                           CrosshairsDisplayMode=\"@CrosshairMode\"\n                           CrosshairsAnnotationEnabled=\"@CrosshairsVisible\"\n                           FinalValueAnnotationsVisible=\"@FinalValuesVisible\"\n                           YAxisLabelLocation=\"YAxisLabelLocation.OutsideRight\"\n                           CalloutsVisible=\"@CalloutsVisible\"\n                           CalloutsYMemberPath=\"Value\"\n                           CalloutsXMemberPath=\"Index\"\n                           CalloutsLabelMemberPath=\"Label\"\n                           CalloutsDataSource=\"CalloutData\"\n                           ExcludedProperties=\"@(new string[] { \"China\", \"Europe\" })\"\n                           ComputedPlotAreaMarginMode=ComputedPlotAreaMarginMode.Series>\n            </IgbCategoryChart>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<EnergyRenewableInfo> Data = new EnergyRenewableData();\n    private List<CalloutInfo> CalloutData = new List<CalloutInfo>();\n\n    private IgbCategoryChart _Chart;\n    private IgbCategoryChart Chart\n    {\n        get { return _Chart; }\n        set { _Chart = value;\n            Chart.MarkerTypes.Add(MarkerType.Circle);\n            StateHasChanged(); }\n    }\n    private bool MarkersVisible = true;\n    private bool FinalValuesVisible = true;\n    private bool CalloutsVisible = true;\n    private bool CrosshairsVisible = true;\n\n    private CrosshairsDisplayMode CrosshairMode = CrosshairsDisplayMode.Both;\n\n    private void OnMarkersVisibleCheckBoxChange(ChangeEventArgs args)\n    {\n        Chart.MarkerTypes.Clear();\n        bool value = args.Value != null ? (bool)args.Value : false;\n        if (value == true)\n        {\n            Chart.MarkerTypes.Add(MarkerType.Automatic);\n        }\n        else {\n            Chart.MarkerTypes.Add(MarkerType.None);\n        }\n        this.MarkersVisible = value;\n    }\n    private void OnFinalValuesCheckboxChange(ChangeEventArgs args)\n    {\n        this.FinalValuesVisible = (bool)args.Value;\n    }\n    private void OnCalloutsVisibleCheckboxChange(ChangeEventArgs args)\n    {\n        this.CalloutsVisible = (bool)args.Value;\n    }\n    private void OnCrosshairsVisibleCheckboxChange(ChangeEventArgs args)\n    {\n        bool isVisible = (bool)args.Value;\n        this.CrosshairMode = isVisible ? CrosshairsDisplayMode.Both : CrosshairsDisplayMode.None;\n    }\n    protected override void OnInitialized()\n    {\n\n        for (int i = 0; i < this.Data.Count; i++)\n        {\n            CalloutData.Add(\n                new CalloutInfo {\n                    Index = i, Label =\n                    this.Data[i].USA + \" \" + \"TWh\",\n                    Value = this.Data[i].USA });\n        }\n    }\n\n    public class CalloutInfo\n    {\n        public int Index { get; set; }\n        public int Value { get; set; }\n        public string Label { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-annotations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbLegendModule),\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbCategoryChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-annotations/Services/EnergyRenewableData.cs",
    "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class EnergyRenewableInfo\n    {\n        public string Year { get; set; }\n        public int Europe { get; set; }\n        public int China { get; set; }\n        public int USA { get; set; }\n    }\n\n    public class EnergyRenewableData : List<EnergyRenewableInfo>\n    {\n        public EnergyRenewableData()\n        {\n            Add(new EnergyRenewableInfo() { Year = \"2009\", Europe = 31, China = 21, USA = 19 });\n            Add(new EnergyRenewableInfo() { Year = \"2010\", Europe = 43, China = 26, USA = 24 });\n            Add(new EnergyRenewableInfo() { Year = \"2011\", Europe = 66, China = 29, USA = 28 });\n            Add(new EnergyRenewableInfo() { Year = \"2012\", Europe = 69, China = 32, USA = 26 });\n            Add(new EnergyRenewableInfo() { Year = \"2013\", Europe = 58, China = 47, USA = 38 });\n            Add(new EnergyRenewableInfo() { Year = \"2014\", Europe = 40, China = 46, USA = 31 });\n            Add(new EnergyRenewableInfo() { Year = \"2015\", Europe = 78, China = 50, USA = 19 });\n            Add(new EnergyRenewableInfo() { Year = \"2016\", Europe = 13, China = 90, USA = 52 });\n            Add(new EnergyRenewableInfo() { Year = \"2017\", Europe = 78, China = 132, USA = 50 });\n            Add(new EnergyRenewableInfo() { Year = \"2018\", Europe = 40, China = 134, USA = 34 });\n            Add(new EnergyRenewableInfo() { Year = \"2019\", Europe = 80, China = 96, USA = 38 });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/line-chart-with-annotations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}