{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/annotations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <label class=\"options-label\">Annotations: </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" @onchange=\"OnCrosshairsVisibleCheckboxChange\" checked=\"@CrosshairsVisible\" /> Crosshair\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" @onchange=\"OnCalloutsVisibleCheckboxChange\" checked=\"@CalloutsVisible\"/> Callouts\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" @onchange=\"OnFinalValuesCheckboxChange\" checked=\"@FinalValuesVisible\"/> Final Values\n        </label>\n        @* TODO changing markers is not currently possible at this time\n        <label class=\"options-item\">\n            <input type=\"checkbox\" onChange={this.onMarkersVisible} /> Markers\n        </label>*@\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbCategoryChart Height=\"100%\" Width=\"100%\"\n                           DataSource=\"Data\"\n                           ChartType=\"CategoryChartType.Line\"\n                           ExcludedProperties=\"@(new string[] { \"Date\" })\"\n                           IncludedProperties=\"@(new string[] {\"Month\", \"Temperature\"})\"\n                           XAxisInterval=\"1\"\n                           YAxisMinimumValue=\"50\"\n                           YAxisMaximumValue=\"120\"\n                           YAxisLabelLocation=\"YAxisLabelLocation.OutsideRight\"\n                           IsTransitionInEnabled=\"true\"\n                           Thickness=\"2\"\n                           CalloutsVisible=\"@CalloutsVisible\"\n                           CalloutsXMemberPath=\"Index\"\n                           CalloutsYMemberPath=\"Value\"\n                           CalloutsLabelMemberPath=\"Info\"\n                           CrosshairsSnapToData=\"true\"\n                           CrosshairsDisplayMode=\"@CrosshairMode\"\n                           CrosshairsAnnotationEnabled=\"@CrosshairsVisible\"\n                           FinalValueAnnotationsVisible=\"@FinalValuesVisible\">\n            </IgbCategoryChart>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<TemperatureData> Data;\n    private string[] IncludedProps = new string[] { \"Month\", \"Temperature\" };\n\n    // private bool MarkersVisible = true;\n    private bool FinalValuesVisible = true;\n    private bool CalloutsVisible = true;\n    private bool CrosshairsVisible = true;\n\n    private CrosshairsDisplayMode CrosshairMode = CrosshairsDisplayMode.Both;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = new List<TemperatureData>();\n        InitData();\n    }\n\n    private void OnFinalValuesCheckboxChange(ChangeEventArgs args)\n    {\n        bool value = args.Value != null ? (bool)args.Value : false;\n        this.FinalValuesVisible = value;\n    }\n\n    private void OnCalloutsVisibleCheckboxChange(ChangeEventArgs args)\n    {\n        bool value = args.Value != null ? (bool)args.Value : false;\n        this.CalloutsVisible = value;\n    }\n\n    private void OnCrosshairsVisibleCheckboxChange(ChangeEventArgs args)\n    {\n        bool value = args.Value != null ? (bool)args.Value : false;\n        if (value)\n        {\n            this.CrosshairMode = CrosshairsDisplayMode.Both;\n        }\n        else\n        {\n            this.CrosshairMode = CrosshairsDisplayMode.None;\n        }\n    }\n\n    private void InitData()\n    {\n        int year = DateTime.Now.Year;\n        string[] months = new string[] {\n            \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\n            \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"\n        };\n        double[] tempValues = { 74, 74, 76, 78, 83, 87, 94, 97, 93, 86, 81, 79 };\n\n        // generating data item\n        for (int i = 0; i < 12; i++)\n        {\n            this.Data.Add(new TemperatureData()\n            {\n                Temperature = tempValues[i],\n                Date = new DateTime(year, (i + 1), 1),\n                Month = months[i],\n            });\n        }\n\n        double minVal = double.MinValue;\n        double maxVal = double.MaxValue;\n\n        int minIndex = 0;\n        int maxIndex = 0;\n        int idx = 0;\n\n        // annotating data items\n        foreach (TemperatureData item in this.Data) {\n\n            if (minVal > item.Temperature)\n            {\n                minVal = item.Temperature;\n                minIndex = idx;\n            }\n            if (maxVal < item.Temperature)\n            {\n                maxVal = item.Temperature;\n                maxIndex = idx;\n            }\n\n            item.Index = idx;\n            item.Value = item.Temperature;\n\n            int month = item.Date.Month;\n            if (month >= 11 || month < 3)\n            {\n                item.Info = \"WINTER\";\n            }\n            else if (month >= 3 && month < 5)\n            {\n                item.Info = \"SPRING\";\n            }\n            else if (month >= 5 && month < 8)\n            {\n                item.Info = \"SUMMER\";\n            }\n            else if (month >= 8 && month < 11)\n            {\n                item.Info = \"FALL\";\n            }\n            idx++;\n        }\n\n        this.Data[minIndex].Info = \"MIN\";\n        this.Data[maxIndex].Info = \"MAX\";\n    }\n\n    public class TemperatureData\n    {\n        public double Temperature { get; set; }\n        public DateTime Date { get; set; }\n        public string Month { get; set; }\n        public string Info { get; set; }\n        public double Value { get; set; }\n        public double Index { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/annotations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbCategoryChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/annotations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}