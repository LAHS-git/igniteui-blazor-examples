{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/high-frequency/App.razor",
    "content": "\n@using System.Collections.ObjectModel\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\" style=\"padding-bottom: 1rem\">\n         <button @onclick=\"OnDataFeedClick\" style=\"width: 5rem\">@DataFeedAction</button>\n         <label class=\"options-label\">Refresh: </label>\n         <label class=\"options-value\">@DataFeedInterval ms</label>\n         <input class=\"options-slider\" type=\"range\" min=\"5\" max=\"250\" step=\"5\"\n                value=@DataFeedInterval @onchange=\"OnRefreshFrequencyChanged\" />\n\n         <button @onclick=\"OnDataGenerateClick\">Generate</button>\n         <label class=\"options-label\">Points: </label>\n         <label class=\"options-value\">@DataPoints</label>\n         <input class=\"options-slider\" type=\"range\" min=\"100\" max=\"2000\" step=\"100\"\n                value=@DataPoints @onchange=\"OnDataPointsChanged\" />\n    </div>\n\n    <div class=\"container vertical\">\n         <IgbCategoryChart Height=\"100%\" Width=\"100%\" @ref=\"Chart\"\n                        ChartType=\"CategoryChartType.Line\"\n                        DataSource=\"@Data\"\n                        YAxisExtent=\"40\"\n                        SeriesAdded=\"OnSeriesAdded\">\n         </IgbCategoryChart>\n    </div>\n</div>\n\n@code {\n\n    //private List<CategoryDataItem> Data;\n    private ObservableCollection<CategoryDataItem> Data;\n\n    private IgbCategoryChart _Chart;\n    private IgbCategoryChart Chart\n    {\n        get { return _Chart; }\n        set { _Chart = value; StateHasChanged(); }\n    }\n\n    private int DataIndex = 0;\n    private double DataPoints = 500;\n    private double DataFeedInterval = 5;\n    private string DataFeedAction = \"Start\";\n    private bool DataFeedUpdating = false;\n    private bool RefreshChanged = false;\n\n    private void OnDataUpdate()\n    {\n        if (!DataFeedUpdating) return;\n        if (RefreshChanged) return;\n\n        this.DataIndex++;\n\n        var oldItem = this.Data[0];\n        var newItem = CategoryDataSource.GetNewItem(this.Data, this.DataIndex);\n\n        this.Data.RemoveAt(0);\n        this.Chart.NotifyRemoveItem(this.Data, 0, oldItem);\n        this.Data.Add(newItem);\n        this.Chart.NotifyInsertItem(this.Data, this.Data.Count - 1, newItem);\n\n        Task.Delay((int)this.DataFeedInterval).ContinueWith((t) => OnDataUpdate());\n    }\n\n    private void OnSeriesAdded(IgbChartSeriesEventArgs e)\n    {\n        ((IgbCategoryChart)e.Parent).MarkerTypes.Clear();\n        ((IgbCategoryChart)e.Parent).MarkerTypes.Add(MarkerType.None);\n    }\n\n    protected override void OnInitialized()\n    {\n\n        OnDataGenerateClick();\n    }\n\n    private void OnDataGenerateClick()\n    {\n        var dataList = CategoryDataSource.Generate(0, (int)this.DataPoints, false);\n\n        this.Data = new ObservableCollection<CategoryDataItem>(dataList);\n\n        SetupInterval();\n    }\n\n    private void OnDataFeedClick()\n    {\n        DataFeedUpdating = !DataFeedUpdating;\n        DataFeedAction = DataFeedUpdating ? \"Stop\" : \"Start\";\n\n        SetupInterval();\n    }\n\n    private void OnDataPointsChanged(ChangeEventArgs args)\n    {\n        double num = double.Parse(args.Value.ToString());\n\n        if (num < 100) num = 100;\n        if (num > 10000) num = 10000;\n\n        this.DataPoints = num;\n    }\n\n    private void OnRefreshFrequencyChanged(ChangeEventArgs args)\n    {\n        RefreshChanged = true;\n        double num = double.Parse(args.Value.ToString());\n\n        if (num < 5) num = 5;\n        if (num > 1000) num = 1000;\n\n        this.DataFeedInterval = num;\n\n        RefreshChanged = false;\n        SetupInterval();\n    }\n\n    private void SetupInterval()\n    {\n        Task.Delay((int)this.DataFeedInterval).ContinueWith((t) => OnDataUpdate());\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/high-frequency/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbLegendModule),\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbCategoryChartModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/high-frequency/Services/CategoryDataSource.cs",
    "content": "using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class CategoryDataItem\n    {\n        public string Label { get; set; }\n        public double Value { get; set; }\n    }\n\n    public static class CategoryDataSource\n    {\n        public static List<CategoryDataItem> Generate(double startValue, int maxPoints, bool useShortLabels)\n        {\n            var data = new List<CategoryDataItem>();\n            data.Add(new CategoryDataItem { Label = \"0\", Value = startValue });\n            for (var i = 1; i <= maxPoints; i++)\n            {\n                var item = GetNewItem(data, i);\n                data.Add(item);\n            }\n            return data;\n        }\n\n        public static CategoryDataItem GetLastItem(IList<CategoryDataItem> array)\n        {\n            if (array.Count == 0)\n            {\n                return null;\n            }\n            return array[array.Count - 1];\n        }\n\n        public static CategoryDataItem GetNewItem(IList<CategoryDataItem> array, int index)\n        {\n            var random = new Random();\n            var lastItem = GetLastItem(array);\n            var newValue = lastItem.Value + random.NextDouble() * 4.0 - 2.0;\n            //newValue = Math.Max(newValue, -19);\n            //newValue = Math.Min(newValue,  19);\n            return new CategoryDataItem { Label = index.ToString(), Value = newValue };\n        }\n\n        public static string ToShortString(double largeValue)\n        {\n            double roundValue;\n\n            if (largeValue >= 1000000)\n            {\n                roundValue = Math.Round(largeValue / 100000) / 10;\n                return roundValue + \"m\";\n            }\n            if (largeValue >= 1000)\n            {\n                roundValue = Math.Round(largeValue / 100) / 10;\n                return roundValue + \"k\";\n            }\n\n            roundValue = Math.Round(largeValue);\n            return roundValue + \"\";\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/category-chart/high-frequency/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}