{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-item\">Annotations: </span>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnFinalValueCheckboxChange\"/>Final Value\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnCrosshairsCheckboxChange\"/>Crosshairs\n        </label>\n        @*<label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnValueOverlayCheckboxChange\"/>Value Overlay\n        </label>*@\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\" IsVerticalZoomEnabled=\"true\" IsHorizontalZoomEnabled=\"true\" @ref=\"Chart\">\n                <IgbCategoryXAxis Name=\"xAxis\" DataSource=\"Data\" Label=\"Label\" Interval=\"1\"/>\n                <IgbNumericYAxis Name=\"yAxis\" Interval=\"20\" MinimumValue=\"70\" MaximumValue=\"110\"\n                              LabelLocation=\"AxisLabelsLocation.OutsideRight\" />\n\n                <IgbColumnSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ValueMemberPath=\"Temperature\"/>\n\n                <IgbCrosshairLayer IsAxisAnnotationEnabled=\"true\" YAxisAnnotationInterpolatedValuePrecision=\"0\" @ref=\"CrosshairRef\"/>\n                <IgbFinalValueLayer @ref=\"FinalValueRef\"/>\n                <IgbValueOverlay AxisName=\"yAxis\" Thickness=\"3\" Brush=\"Orange\" IsAxisAnnotationEnabled=\"true\" Value=\"85\" @ref=\"ValueOverlayRef\"/>\n\n            </IgbDataChart>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<TemperatureItem> Data;\n    private IgbDataChart Chart;\n    private IgbCrosshairLayer CrosshairRef;\n    private IgbFinalValueLayer FinalValueRef;\n    private IgbValueOverlay ValueOverlayRef;\n\n    protected override void OnInitialized()\n    {\n\n        this.InitData();\n    }\n\n    private void InitData()\n    {\n        int year = new DateTime().Year;\n\n        this.Data = new List<TemperatureItem>() {\n            new TemperatureItem(){Label = \"JAN\", Temperature= 74, Date= new DateTime(year, 1, 1) },\n            new TemperatureItem(){Label = \"FEB\", Temperature= 74, Date= new DateTime(year, 2, 1) },\n            new TemperatureItem(){Label = \"MAR\", Temperature= 76, Date= new DateTime(year, 3, 1) },\n            new TemperatureItem(){Label = \"APR\", Temperature= 78, Date= new DateTime(year, 4, 1) },\n            new TemperatureItem(){Label = \"MAY\", Temperature= 83, Date= new DateTime(year, 5, 1) },\n            new TemperatureItem(){Label = \"JUN\", Temperature= 87, Date= new DateTime(year, 6, 1) },\n            new TemperatureItem(){Label = \"JUL\", Temperature= 94, Date= new DateTime(year, 7, 1) },\n            new TemperatureItem(){Label = \"AUG\", Temperature= 97, Date= new DateTime(year, 8, 1) },\n            new TemperatureItem(){Label = \"SEP\", Temperature= 93, Date= new DateTime(year, 9, 1) },\n            new TemperatureItem(){Label = \"OCT\", Temperature= 86, Date= new DateTime(year, 10, 1) },\n            new TemperatureItem(){Label = \"NOV\", Temperature= 81, Date= new DateTime(year, 11, 1) },\n            new TemperatureItem(){Label = \"DEC\", Temperature= 79, Date= new DateTime(year, 12, 1) }\n        };\n    }\n\n    private void OnFinalValueCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.FinalValueRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.FinalValueRef);\n        }\n    }\n\n    private void OnCrosshairsCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.CrosshairRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.CrosshairRef);\n        }\n\n    }\n\n    private void OnValueOverlayCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.ValueOverlayRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.ValueOverlayRef);\n        }\n    }\n\n    private class TemperatureItem\n    {\n        public double Temperature { get; set; }\n        public DateTime Date { get; set; }\n        public string Label { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbAnnotationLayerProxyModule),\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartAnnotationModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbColumnFragmentModule),\n                typeof(IgbColumnSeriesModule),\n                typeof(IgbValueOverlayModule),\n                typeof(IgbFinalValueLayerModule),\n                typeof(IgbCrosshairLayerModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}