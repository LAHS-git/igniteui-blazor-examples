{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-locations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"legend-title\">Legend: </span>\n        <div class=\"legend\">\n            <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\"/>\n        </div>\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\" ChartTitle=\"Company Financial Projections\" IsVerticalZoomEnabled=\"true\"\n                       IsHorizontalZoomEnabled=\"true\" Legend=\"Legend\">\n                <IgbCategoryXAxis Name=\"xAxisYears\" DataSource=\"Data\" Interval=\"12\" LabelLocation=\"AxisLabelsLocation.OutsideBottom\"\n                               Overlap=\"1\" Gap=\"0.4\" Label=\"Year\" LabelTextColor=\"Gray\" TickLength=\"0\" />\n                <IgbCategoryXAxis Name=\"xAxisMonths\" DataSource=\"Data\" Overlap=\"1\" Gap=\"0.4\" Interval=\"1\"\n                               LabelLocation=\"AxisLabelsLocation.OutsideBottom\" Label=\"Month\" LabelTextColor=\"Gray\" />\n                <IgbNumericYAxis Name=\"yAxisLeft\" Title=\"Expense | Revenue\" TitleTextColor=\"Gray\" MinimumValue=\"-900\"\n                              MaximumValue=\"900\" LabelTextColor=\"Gray\" Interval=\"300\" />\n                <IgbNumericYAxis Name=\"yAxisRight\" Title=\"Profit (%)\" TitleTextColor=\"Gray\" MinimumValue=\"0\" MaximumValue=\"100\"\n                              LabelLocation=\"AxisLabelsLocation.OutsideRight\" MajorStrokeThickness=\"0\" LabelTextColor=\"Gray\"\n                              LabelHorizontalAlignment=\"HorizontalAlignment.Left\" TitleVerticalAlignment=\"VerticalAlignment.Center\" />\n\n                <IgbColumnSeries Title=\"Revenue\" DataSource=\"Data\" ValueMemberPath=\"Revenue\" Brush=\"#9B58E2\" Outline=\"#9B58E2\"\n                              XAxisName=\"xAxisMonths\" YAxisName=\"yAxisLeft\" IsTransitionInEnabled=\"true\" ShowDefaultTooltip=\"true\" />\n                <IgbColumnSeries Title=\"Expense\" DataSource=\"Data\" ValueMemberPath=\"Expense\" Brush=\"#F23030\" Outline=\"#F23030\"\n                              XAxisName=\"xAxisMonths\" YAxisName=\"yAxisLeft\" IsTransitionInEnabled=\"true\" ShowDefaultTooltip=\"true\" />\n                <IgbColumnSeries Title=\"Profit\" DataSource=\"Data\" ValueMemberPath=\"Profit\" Brush=\"#48BA39\" Outline=\"#48BA39\"\n                              XAxisName=\"xAxisYears\" YAxisName=\"yAxisRight\" IsTransitionInEnabled=\"true\" ShowDefaultTooltip=\"true\" />\n            </IgbDataChart>\n        }\n\n    </div>\n</div>\n\n@code {\n\n    private List<FinancialItem> Data;\n\n    private IgbLegend legend;\n    private IgbLegend Legend\n    {\n        get { return legend; }\n        set\n        {\n            legend = value;\n            StateHasChanged();\n        }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.InitData();\n    }\n\n    Random r = new Random();\n    private void InitData()\n    {\n        var items = new List<FinancialItem>();\n\n        string[] months = new string[] { \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\" };\n\n        double revenue = 200;\n        double profit = 15;\n        double expense = 0;\n\n        int year = 2020;\n        int month = 0;\n\n        for (int i = 0; i < 25; i++)\n        {\n            revenue += r.NextDouble() * 50 - 20;\n            profit += r.NextDouble() * 4.0 - 2.0;\n            expense = revenue - (revenue * profit / 100);\n\n            items.Add(new FinancialItem()\n            {\n                Expense = Math.Round(-expense),\n                Month = months[month],\n                Profit = Math.Round(profit),\n                Revenue = Math.Round(revenue),\n                Year = year\n            });\n\n            month++;\n            if(month >= 12)\n            {\n                month = 0;\n                year++;\n            }\n        }\n\n        this.Data = items;\n    }\n\n    private class FinancialItem\n    {\n        public double Expense { get; set; }\n        public string Month { get; set; }\n        public double Profit { get; set; }\n        public double Revenue { get; set; }\n        public int Year { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-locations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbColumnSeriesModule),\n                typeof(IgbLegendModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-locations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}