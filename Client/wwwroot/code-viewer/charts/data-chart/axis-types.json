{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-item\">Axis Type:</span>\n        <select @onchange=\"OnAxisTypeChanged\">\n            <option>CategoryXAxis with Column Series</option>\n            <option>CategoryYAxis with Bar Series</option>\n            <option>NumericXAxis with Scatter Series</option>\n            <option>TimeXAxis with Financial Series</option>\n        </select>\n    </div>\n\n    <div class=\"container vertical\">\n        <IgbDataChart Height=\"100%\" Width=\"100%\"\n                   @ref=\"Chart\"\n                   IsHorizontalZoomEnabled=\"false\"\n                   IsVerticalZoomEnabled=\"false\" />\n    </div>\n</div>\n\n@code {\n    \n\n    private List<SampleCategoryItem> CategoryData;\n    private List<SampleFinancialItem> FinancialData;\n    private List<SampleScatterPoint> ScatterData;\n\n    private IgbNumericXAxis NumericXAxis;\n    private IgbNumericYAxis NumericYAxis;\n\n    private IgbCategoryXAxis CategoryXAxis;\n    private IgbCategoryYAxis CategoryYAxis;\n\n    private IgbTimeXAxis TimeXAxis;\n\n    private IgbColumnSeries ColumnSeries1;\n    private IgbColumnSeries ColumnSeries2;\n\n    private IgbBarSeries BarSeries1;\n    private IgbBarSeries BarSeries2;\n\n    private IgbScatterSeries ScatterSeries1;\n    private IgbScatterSeries ScatterSeries2;\n\n    private IgbFinancialPriceSeries FinancialSeries;\n\n    private IgbDataChart _chart;\n    private IgbDataChart Chart\n    {\n        get { return _chart; }\n        set\n        {\n            _chart = value;\n            this.OnChart();\n\n            value.Axes.Add(this.CategoryXAxis);\n            value.Axes.Add(this.NumericYAxis);\n\n            value.Series.Add(this.ColumnSeries1);\n            value.Series.Add(this.ColumnSeries2);\n\n            StateHasChanged();\n        }\n    }\n\n    private void OnChart()\n    {\n        this.InitData();\n        this.InitAxes();\n        this.InitCategorySeries();\n        this.InitScatterSeries();\n        this.InitFinancialSeries();\n    }\n\n    public void InitCategorySeries()\n    {\n        this.ColumnSeries1 = new IgbColumnSeries()\n        {\n            DataSource = this.CategoryData,\n            XAxis = this.CategoryXAxis,\n            YAxis = this.NumericYAxis,\n            XAxisName = \"CategoryXAxis\",\n            YAxisName = \"NumericYAxis\",\n            ValueMemberPath = \"USA\"\n        };\n\n        this.ColumnSeries2 = new IgbColumnSeries()\n        {\n            DataSource = this.CategoryData,\n            XAxis = this.CategoryXAxis,\n            YAxis = this.NumericYAxis,\n            XAxisName = \"CategoryXAxis\",\n            YAxisName = \"NumericYAxis\",\n            ValueMemberPath = \"RUS\"\n        };\n\n        this.BarSeries1 = new IgbBarSeries()\n        {\n            DataSource = this.CategoryData,\n            XAxis = this.NumericXAxis,\n            YAxis = this.CategoryYAxis,\n            XAxisName = \"NumericXAxis\",\n            YAxisName = \"CategoryYAxis\",\n            ValueMemberPath = \"USA\"\n        };\n\n        this.BarSeries2 = new IgbBarSeries()\n        {\n            DataSource = this.CategoryData,\n            XAxis = this.NumericXAxis,\n            YAxis = this.CategoryYAxis,\n            XAxisName = \"NumericXAxis\",\n            YAxisName = \"CategoryYAxis\",\n            ValueMemberPath = \"RUS\"\n        };\n    }\n\n    public void InitAxes()\n    {\n        this.CategoryXAxis = new IgbCategoryXAxis()\n        {\n            Name = \"CategoryXAxis\",\n            Title = \"Category X Axis\",\n            DataSource = this.CategoryData,\n            Label = \"Year\"\n        };\n\n        this.CategoryYAxis = new IgbCategoryYAxis()\n        {\n            Name = \"CategoryYAxis\",\n            Title = \"Category Y Axis\",\n            DataSource = this.CategoryData,\n            Label = \"Year\"\n        };\n\n        this.NumericXAxis = new IgbNumericXAxis() { Name = \"NumericXAxis\", Title = \"Numeric X Axis\" };\n        this.NumericYAxis = new IgbNumericYAxis() { Name = \"NumericYAxis\", Title = \"Numeric Y Axis\" };\n\n        this.TimeXAxis = new IgbTimeXAxis()\n        {\n            Name = \"TimeXAxis\",\n            Title = \"Time X Axis\",\n            DataSource = this.FinancialData,\n            DateTimeMemberPath = \"Time\",\n            Label = \"Date\"\n        };\n    }\n\n    public void InitFinancialSeries()\n    {\n        this.FinancialSeries = new IgbFinancialPriceSeries()\n        {  //MAY BE MISSING NAME IF THIS DOESN'T WORK...\n            DataSource = this.FinancialData,\n            XAxis = this.TimeXAxis,\n            YAxis = this.NumericYAxis,\n            XAxisName = \"TimeXAxis\",\n            YAxisName = \"NumericYAxis\",\n            HighMemberPath = \"High\",\n            LowMemberPath = \"Low\",\n            CloseMemberPath = \"Close\",\n            OpenMemberPath = \"Open\",\n            VolumeMemberPath = \"Volume\"\n        };\n    }\n\n    public void InitScatterSeries()\n    {\n        this.ScatterSeries1 = new IgbScatterSeries() {\n            DataSource = this.ScatterData,\n            XAxis = this.NumericXAxis,\n            YAxis = this.NumericYAxis,\n            XAxisName = \"NumericXAxis\",\n            YAxisName = \"NumericYAxis\",\n            XMemberPath = \"Index\",\n            YMemberPath = \"SinValue\"\n        };\n\n        this.ScatterSeries2 = new IgbScatterSeries() {\n            DataSource = this.ScatterData,\n            XAxis = this.NumericXAxis,\n            YAxis = this.NumericYAxis,\n            XAxisName = \"NumericXAxis\",\n            YAxisName = \"NumericYAxis\",\n            XMemberPath = \"Index\",\n            YMemberPath = \"CosValue\"\n        };\n    }\n\n    public void InitData()\n    {\n        this.CategoryData = SampleCategoryData.Create();\n        this.ScatterData = SampleScatterData.CreateWaveData();\n        this.FinancialData = SampleFinancialData.Create();\n    }\n\n    private void OnAxisTypeChanged(ChangeEventArgs e)\n    {\n        this.Chart.Axes.Clear();\n        this.Chart.Series.Clear();\n\n        string value = e.Value.ToString();\n\n        if (value.Contains(\"Column\"))\n        {\n            this.Chart.Axes.Add(this.CategoryXAxis);\n            this.Chart.Axes.Add(this.NumericYAxis);\n\n            this.Chart.Series.Add(this.ColumnSeries1);\n            this.Chart.Series.Add(this.ColumnSeries2);\n        }\n        else if (value.Contains(\"Bar\"))\n        {\n            this.Chart.Axes.Add(this.CategoryYAxis);\n            this.Chart.Axes.Add(this.NumericXAxis);\n\n            this.Chart.Series.Add(this.BarSeries1);\n            this.Chart.Series.Add(this.BarSeries2);\n        }\n        else if (value.Contains(\"Scatter\"))\n        {\n            this.Chart.Axes.Add(this.NumericXAxis);\n            this.Chart.Axes.Add(this.NumericYAxis);\n\n            this.Chart.Series.Add(this.ScatterSeries1);\n            this.Chart.Series.Add(this.ScatterSeries2);\n        }\n        else\n        {\n            this.Chart.Axes.Add(this.TimeXAxis);\n            this.Chart.Axes.Add(this.NumericYAxis);\n\n            this.Chart.Series.Add(this.FinancialSeries);\n        }\n\n        StateHasChanged();\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbColumnSeriesModule),\n                typeof(IgbDataChartScatterCoreModule),\n                typeof(IgbDataChartScatterModule),\n                typeof(IgbBarSeriesModule),\n                typeof(IgbFinancialPriceSeriesModule),\n                typeof(IgbCategoryYAxisModule),\n                typeof(IgbTimeXAxisModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/Services/SampleCategoryData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SampleCategoryData\n    {\n        public static List<SampleCategoryItem> Create() {\n            // total olympic medals for top countries\n            var data = new List<SampleCategoryItem>() {\n                new SampleCategoryItem {Year = \"1996\", USA= 148, CHN= 110, RUS= 95},\n                new SampleCategoryItem {Year = \"2000\", USA= 142, CHN= 115, RUS= 91},\n                new SampleCategoryItem {Year = \"2004\", USA= 134, CHN= 121, RUS= 86},\n                new SampleCategoryItem {Year = \"2008\", USA= 131, CHN= 129, RUS= 65},\n                new SampleCategoryItem {Year = \"2012\", USA= 135, CHN= 115, RUS= 77},\n                new SampleCategoryItem {Year = \"2016\", USA= 146, CHN= 112, RUS= 88},\n            };\n            return data;\n        }\n    }\n\n    public class SampleCategoryItem\n    {\n        public int USA { get; set; }\n        public int CHN { get; set; }\n        public int RUS { get; set; }\n\n        public string Year { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/Services/SampleFinancialData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SampleFinancialData\n    {\n        public static Random random = new Random();\n        public static List<SampleFinancialItem> Create(int itemsCount = 365)\n        {\n            var data = new List<SampleFinancialItem>();\n\n            // initial values\n            var v = 10000.0;\n            var o = 500.0;\n            var h = Math.Round(o + (random.NextDouble() * 5));\n            var l = Math.Round(o - (random.NextDouble() * 5));\n            var c = Math.Round(l + (random.NextDouble() * (h - l)));\n\n            var today = DateTime.Now;\n            var end = new DateTime(today.Year, 12, 31);\n            var time = end.AddDays(-itemsCount);\n\n            for (var i = 0; i < itemsCount; i++)\n            {\n                var date = time.ToShortDateString();\n                var label = GetShortDate(time, false);\n                // adding new data item\n                var item = new SampleFinancialItem();\n                item.Time = time;\n                item.Date = date;\n                item.Label = label;\n                item.Close = c;\n                item.Open = o;\n                item.High = h;\n                item.Low = l;\n                item.Volume = v;\n                data.Add(item);\n\n                // generating new values\n                var mod = random.NextDouble() - 0.49;\n                o = Math.Round(o + (mod * 5 * 4));\n                v = Math.Round(v + (mod * 5 * 100));\n                h = Math.Round(o + (random.NextDouble() * 15));\n                l = Math.Round(o - (random.NextDouble() * 15));\n                c = Math.Round(l + (random.NextDouble() * (h - l)));\n                time = time.AddDays(1);\n            }\n            return data;\n        }\n\n        public static string GetShortDate(DateTime dt, bool showYear)\n        {\n            var months = new List<string> {\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            };\n            var ind = dt.Month - 1;\n            var day = dt.Day;\n            var label = months[ind] + \" \" + day;\n            if (showYear)\n            {\n                label += \" \" + dt.Year;\n            }\n            return label;\n        }\n    }\n\n    public class SampleFinancialItem\n    {\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Open { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n\n        public string Label { get; set; }\n        public string Date { get; set; }\n        public DateTime Time { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/Services/SampleScatterData.cs",
    "content": "ï»¿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class SampleScatterData\n    {\n        public static List<SampleScatterPoint> Create()\n        {\n            var data = new List<SampleScatterPoint>();\n            var xMin = -180;\n            var xMax = 180;\n            var yMin = -90;\n            var yMax = 90;\n            var xCount = 11;\n            var yCount = 11;\n\n            var xStep = (xMax - xMin) / (xCount - 1);\n            var yStep = (yMax - yMin) / (yCount - 1);\n            var index = 0;\n            for (var x = xMin; x <= xMax; x += xStep)\n            {\n                for (var y = yMin; y <= yMax; y += yStep)\n                {\n                    var z = Math.Cos(x) + Math.Cos(y);\n                    var p = new SampleScatterPoint { X = x, Y = y, Z = z, Index = index++ };\n                    data.Add(p);\n\n                }\n            }\n            return data;\n        }\n\n        public static List<SampleScatterPoint> CreateWaveData()\n        {\n            var data = new List<SampleScatterPoint>();\n            int index = 0;\n\n            for (int angle =0; angle <=360; angle += 10)\n            {\n                double radians = (angle * Math.PI) / 180;\n                double sin = Math.Sin(radians);\n                double cos = Math.Cos(radians);\n\n                data.Add(new SampleScatterPoint()\n                {\n                    Angle = angle,\n                    SinValue = sin,\n                    CosValue = cos,\n                    Index = index++,\n                    Label = sin.ToString(\"N2\")\n                });\n            }\n\n            return data;\n        }\n    }\n\n    public class SampleScatterPoint\n    {\n        public string Label { get; set; }\n        public double X { get; set; }\n        public double Y { get; set; }\n        public double Z { get; set; }\n        public double Index { get; set; }\n        public double Angle { get; set; }\n        public double SinValue { get; set; }\n        public double CosValue { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-types/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}