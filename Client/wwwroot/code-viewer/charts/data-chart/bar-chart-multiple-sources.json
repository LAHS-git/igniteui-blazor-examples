{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/bar-chart-multiple-sources/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"legend-title\">\n        Highest Grossing Movie Franchises\n    </div>\n    <div class=\"legend\">\n        <IgbLegend\n        Name=\"Legend\"\n        @ref=\"legend\"\n        Orientation=\"LegendOrientation.Horizontal\">\n        </IgbLegend>\n\n    </div>\n\n    <div class=\"container vertical fill\">\n        <IgbDataChart\n        Name=\"Chart\"\n        @ref=\"chart\">\n            <IgbCategoryYAxis\n            Name=\"yAxis\"\n            @ref=\"yAxis\"\n            Label=\"Franchise\"\n            UseEnhancedIntervalManagement=\"true\"\n            EnhancedIntervalPreferMoreCategoryLabels=\"true\"\n            DataSource=\"HighestGrossingMovies\"\n            IsInverted=\"true\"\n            Gap=\"0.5\"\n            Overlap=\"-0.1\">\n            </IgbCategoryYAxis>\n\n            <IgbNumericXAxis\n            Name=\"xAxis\"\n            @ref=\"xAxis\"\n            Title=\"Billions of U.S. Dollars\">\n            </IgbNumericXAxis>\n\n            <IgbCategoryHighlightLayer\n            Name=\"CategoryHighlightLayer\"\n            @ref=\"categoryHighlightLayer\">\n            </IgbCategoryHighlightLayer>\n\n            <IgbBarSeries\n            Name=\"BarSeries1\"\n            @ref=\"barSeries1\"\n            XAxisName=\"xAxis\"\n            YAxisName=\"yAxis\"\n            Title=\"Total Revenue of Franchise\"\n            ValueMemberPath=\"TotalRevenue\"\n            DataSource=\"HighestGrossingMovies\"\n            ShowDefaultTooltip=\"true\"\n            IsTransitionInEnabled=\"true\"\n            IsHighlightingEnabled=\"true\">\n            </IgbBarSeries>\n\n            <IgbBarSeries\n            Name=\"BarSeries2\"\n            @ref=\"barSeries2\"\n            XAxisName=\"xAxis\"\n            YAxisName=\"yAxis\"\n            Title=\"Highest Grossing Movie in Series\"\n            ValueMemberPath=\"HighestGrossing\"\n            DataSource=\"HighestGrossingMovies\"\n            ShowDefaultTooltip=\"true\"\n            IsTransitionInEnabled=\"true\"\n            IsHighlightingEnabled=\"true\">\n            </IgbBarSeries>\n\n            <IgbDataToolTipLayer\n            Name=\"Tooltips\"\n            @ref=\"tooltips\">\n            </IgbDataToolTipLayer>\n\n        </IgbDataChart>\n\n    </div>\n</div>\n\n@code {\n    \n\n    private Action BindElements { get; set; }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var legend = this.legend;\n        var chart = this.chart;\n        var yAxis = this.yAxis;\n        var xAxis = this.xAxis;\n        var categoryHighlightLayer = this.categoryHighlightLayer;\n        var barSeries1 = this.barSeries1;\n        var barSeries2 = this.barSeries2;\n        var tooltips = this.tooltips;\n\n        this.BindElements = () => {\n            chart.Legend = this.legend;\n        };\n        this.BindElements();\n\n    }\n\n    private IgbLegend legend;\n    private IgbDataChart chart;\n    private IgbCategoryYAxis yAxis;\n    private IgbNumericXAxis xAxis;\n    private IgbCategoryHighlightLayer categoryHighlightLayer;\n    private IgbBarSeries barSeries1;\n    private IgbBarSeries barSeries2;\n    private IgbDataToolTipLayer tooltips;\n\n    private HighestGrossingMovies _highestGrossingMovies = null;\n    public HighestGrossingMovies HighestGrossingMovies\n    {\n        get\n        {\n            if (_highestGrossingMovies == null)\n            {\n                _highestGrossingMovies = new HighestGrossingMovies();\n            }\n            return _highestGrossingMovies;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/bar-chart-multiple-sources/HighestGrossingMovies.cs",
    "content": "using System;\nusing System.Collections.Generic;\npublic class HighestGrossingMoviesItem\n{\n    public string Franchise { get; set; }\n    public double TotalRevenue { get; set; }\n    public double HighestGrossing { get; set; }\n}\n\npublic class HighestGrossingMovies\n    : List<HighestGrossingMoviesItem>\n{\n    public HighestGrossingMovies()\n    {\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"Marvel Universe\",\n            TotalRevenue = 22.55,\n            HighestGrossing = 2.8\n        });\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"Star Wars\",\n            TotalRevenue = 10.32,\n            HighestGrossing = 2.07\n        });\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"Harry Potter\",\n            TotalRevenue = 9.19,\n            HighestGrossing = 1.34\n        });\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"Avengers\",\n            TotalRevenue = 7.76,\n            HighestGrossing = 2.8\n        });\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"Spider Man\",\n            TotalRevenue = 7.22,\n            HighestGrossing = 1.28\n        });\n        this.Add(new HighestGrossingMoviesItem()\n        {\n            Franchise = @\"James Bond\",\n            TotalRevenue = 7.12,\n            HighestGrossing = 1.11\n        });\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/bar-chart-multiple-sources/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbLegendModule),\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbDataChartVerticalCategoryModule),\n                typeof(IgbDataChartAnnotationModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/bar-chart-multiple-sources/wwwroot/index.css",
    "content": "/*\r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}