{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/financial-series/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n\n    <div class=\"options vertical\">\n\n        <span class=\"legend-title\">Legend: </span>\n        <div class=\"legend\">\n            <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n        </div>\n\n        <div class=\"overlay-right\" >\n            <div class=\"options horizontal\" >\n                <label class=\"options-label\">Financial Series: </label>\n                <select @bind=@SeriesType>\n                    <option>@PriceDisplayType.Candlestick</option>\n                    <option>@PriceDisplayType.OHLC</option>\n                </select>\n                <label class=\"options-label\">Indicator Display: </label>\n                <select @bind=@IndicatorsType>\n                    <option>@IndicatorDisplayType.Line</option>\n                    <option>@IndicatorDisplayType.Area</option>\n                    <option>@IndicatorDisplayType.Column</option>\n                </select>\n            </div>\n        </div>\n\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\"\n                       TitleTopMargin=\"10\"\n                       IsHorizontalZoomEnabled=\"true\"\n                       IsVerticalZoomEnabled=\"true\"\n                       Legend=\"Legend\"\n                       @ref=\"Chart\">\n\n                <IgbCategoryXAxis Name=\"xAxis\" Label=\"Label\" DataSource=\"Data\"\n                               LabelAngle=\"45\" />\n                <IgbNumericYAxis Name=\"yAxis1\" LabelLocation=\"AxisLabelsLocation.OutsideRight\" Title=\"Financial Prices\" />\n\n                <IgbNumericYAxis Name=\"yAxis2\" LabelLocation=\"AxisLabelsLocation.OutsideLeft\"\n                              Title=\"Indicator Values\" MajorStrokeThickness=\"0\" MaximumValue=\"800\" />\n                <IgbBollingerBandsOverlay Name=\"series1\"\n                                       XAxisName=\"xAxis\"\n                                       YAxisName=\"yAxis1\"\n                                       HighMemberPath=\"High\"\n                                       LowMemberPath=\"Low\"\n                                       CloseMemberPath=\"Close\"\n                                       OpenMemberPath=\"Open\"\n                                       Brush=\"rgba(171, 82, 235, 0.39)\"\n                                       DataSource=\"Data\" />\n\n                <IgbFinancialPriceSeries Name=\"series2\"\n                                      XAxisName=\"xAxis\"\n                                      YAxisName=\"yAxis1\"\n                                      DisplayType=@SeriesType\n                                      HighMemberPath=\"High\"\n                                      LowMemberPath=\"Low\"\n                                      CloseMemberPath=\"Close\"\n                                      OpenMemberPath=\"Open\"\n                                      VolumeMemberPath=\"Volume\"\n                                      DataSource=\"Data\"\n                                      Title=\"Price\" />\n\n                <IgbMedianPriceIndicator Name=\"series3\"\n                                      XAxisName=\"xAxis\"\n                                      YAxisName=\"yAxis2\"\n                                      DisplayType=\"@IndicatorsType\"\n                                      HighMemberPath=\"High\"\n                                      LowMemberPath=\"Low\"\n                                      CloseMemberPath=\"Close\"\n                                      OpenMemberPath=\"Open\"\n                                      VolumeMemberPath=\"Volume\"\n                                      DataSource=\"Data\" />\n            </IgbDataChart>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<SampleFinancialItem> Data;\n    private IgbDataChart _Chart;\n    private IgbDataChart Chart\n    {\n        get { return _Chart; }\n        set\n        {\n            _Chart = value;\n            StateHasChanged();\n        }\n    }\n\n    private IgbLegend legend;\n    private IgbLegend Legend\n    {\n        get { return legend; }\n        set\n        {\n            legend = value;\n            StateHasChanged();\n        }\n    }\n    private PriceDisplayType seriesType;\n    private PriceDisplayType SeriesType\n    {\n        get { return seriesType; }\n        set\n        {\n            seriesType = value;\n\n            StateHasChanged();\n        }\n    }\n\n    private IndicatorDisplayType indicatorsType;\n    private IndicatorDisplayType IndicatorsType\n    {\n        get { return indicatorsType; }\n        set\n        {\n            indicatorsType = value;\n\n            StateHasChanged();\n        }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        Data = SampleFinancialData.Create();\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/financial-series/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartCategoryCoreModule),\n                typeof(IgbDataChartFinancialCoreModule),\n                typeof(IgbDataChartFinancialModule),\n                typeof(IgbDataChartFinancialOverlaysModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbDataChartAnnotationModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/financial-series/Services/SampleFinancialData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SampleFinancialData\n    {\n        public static Random random = new Random();\n        public static List<SampleFinancialItem> Create(int itemsCount = 365)\n        {\n            var data = new List<SampleFinancialItem>();\n\n            // initial values\n            var v = 10000.0;\n            var o = 500.0;\n            var h = Math.Round(o + (random.NextDouble() * 5));\n            var l = Math.Round(o - (random.NextDouble() * 5));\n            var c = Math.Round(l + (random.NextDouble() * (h - l)));\n\n            var today = DateTime.Now;\n            var end = new DateTime(today.Year, 12, 31);\n            var time = end.AddDays(-itemsCount);\n\n            for (var i = 0; i < itemsCount; i++)\n            {\n                var date = time.ToShortDateString();\n                var label = GetShortDate(time, false);\n                // adding new data item\n                var item = new SampleFinancialItem();\n                item.Time = time;\n                item.Date = date;\n                item.Label = label;\n                item.Close = c;\n                item.Open = o;\n                item.High = h;\n                item.Low = l;\n                item.Volume = v;\n                data.Add(item);\n\n                // generating new values\n                var mod = random.NextDouble() - 0.49;\n                o = Math.Round(o + (mod * 5 * 4));\n                v = Math.Round(v + (mod * 5 * 100));\n                h = Math.Round(o + (random.NextDouble() * 15));\n                l = Math.Round(o - (random.NextDouble() * 15));\n                c = Math.Round(l + (random.NextDouble() * (h - l)));\n                time = time.AddDays(1);\n            }\n            return data;\n        }\n\n        public static string GetShortDate(DateTime dt, bool showYear)\n        {\n            var months = new List<string> {\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            };\n            var ind = dt.Month - 1;\n            var day = dt.Day;\n            var label = months[ind] + \" \" + day;\n            if (showYear)\n            {\n                label += \" \" + dt.Year;\n            }\n            return label;\n        }\n    }\n\n    public class SampleFinancialItem\n    {\n        public double High { get; set; }\n        public double Low { get; set; }\n        public double Open { get; set; }\n        public double Close { get; set; }\n        public double Volume { get; set; }\n\n        public string Label { get; set; }\n        public string Date { get; set; }\n        public DateTime Time { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/financial-series/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}