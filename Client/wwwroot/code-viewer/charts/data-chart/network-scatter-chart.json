{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/network-scatter-chart/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <span class=\"legend-title\">Neutral Network Graph</span>\n        <div class=\"legend\">\n            <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n        </div>\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (NodeConnections != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\" @ref=\"Chart\"\n                       SeriesMouseEnterScript=\"onNetworkGrahpMouseEnter\"\n                       IsHorizontalZoomEnabled=\"false\"\n                       IsVerticalZoomEnabled=\"false\">\n\n                <IgbNumericXAxis Name=\"xAxis\" MinimumValue=\"0\" MaximumValue=\"14\" Interval=\"1\" LabelTextColor=\"Transparent\"/>\n                <IgbNumericYAxis Name=\"yAxis\" MinimumValue=\"0\" MaximumValue=\"6\"  Interval=\"1\" LabelTextColor=\"Transparent\"/>\n\n                <IgbCategoryYAxis Name=\"labelAxis\" Label=\"Label\" DataSource=\"NodeInuputLabels\" Interval=\"1\" StrokeThickness=\"1\" />\n\n                <IgbScatterPolylineSeries XAxisName=\"xAxis\"\n                                       YAxisName=\"yAxis\"\n                                       DataSource=\"NodeConnections\"\n                                       ShapeMemberPath=\"Points\"\n                                       Thickness=\"2\"\n                                       Title=\"Connections\"\n                                       Outline=\"#8D8D8D\"\n                                       Brush=\"#8D8D8D\">\n                </IgbScatterPolylineSeries>\n\n                <IgbScatterSeries XAxisName=\"xAxis\" XMemberPath=\"X\" MarkerOutline=\"#9D37F7\"\n                               YAxisName=\"yAxis\" YMemberPath=\"Y\"\n                               MarkerType=\"MarkerType.Circle\"\n                               DataSource=\"InputNodeLayer\"\n                               Title=\"Input Layer\" >\n                </IgbScatterSeries>\n\n                <IgbScatterSeries XAxisName=\"xAxis\" XMemberPath=\"X\"  MarkerOutline=\"#46BE3B\"\n                               YAxisName=\"yAxis\" YMemberPath=\"Y\"\n                               MarkerType=\"MarkerType.Circle\"\n                               DataSource=\"AnalyisNodeLayer\"\n                               Title=\"Analyis Layer\">\n                </IgbScatterSeries>\n\n                <IgbScatterSeries XAxisName=\"xAxis\" XMemberPath=\"X\"  MarkerOutline=\"#008DFF\"\n                               YAxisName=\"yAxis\" YMemberPath=\"Y\"\n                               MarkerType=\"MarkerType.Circle\"\n                               DataSource=\"ProcessNodeLayer\"\n                               Title=\"Process Layer\" >\n                </IgbScatterSeries>\n\n                <IgbScatterSeries XAxisName=\"xAxis\" XMemberPath=\"X\"  MarkerOutline=\"#FF7200\"\n                               YAxisName=\"yAxis\" YMemberPath=\"Y\"\n                               MarkerType=\"MarkerType.Circle\"\n                               DataSource=\"OutputNodeLayer\"\n                               Title=\"Output Layer\" >\n                </IgbScatterSeries>\n\n            </IgbDataChart>\n        }\n\n    </div>\n</div>\n\n@code {\n    \n\n    private IgbLegend Legend;\n    private IgbDataChart Chart;\n\n    private List<NodeConnection> NodeConnections;\n    private List<NodeInfo> NodeInuputLabels;\n\n    private List<NodeInfo> InputNodeLayer = new List<NodeInfo>();\n    private List<NodeInfo> AnalyisNodeLayer = new List<NodeInfo>();\n    private List<NodeInfo> ProcessNodeLayer = new List<NodeInfo>();\n    private List<NodeInfo> OutputNodeLayer = new List<NodeInfo>();\n\n    protected override async Task OnInitializedAsync()\n    {\n        // generating nodes\n        for (int i = 1; i <= 5; i++)\n        {\n            this.InputNodeLayer.Add(new NodeInfo { X = 1, Y = i });\n        }\n\n        for (int i = 1; i <= 6; i++)\n        {\n            this.AnalyisNodeLayer.Add(new NodeInfo { X = 5, Y = i - 0.5 });\n        }\n\n        for (int i = 1; i <= 3; i++)\n        {\n            this.ProcessNodeLayer.Add(new NodeInfo { X = 9, Y = i + 1 });\n        }\n\n        this.OutputNodeLayer.Add(new NodeInfo { X = 13, Y = 3, Label = \"Node #\" + 3, Layer = \"Output Layer\", Color = \"#FF7200\" });\n\n        // generating connection between layers\n        this.NodeConnections = new List<NodeConnection>();\n        for (int i = 0; i < this.InputNodeLayer.Count; i++)\n        {\n            var sourceNode = this.InputNodeLayer[i];\n            sourceNode.Color = \"#9D37F7\";\n            sourceNode.Layer = \"Input Layer\";\n            sourceNode.Label = \"Node #\" + (i + 1);\n\n            AddNodeConnections(sourceNode, this.AnalyisNodeLayer);\n        }\n\n        for (int i = 0; i < this.AnalyisNodeLayer.Count; i++)\n        {\n            var sourceNode = this.AnalyisNodeLayer[i];\n            sourceNode.Color = \"#46BE3B\";\n            sourceNode.Layer = \"Analyis Layer\";\n            sourceNode.Label = \"Node #\" + (i + 1);\n            this.\n            AddNodeConnections(sourceNode, this.ProcessNodeLayer);\n        }\n\n        for (int i = 0; i < this.ProcessNodeLayer.Count; i++)\n        {\n            var sourceNode = this.ProcessNodeLayer[i];\n            sourceNode.Color = \"#008DFF\";\n            sourceNode.Layer = \"Process Layer\";\n            sourceNode.Label = \"Node #\" + (i + 1);\n\n            AddNodeConnections(sourceNode, this.OutputNodeLayer);\n        }\n\n        this.NodeInuputLabels = new List<NodeInfo>();\n        this.NodeInuputLabels.Add(new NodeInfo());\n        this.NodeInuputLabels.AddRange(InputNodeLayer);\n        this.NodeInuputLabels.Add(new NodeInfo());\n\n    }\n\n    protected void AddNodeConnections(NodeInfo sourceNode, List<NodeInfo> targetNodes)\n    {\n        for (int c = 0; c < targetNodes.Count; c++)\n        {\n            var nodeTarget = targetNodes[c];\n            var connection = new NodeConnection(sourceNode, nodeTarget);\n            connection.Label = \"Node Connection #\" + (c + 1);\n            this.NodeConnections.Add(connection);\n        }\n    }\n    protected override void OnAfterRender(bool firstRender)\n    {\n        if (this.Chart != null && this.Legend != null && !firstRender) {\n            this.Chart.Legend = this.Legend;\n        }\n    }\n\n    public class NodeConnection\n    {\n        public string Label { get; set; }\n        public NodeInfo Source { get; set; }\n        public NodeInfo Target { get; set; }\n        public List<List<Point>> Points { get; set; }\n\n        public NodeConnection(NodeInfo source, NodeInfo target)\n        {\n            this.Source = source;\n            this.Target = target;\n\n            // generating connection points between nodes\n            var points = new List<Point>();\n            points.Add(new Point { X = source.X, Y = source.Y });\n            points.Add(new Point { X = target.X, Y = target.Y });\n            this.Points = new List<List<Point>>();\n            this.Points.Add(points);\n        }\n    }\n\n    public class NodeInfo\n    {\n        public string Layer { get; set; }\n        public string Label { get; set; }\n        public string Color { get; set; }\n\n        public double X { get; set; }\n        public double Y { get; set; }\n\n        public NodeInfo()\n        {\n            this.Layer = \"\";\n            this.Label = \"\";\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/network-scatter-chart/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                 typeof(IgbDataChartCoreModule),\n                 typeof(IgbDataChartCategoryCoreModule),\n                 typeof(IgbDataChartCategoryModule),\n                 typeof(IgbDataChartVerticalCategoryModule),\n                 typeof(IgbDataChartScatterModule),\n                 typeof(IgbDataChartScatterCoreModule),\n                 typeof(IgbDataChartInteractivityModule),\n                 typeof(IgbScatterPolylineSeriesModule),\n                 typeof(IgbLegendModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/network-scatter-chart/wwwroot/DataChartNetworkGraphScripts.js",
    "content": "ï»¿function onNetworkGrahpMouseEnter(o, e) {\r\n\r\n    if (e.series.tooltipTemplate !== null &&\r\n        e.series.tooltipTemplate !== undefined) {\r\n        return;\r\n    }\r\n\r\n    if (e.series.title.indexOf(\"Layer\") > 0) {\r\n\r\n        e.series.tooltipTemplate = createNodeInfoTooltip;\r\n        console.log(\"createNodeInfoTooltip \");\r\n    }\r\n\r\n    if (e.series.title == \"Connections\") {\r\n\r\n        e.series.tooltipTemplate = createNodeConnectionTooltip;\r\n        console.log(\"createNodeConnectionTooltip \");\r\n    }\r\n}\r\nigRegisterScript(\"onNetworkGrahpMouseEnter\", onNetworkGrahpMouseEnter, false);\r\n\r\nfunction createNodeInfoTooltip(context) {\r\n\r\n    if (!context) return null;\r\n\r\n    var dataItem = context.item;\r\n    if (!dataItem) return null;\r\n\r\n    var tooltip = document.createElement(\"div\");\r\n    tooltip.className = \"ui-tooltip-content\";\r\n\r\n    var divLabel = document.createElement(\"div\");\r\n    divLabel.innerHTML = \"\" + dataItem.Label;\r\n    tooltip.appendChild(divLabel);\r\n\r\n    var divLayer = document.createElement(\"div\");\r\n    divLayer.innerHTML = \"\" + dataItem.Layer;\r\n    divLayer.style.color = dataItem.Color;\r\n    tooltip.appendChild(divLayer);\r\n\r\n    return tooltip;\r\n}\r\n\r\nfunction createNodeConnectionTooltip(context) {\r\n\r\n    if (!context) return null;\r\n\r\n    var dataItem = context.item;\r\n    if (!dataItem) return null;\r\n\r\n    var tooltip = document.createElement(\"div\");\r\n    tooltip.className = \"ui-tooltip-content\";\r\n\r\n    var divConnection = document.createElement(\"div\");\r\n    divConnection.innerHTML = dataItem.Label;\r\n    tooltip.appendChild(divConnection);\r\n\r\n    var divSource = document.createElement(\"div\");\r\n    divSource.innerHTML = \"Source: \" + dataItem.Source.Layer;\r\n    divSource.style.color = dataItem.Source.Color;\r\n    tooltip.appendChild(divSource);\r\n\r\n    var divTarget = document.createElement(\"div\");\r\n    divTarget.innerHTML = \"Target: \" + dataItem.Target.Layer;\r\n    divTarget.style.color = dataItem.Target.Color;\r\n    tooltip.appendChild(divTarget);\r\n\r\n    return tooltip;\r\n}",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/network-scatter-chart/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}