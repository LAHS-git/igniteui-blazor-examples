{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/gantt-chart/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <span class=\"legend-title\">Task Distribution based on Company Departments</span>\n        <div class=\"legend\">\n            <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n        </div>\n    </div>\n\n    <div class=\"container vertical\">\n\n        @if (this.TaskDefinitions != null && this.TasksByName != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\" @ref=\"Chart\"\n                       HighlightingMode=\"SeriesHighlightingMode.FadeOthers\"\n                       SeriesMouseEnterScript=\"onGanttChartMouseEnter\"\n                       IsHorizontalZoomEnabled=\"false\"\n                       IsVerticalZoomEnabled=\"false\">\n\n                <IgbNumericXAxis Name=\"xAxis\" MinimumValue=\"0\" MaximumValue=\"200\" Title=\"Work Days\" />\n                <IgbNumericYAxis Name=\"yAxis\" MinimumValue=\"0\" MaximumValue=\"6\" Interval=\"1\" IsInverted=\"true\" LabelVisibility=\"Visibility.Collapsed\" />\n\n                <IgbCategoryYAxis Name=\"labelAxis\" Label=\"Category\" DataSource=\"TaskCategories\" Interval=\"1\"\n                               LabelLeftMargin=\"0\" Title=\"Departments\" TitleRightMargin=\"5\" TitleLeftMargin=\"10\"\n                               LabelLocation=\"AxisLabelsLocation.OutsideLeft\" IsInverted=\"true\"/>\n\n                @foreach (var taskDataItems in this.TasksByName.Values)\n                {\n                    <IgbScatterPolygonSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\"\n                                          DataSource=\"@taskDataItems\"\n                                          ShapeMemberPath=\"Points\"\n                                          Outline=\"Transparent\"\n                                          Title=\"@taskDataItems[0].Name\"\n                                          Brush=\"@taskDataItems[0].Color\"\n                                          MarkerTemplateScript=\"onGanttMarker\"/>\n                }\n\n            </IgbDataChart>\n        }\n\n    </div>\n</div>\n\n@code {\n    \n\n    private IgbLegend Legend;\n    private IgbDataChart Chart;\n    private List<TaskInfo> TaskDefinitions;\n    private List<TaskInfo> TaskCategories;\n    private Dictionary<string, List<TaskInfo>> TasksByName;\n\n    protected override async Task OnInitializedAsync()\n    {\n        // deifying information about tasks\n        TaskDefinitions = new List<TaskInfo>();\n        // tasks for VD department\n        TaskDefinitions.Add(new TaskInfo { Start = 10, Stop = 20, Category = \"VD\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 20, Stop = 30, Category = \"VD\", Name = \"Planning\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 30, Stop = 60, Category = \"VD\", Name = \"Designing\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 60, Stop = 70, Category = \"VD\", Name = \"Fixing\" });\n        // tasks for DEV department\n        TaskDefinitions.Add(new TaskInfo { Start = 50,  Stop = 60,  Category = \"DEV\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = \"DEV\", Name = \"Planning\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 70,  Stop = 120, Category = \"DEV\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 120, Stop = 190, Category = \"DEV\", Name = \"Fixing\" });\n        // tasks for QE department\n        TaskDefinitions.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = \"QE\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 70,  Stop = 80,  Category = \"QE\", Name = \"Planning\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 80,  Stop = 110, Category = \"QE\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 190, Category = \"QE\", Name = \"Reporting\" });\n        // tasks for DOCS department\n        TaskDefinitions.Add(new TaskInfo { Start = 10,  Stop = 20,  Category = \"DOCS\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 20,  Stop = 30,  Category = \"DOCS\", Name = \"Planning\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 30,  Stop = 80,  Category = \"DOCS\", Name = \"Writing\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 80,  Stop = 110, Category = \"DOCS\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 130, Category = \"DOCS\", Name = \"Reporting\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 130, Stop = 170, Category = \"DOCS\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 170, Stop = 190, Category = \"DOCS\", Name = \"Fixing\" });\n        // tasks for SUPPORT department\n        TaskDefinitions.Add(new TaskInfo { Start = 10,  Stop = 30,  Category = \"SUPPORT\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 30,  Stop = 90,  Category = \"SUPPORT\", Name = \"Writing\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 90,  Stop = 110, Category = \"SUPPORT\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 130, Category = \"SUPPORT\", Name = \"Research\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 130, Stop = 170, Category = \"SUPPORT\", Name = \"Coding\" });\n        TaskDefinitions.Add(new TaskInfo { Start = 170, Stop = 190, Category = \"SUPPORT\", Name = \"Reporting\" });\n\n        // defining lookup dictionary for colors of tasks'\n        var taskColors = new Dictionary<string, string>();\n        taskColors.Add(\"Coding\",    \"#E49F24\");\n        taskColors.Add(\"Designing\", \"#ECE432\");\n        taskColors.Add(\"Planning\",  \"#C054E9\");\n        taskColors.Add(\"Research\",  \"#24B3E4\");\n        taskColors.Add(\"Writing\",   \"#2EA0A0\");\n        taskColors.Add(\"Fixing\",    \"#33C633\");\n        taskColors.Add(\"Reporting\", \"#EF2E2E\");\n\n        // grouping tasks by their name and category\n        var tasksByCategory = new Dictionary<string, TaskInfo>();\n        var tasksByName = new Dictionary<string, List<TaskInfo>>();\n        var taskCategoryID = 0;\n        var taskHeight = 0.4;\n        for (int i = 0; i < TaskDefinitions.Count; i++)\n        {\n            var task = TaskDefinitions[i];\n\n            if (!tasksByName.ContainsKey(task.Name))\n                tasksByName.Add(task.Name, new List<TaskInfo>());\n\n            tasksByName[task.Name].Add(task);\n\n            if (taskColors.ContainsKey(task.Name))\n                task.Color = taskColors[task.Name];\n\n            // grouping tasks by their category index\n            if (tasksByCategory.ContainsKey(task.Category))\n            {\n                task.CategoryID = tasksByCategory[task.Category].CategoryID;\n            }\n            else\n            {\n                task.CategoryID = taskCategoryID++;\n                tasksByCategory.Add(task.Category, task);\n            }\n\n            task.CenterX = task.Start + (task.Duration / 2.0);\n            task.CenterY = task.CategoryID + 1;\n\n            // generating shape points for each task\n            var points = new List<Point>();\n            points.Add(new Point { X = task.Start, Y = task.CenterY - taskHeight });\n            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY - taskHeight });\n            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY + taskHeight });\n            points.Add(new Point { X = task.Start, Y = task.CenterY + taskHeight });\n            task.Points = new List<List<Point>> { points };\n        }\n\n        this.TaskCategories = new List<TaskInfo>();\n        this.TaskCategories.Add(new TaskInfo());\n        this.TaskCategories.AddRange(tasksByCategory.Values.ToList());\n        this.TaskCategories.Add(new TaskInfo());\n        this.TasksByName = tasksByName;\n\n    }\n\n    protected override void OnAfterRender(bool firstRender)\n    {\n        if (this.Chart != null && this.Legend != null && !firstRender) {\n            this.Chart.Legend = this.Legend;\n        }\n    }\n\n    public class TaskInfo\n    {\n        public double Duration { get { return this.Stop - this.Start; } }\n        public double Start { get; set; }\n        public double Stop { get; set; }\n        public string Name { get; set; }\n        public string Color { get; set; }\n        public string Category { get; set; }\n        public int CategoryID { get; set; }\n\n        public double CenterX { get; set; }\n        public double CenterY { get; set; }\n        public List<List<Point>> Points { get; set; }\n\n        public TaskInfo()\n        {\n            Color = \"gray\";\n            Points = new List<List<Point>>();\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/gantt-chart/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                 typeof(IgbDataChartCoreModule),\n                 typeof(IgbDataChartCategoryCoreModule),\n                 typeof(IgbDataChartCategoryModule),\n                 typeof(IgbDataChartVerticalCategoryModule),\n                 typeof(IgbDataChartInteractivityModule),\n                 typeof(IgbDataChartScatterModule),\n                 typeof(IgbDataChartScatterCoreModule),\n                 typeof(IgbScatterPolygonSeriesModule),\n                 typeof(IgbLegendModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/gantt-chart/wwwroot/DataChartGanttChartScripts.js",
    "content": "﻿function onGanttChartMouseEnter(o, e) {\r\n\r\n    if (e.series.tooltipTemplate === null ||\r\n        e.series.tooltipTemplate === undefined) {\r\n        e.series.tooltipTemplate = onGanttTooltip;\r\n        console.log(\"onGanttChartMouseEnter \");\r\n    }\r\n}\r\nigRegisterScript(\"onGanttChartMouseEnter\", onGanttChartMouseEnter, false);\r\n\r\nfunction onGanttTooltip(context) {\r\n\r\n    if (!context) return null;\r\n\r\n    var dataItem = context.item;\r\n    if (!dataItem) return null;\r\n\r\n    var tooltip = document.createElement(\"div\");\r\n    tooltip.className = \"ui-tooltip-content\";\r\n    tooltip.style.font = \"normal 12px Verdana\";\r\n\r\n    var div = document.createElement(\"div\");\r\n    div.innerHTML = \"Task Name: \" + dataItem.Name;\r\n    div.style.color = dataItem.Color;\r\n    tooltip.appendChild(div);\r\n\r\n    div = document.createElement(\"div\");\r\n    div.innerHTML = \"Department: \" + dataItem.Category;\r\n    tooltip.appendChild(div);\r\n\r\n    div = document.createElement(\"div\");\r\n    div.innerHTML = \"Duration: \" + dataItem.Duration;\r\n    tooltip.appendChild(div);\r\n\r\n    div = document.createElement(\"div\");\r\n    div.innerHTML = \"Range: \" + dataItem.Start + \"-\" + dataItem.Stop ;\r\n    tooltip.appendChild(div);\r\n\r\n    return tooltip;\r\n}\r\n\r\nfunction onGanttMarker(o, e) {\r\n\r\n    var desiredSize = 45;\r\n    return {\r\n        measure: function (measureInfo) {\r\n            measureInfo.width = desiredSize;\r\n            measureInfo.height = desiredSize;\r\n        },\r\n\r\n        render: function (renderInfo) {\r\n            var ctx = renderInfo.context;\r\n            if (renderInfo.isHitTestRender) {\r\n                ctx.fillStyle = renderInfo.data.actualItemBrush.fill;\r\n            } else {\r\n                ctx.fillStyle = \"black\";\r\n            }\r\n\r\n            var halfWidth  = Math.round(renderInfo.availableWidth / 2.0);\r\n            var halfHeight = Math.round(renderInfo.availableHeight / 2.0);\r\n\r\n            var cx = renderInfo.xPosition;\r\n            var cy = renderInfo.yPosition;\r\n\r\n            var x = renderInfo.xPosition - halfWidth;\r\n            var y = renderInfo.yPosition - halfHeight;\r\n\r\n            if (renderInfo.isHitTestRender) {\r\n                ctx.fillRect(x, y, renderInfo.availableWidth, renderInfo.availableHeight);\r\n\r\n            } else {\r\n\r\n                var data = renderInfo.data;\r\n\r\n                var viewportHeight = renderInfo.passInfo.viewportHeight;\r\n                var viewportRatio = viewportHeight / 200.0;// 150.0;\r\n                var markerSize = viewportRatio * desiredSize;\r\n                var markerHalf = markerSize / 2.0;\r\n                var actualRadius = viewportRatio * data.item.Radius;\r\n                var markerRadius = 30; //Math.min(150, viewportRatio * data.item.Radius);\r\n                //ctx.strokeStyle = \"black\";\r\n                //ctx.fillStyle = \"rgba(193, 66, 66, 0.2)\";\r\n                //ctx.lineWidth = 1;\r\n                //ctx.beginPath();\r\n                //ctx.arc(cx, cy, markerRadius, 0, 2 * Math.PI);\r\n                //ctx.stroke();\r\n                //ctx.fill();\r\n\r\n                var text = data.item.Duration.toString();\r\n                //var textSize = Math.round(viewportRatio * 10);\r\n                var textSize = 12;\r\n                ctx.font = \"normal \" + textSize + \"px Verdana\";\r\n                ctx.textBaseline = \"middle\";\r\n                ctx.textAlign = \"center\";\r\n                ctx.fillStyle = \"#494848\";\r\n                ctx.fillText(text, cx, cy);\r\n            }\r\n        }\r\n    }\r\n}\r\nigRegisterScript(\"onGanttMarker\", onGanttMarker, true);",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/gantt-chart/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}