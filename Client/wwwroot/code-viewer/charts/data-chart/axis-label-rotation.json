{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-label-rotation/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <IgbPropertyEditorPanel\n\n        DescriptionType=\"DataChart\"\n        IsHorizontal=\"true\"\n        IsWrappingEnabled=\"true\"\n        Name=\"propertyEditorPanel1\"\n        @ref=\"propertyEditorPanel1\">\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"ShouldConsiderAutoRotationForInitialLabels\"\n            Name=\"ShouldConsiderAutoRotationForInitialLabels\"\n            @ref=\"shouldConsiderAutoRotationForInitialLabels\"\n            Label=\"Rotate Labels?\"\n            ShouldOverrideDefaultEditor=\"true\"\n            PrimitiveValue=\"true\">\n            </IgbPropertyEditorPropertyDescription>\n\n            <IgbPropertyEditorPropertyDescription\n            PropertyPath=\"AutoMarginAndAngleUpdateMode\"\n            Name=\"AutoMarginAndAngleUpdateMode\"\n            @ref=\"autoMarginAndAngleUpdateMode\"\n            Label=\"AutoMarginAndAngleUpdateMode: \"\n            ShouldOverrideDefaultEditor=\"true\"\n            ValueType=\"PropertyEditorValueType.EnumValue\"\n            DropDownNames=\"@(new string[] { \"None\", \"SizeChanging\", \"SizeChangingAndZoom\" })\"\n            DropDownValues=\"@(new string[] { \"None\", \"SizeChanging\", \"SizeChangingAndZoom\" })\"\n            PrimitiveValue=\"@(\"SizeChangingAndZoom\")\">\n            </IgbPropertyEditorPropertyDescription>\n\n        </IgbPropertyEditorPanel>\n\n    </div>\n\n    <div class=\"container vertical fill\">\n        <IgbDataChart\n        Name=\"chart\"\n        @ref=\"chart\"\n        IsHorizontalZoomEnabled=\"true\"\n        IsVerticalZoomEnabled=\"true\"\n        AutoMarginAndAngleUpdateMode=\"AutoMarginsAndAngleUpdateMode.SizeChangingAndZoom\"\n        ShouldConsiderAutoRotationForInitialLabels=\"true\"\n        ShouldAutoExpandMarginForInitialLabels=\"true\">\n            <IgbCategoryXAxis\n            Name=\"xAxis\"\n            @ref=\"xAxis\"\n            DataSource=\"TemperatureAverageDataLongLabels\"\n            EnhancedIntervalPreferMoreCategoryLabels=\"true\"\n            UseEnhancedIntervalManagement=\"true\"\n            Label=\"Month\">\n            </IgbCategoryXAxis>\n\n            <IgbNumericYAxis\n            Name=\"yAxis\"\n            @ref=\"yAxis\">\n            </IgbNumericYAxis>\n\n            <IgbColumnSeries\n            Name=\"colSeries1\"\n            @ref=\"colSeries1\"\n            XAxisName=\"xAxis\"\n            YAxisName=\"yAxis\"\n            DataSource=\"TemperatureAverageDataLongLabels\"\n            ValueMemberPath=\"Temperature\">\n            </IgbColumnSeries>\n\n        </IgbDataChart>\n\n    </div>\n</div>\n\n@code {\n    \n\n    private Action BindElements { get; set; }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var propertyEditorPanel1 = this.propertyEditorPanel1;\n        var shouldConsiderAutoRotationForInitialLabels = this.shouldConsiderAutoRotationForInitialLabels;\n        var autoMarginAndAngleUpdateMode = this.autoMarginAndAngleUpdateMode;\n        var chart = this.chart;\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n        var colSeries1 = this.colSeries1;\n\n        this.BindElements = () => {\n            propertyEditorPanel1.Target = this.chart;\n        };\n        this.BindElements();\n\n    }\n\n    private IgbPropertyEditorPanel propertyEditorPanel1;\n    private IgbPropertyEditorPropertyDescription shouldConsiderAutoRotationForInitialLabels;\n    private IgbPropertyEditorPropertyDescription autoMarginAndAngleUpdateMode;\n    private IgbDataChart chart;\n    private IgbCategoryXAxis xAxis;\n    private IgbNumericYAxis yAxis;\n    private IgbColumnSeries colSeries1;\n\n    private TemperatureAverageDataLongLabels _temperatureAverageDataLongLabels = null;\n    public TemperatureAverageDataLongLabels TemperatureAverageDataLongLabels\n    {\n        get\n        {\n            if (_temperatureAverageDataLongLabels == null)\n            {\n                _temperatureAverageDataLongLabels = new TemperatureAverageDataLongLabels();\n            }\n            return _temperatureAverageDataLongLabels;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-label-rotation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbInputModule),\n                typeof(IgbPropertyEditorPanelModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-label-rotation/TemperatureAverageDataLongLabels.cs",
    "content": "using System;\nusing System.Collections.Generic;\npublic class TemperatureAverageDataLongLabelsItem\n{\n    public string Month { get; set; }\n    public double Temperature { get; set; }\n}\n\npublic class TemperatureAverageDataLongLabels\n    : List<TemperatureAverageDataLongLabelsItem>\n{\n    public TemperatureAverageDataLongLabels()\n    {\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"January\",\n            Temperature = 3\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"February\",\n            Temperature = 4\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"March\",\n            Temperature = 9\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"April\",\n            Temperature = 15\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"May\",\n            Temperature = 21\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"Jun\",\n            Temperature = 26\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"July\",\n            Temperature = 29\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"August\",\n            Temperature = 28\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"September\",\n            Temperature = 24\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"October\",\n            Temperature = 18\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"November\",\n            Temperature = 11\n        });\n        this.Add(new TemperatureAverageDataLongLabelsItem()\n        {\n            Month = @\"December\",\n            Temperature = 5\n        });\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-label-rotation/wwwroot/index.css",
    "content": "/*\r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}