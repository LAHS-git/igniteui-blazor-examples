{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/stacked-chart-types/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container sample\">\n\n     <div class=\"options vertical\" >\n          <span class=\"legend-title\">Energy Production By Source </span>\n          <div class=\"legend\">\n             <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n         </div>\n     </div>\n\n     <div class=\"overlay-right\" style=\"margin-right: 1rem\">\n         <label class=\"options-label\">Type of Stacked Series </label>\n         <select value=@SeriesType @onchange=\"OnSeriesTypeChanged\">\n             <option>Stacked Column</option>\n             <option>Stacked 100 Column</option>\n             <option>Stacked Area</option>\n             <option>Stacked 100 Area</option>\n             <option>Stacked Line</option>\n             <option>Stacked 100 Line</option>\n             <option>Stacked Spline</option>\n             <option>Stacked 100 Spline</option>\n             <option>Stacked Bar</option>\n             <option>Stacked 100 Bar</option>\n         </select>\n     </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n        <IgbDataChart Height=\"100%\" Width=\"100%\"\n                   IsHorizontalZoomEnabled=\"false\"\n                   IsVerticalZoomEnabled=\"false\"\n                   PlotAreaMarginRight=\"20\"\n                   Legend=\"Legend\"\n                   @ref=\"Chart\">\n\n            @if (SeriesType == \"Stacked Bar\" || SeriesType == \"Stacked 100 Bar\")\n            {\n                <IgbNumericXAxis  Name=\"xAxis2\" MinimumValue=\"0\" />\n                <IgbCategoryYAxis Name=\"yAxis2\" Label=\"Country\" DataSource=\"Data\" Title=\"Countries\"/>\n            }\n            else\n            {\n                <IgbCategoryXAxis Name=\"xAxis\" Label=\"Country\" DataSource=\"Data\" Title=\"Countries\" />\n                <IgbNumericYAxis  Name=\"yAxis\" MinimumValue=\"0\" />\n            }\n\n            @if (SeriesType == \"Stacked Bar\")\n            {\n                <IgbStackedBarSeries XAxisName=\"xAxis2\" YAxisName=\"yAxis2\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStackedBarSeries>\n            }\n\n            @if (SeriesType == \"Stacked 100 Bar\")\n            {\n                <IgbStacked100BarSeries XAxisName=\"xAxis2\" YAxisName=\"yAxis2\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStacked100BarSeries>\n            }\n\n            @if (SeriesType == \"Stacked Column\")\n            {\n                <IgbStackedColumnSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStackedColumnSeries>\n            }\n\n            @if (SeriesType == \"Stacked 100 Column\")\n            {\n                <IgbStacked100ColumnSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStacked100ColumnSeries>\n            }\n\n            @if (SeriesType == \"Stacked Area\")\n            {\n                <IgbStackedAreaSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStackedAreaSeries>\n            }\n\n            @if (SeriesType == \"Stacked 100 Area\")\n            {\n                <IgbStacked100AreaSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStacked100AreaSeries>\n            }\n\n            @if (SeriesType == \"Stacked Line\")\n            {\n                <IgbStackedLineSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStackedLineSeries>\n            }\n\n            @if (SeriesType == \"Stacked 100 Line\")\n            {\n                <IgbStacked100LineSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStacked100LineSeries>\n            }\n\n            @if (SeriesType == \"Stacked Spline\")\n            {\n                <IgbStackedSplineSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStackedSplineSeries>\n            }\n\n            @if (SeriesType == \"Stacked 100 Spline\")\n            {\n                <IgbStacked100SplineSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" DataSource=\"Data\" ShowDefaultTooltip=\"false\" >\n                    @foreach (var column in this.DataColumns)\n                    {\n                        <IgbStackedFragmentSeries ValueMemberPath=\"@column\" Title=\"@column\" />\n                    }\n                </IgbStacked100SplineSeries>\n            }\n        </IgbDataChart>\n        }\n        </div>\n</div>\n\n@code {\n\n    private List<SampleStackedItem> Data;\n    private string[] DataColumns = new string[] { \"Coal\", \"Hydro\", \"Nuclear\", \"Solar\", \"Oil\"};\n    private IgbDataChart _chart;\n    private IgbDataChart Chart\n    {\n        get { return _chart; }\n        set { _chart = value; StateHasChanged(); }\n    }\n\n    private IgbLegend _legend;\n    private IgbLegend Legend\n    {\n        get { return _legend; }\n        set { _legend = value; StateHasChanged(); }\n    }\n\n    private string _seriesType = \"Stacked Column\";\n    private string SeriesType\n    {\n        get { return _seriesType; }\n        set { _seriesType = value; StateHasChanged(); }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        Data = SampleStackedData.Create();\n    }\n\n    public void OnSeriesTypeChanged(ChangeEventArgs e)\n    {\n        var selectedSeries = e.Value.ToString();\n        SeriesType = selectedSeries;\n    }\n\n    protected override void OnAfterRender(bool firstRender)\n    {\n        if (this.Chart != null && !firstRender)\n        {\n            ////  System.Console.WriteLine(\"OnAfterRender \" + this.Chart.ActualSeries.Count);\n            //  var stackedSeries = this.Chart.ActualSeries[0] as StackedSeriesBase;\n            //  var stackedFragments = stackedSeries.ActualSeries;\n            ////  System.Console.WriteLine(\"OnAfterRender \" + stackedFragments.Count);\n            //  for (int i = 0; i < stackedFragments.Count; i++)\n            //  {\n            //    //  System.Console.WriteLine(\"Title \" + i + \" \" + DataColumns[i]);\n            //      stackedFragments[i].Title = DataColumns[i];\n            //  }\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/stacked-chart-types/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbLegendModule),\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartCategoryCoreModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbDataChartStackedModule),\n                typeof(IgbStackedFragmentSeriesModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/stacked-chart-types/Services/SampleStackedData.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SampleStackedData\n    {\n        public static List<SampleStackedItem> Create()\n        {\n            var data = new List<SampleStackedItem>() {\n                new SampleStackedItem { Country = \"Canada\", Coal = 400, Oil = 100, Solar = 175, Nuclear = 225, Hydro = 350 },\n                new SampleStackedItem { Country = \"China\", Coal = 925, Oil = 200, Solar = 350, Nuclear = 400, Hydro = 625 },\n                new SampleStackedItem { Country = \"Russia\", Coal = 550, Oil = 200, Solar = 250, Nuclear = 475, Hydro = 425 },\n                new SampleStackedItem { Country = \"Australia\", Coal = 450, Oil = 100, Solar = 150, Nuclear = 175, Hydro = 350 },\n                new SampleStackedItem { Country = \"United States\", Coal = 800, Oil = 250, Solar = 475, Nuclear = 575, Hydro = 750 },\n                new SampleStackedItem { Country = \"France\", Coal = 375, Oil = 150, Solar = 350, Nuclear = 275, Hydro = 325 }\n            };\n            return data;\n        }\n    }\n\n    public class SampleStackedItem\n    {\n        public double Coal { get; set; }\n        public double Oil { get; set; }\n        public double Solar { get; set; }\n        public double Nuclear { get; set; }\n        public double Hydro { get; set; }\n        public string Country { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/stacked-chart-types/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}