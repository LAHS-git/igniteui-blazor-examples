{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/series-annotations/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-item\">Annotations: </span>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnCalloutsCheckboxChange\"/>Callouts\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnFinalValueCheckboxChange\"/>Final Value\n        </label>\n        <label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnCrosshairsCheckboxChange\"/>Crosshairs\n        </label>\n        @*<label class=\"options-item\">\n            <input type=\"checkbox\" checked=\"true\" @onchange=\"OnValueOverlayCheckboxChange\"/>Value Overlay\n        </label>*@\n    </div>\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <IgbDataChart Height=\"100%\" Width=\"100%\" @ref=\"Chart\"\n                       IsHorizontalZoomEnabled=\"true\"\n                       IsVerticalZoomEnabled=\"true\">\n                <IgbCategoryXAxis Name=\"xAxis\" Label=\"Angle\" Interval=\"2\" DataSource=\"Data\" />\n                <IgbNumericYAxis Name=\"yAxis\" MinimumValue=\"-1.25\" MaximumValue=\"1.25\" LabelLocation=\"AxisLabelsLocation.OutsideRight\" />\n                <IgbLineSeries XAxisName=\"xAxis\" YAxisName=\"yAxis\" ValueMemberPath=\"SinValue\" DataSource=\"Data\"\n                            MarkerType=\"MarkerType.Circle\" Brush=\"#0577E8\" MarkerOutline=\"#0577E8\" />\n                <IgbCalloutLayer XMemberPath=\"Index\" YMemberPath=\"SinValue\" LabelMemberPath=\"Label\" Brush=\"#0577E8\"\n                              Outline=\"White\" DataSource=\"Data\" @ref=\"CalloutRef\" />\n                <IgbCrosshairLayer IsAxisAnnotationEnabled=\"true\" YAxisAnnotationInterpolatedValuePrecision=\"2\" Brush=\"#9FB328\"\n                                Outline=\"Black\" @ref=\"CrosshairRef\"/>\n                <IgbFinalValueLayer AxisAnnotationInterpolatedValuePrecision=\"2\" AxisAnnotationTextColor=\"White\" AxisAnnotationBackground=\"#0577E8\"\n                                 FinalValueSelectionMode=\"FinalValueSelectionMode.FinalVisibleInterpolated\" @ref=\"FinalValueRef\" />\n                <IgbValueOverlay AxisName=\"yAxis\" Thickness=\"3\" Value=\"0.25\" Brush=\"Brown\" IsAxisAnnotationEnabled=\"true\" @ref=\"ValueOverlayRef\"/>\n            </IgbDataChart>\n        }\n\n    </div>\n</div>\n\n@code {\n\n    private List<SampleScatterPoint> Data;\n\n    private IgbDataChart Chart;\n    private IgbCalloutLayer CalloutRef;\n    private IgbCrosshairLayer CrosshairRef;\n    private IgbFinalValueLayer FinalValueRef;\n    private IgbValueOverlay ValueOverlayRef;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = SampleScatterData.CreateWaveData();\n    }\n\n    private void OnCalloutsCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.CalloutRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.CalloutRef);\n        }\n    }\n\n    private void OnFinalValueCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.FinalValueRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.FinalValueRef);\n        }\n    }\n\n    private void OnCrosshairsCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.CrosshairRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.CrosshairRef);\n        }\n    }\n\n    private void OnValueOverlayCheckboxChange(ChangeEventArgs e)\n    {\n        bool val = (bool)e.Value;\n        if (val)\n        {\n            this.Chart.ActualSeries.Add(this.ValueOverlayRef);\n        }\n        else\n        {\n            this.Chart.ActualSeries.Remove(this.ValueOverlayRef);\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/series-annotations/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbColumnSeriesModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/series-annotations/Services/SampleScatterData.cs",
    "content": "ï»¿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class SampleScatterData\n    {\n        public static List<SampleScatterPoint> Create()\n        {\n            var data = new List<SampleScatterPoint>();\n            var xMin = -180;\n            var xMax = 180;\n            var yMin = -90;\n            var yMax = 90;\n            var xCount = 11;\n            var yCount = 11;\n\n            var xStep = (xMax - xMin) / (xCount - 1);\n            var yStep = (yMax - yMin) / (yCount - 1);\n            var index = 0;\n            for (var x = xMin; x <= xMax; x += xStep)\n            {\n                for (var y = yMin; y <= yMax; y += yStep)\n                {\n                    var z = Math.Cos(x) + Math.Cos(y);\n                    var p = new SampleScatterPoint { X = x, Y = y, Z = z, Index = index++ };\n                    data.Add(p);\n\n                }\n            }\n            return data;\n        }\n\n        public static List<SampleScatterPoint> CreateWaveData()\n        {\n            var data = new List<SampleScatterPoint>();\n            int index = 0;\n\n            for (int angle =0; angle <=360; angle += 10)\n            {\n                double radians = (angle * Math.PI) / 180;\n                double sin = Math.Sin(radians);\n                double cos = Math.Cos(radians);\n\n                data.Add(new SampleScatterPoint()\n                {\n                    Angle = angle,\n                    SinValue = sin,\n                    CosValue = cos,\n                    Index = index++,\n                    Label = sin.ToString(\"N2\")\n                });\n            }\n\n            return data;\n        }\n    }\n\n    public class SampleScatterPoint\n    {\n        public string Label { get; set; }\n        public double X { get; set; }\n        public double Y { get; set; }\n        public double Z { get; set; }\n        public double Index { get; set; }\n        public double Angle { get; set; }\n        public double SinValue { get; set; }\n        public double CosValue { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/series-annotations/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}