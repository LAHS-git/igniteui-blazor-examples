{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/composite-chart/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options vertical\">\n        <span class=\"legend-title\">Facebook Statement of Income 2019-2020</span>\n        <div class=\"legend\">\n            <IgbLegend @ref=\"Legend\" Orientation=\"LegendOrientation.Horizontal\" />\n        </div>\n    </div>\n    <div class=\"container vertical\">\n        <IgbDataChart Height=\"100%\" Width=\"100%\" Legend=\"Legend\"\n                   IsHorizontalZoomEnabled=\"false\"\n                   IsVerticalZoomEnabled=\"false\">\n\n            <IgbCategoryXAxis Name=\"xAxis\" DataSource=\"Data\" Label=\"Date\" Overlap=\"0\" Gap=\"0.1\" UseClusteringMode=\"true\"/>\n            <IgbNumericYAxis Name=\"yAxis1\" AbbreviateLargeNumbers=\"true\" Title=\"In Millions of U.S. Dollars\"\n                          MinimumValue=\"0\" MaximumValue=\"30000000\" TitleLeftMargin=\"5\" TitleRightMargin=\"0\"/>\n            <IgbNumericYAxis Name=\"yAxis2\" AbbreviateLargeNumbers=\"true\" Title=\"Percentage\" MajorStrokeThickness=\"0\"\n                          MinimumValue=\"0\" MaximumValue=\"160\" LabelLocation=\"AxisLabelsLocation.OutsideRight\"\n                          LabelHorizontalAlignment=\"HorizontalAlignment.Left\"/>\n\n            <IgbColumnSeries @ref=\"@RevenueSeries\" XAxisName=\"xAxis\" YAxisName=\"yAxis1\" DataSource=\"Data\"\n                          ValueMemberPath=\"Revenue\"\n                          Title=\"Revenue\" MarkerType=\"MarkerType.Hidden\"/>\n            <IgbColumnSeries @ref=\"@ExpenseSeries\" XAxisName=\"xAxis\" YAxisName=\"yAxis1\" DataSource=\"Data\"\n                          ValueMemberPath=\"Expenses\"\n                          Title=\"Expenses\" MarkerType=\"MarkerType.Hidden\"/>\n\n            <IgbSplineAreaSeries @ref=\"@IncomeSeries\" XAxisName=\"xAxis\" YAxisName=\"yAxis2\" DataSource=\"Data\"\n                          ValueMemberPath=\"IncomePerRevenue\"\n                          Title=\"Income / Revenue %\" MarkerType=\"MarkerType.Circle\"/>\n\n            <IgbCalloutLayer DataSource=\"Data\" IsAutoCalloutBehaviorEnabled=\"false\" XMemberPath=\"RevenueX\" YMemberPath=\"Revenue\" LabelMemberPath=\"FormattedRevenue\"\n                          TargetSeries=\"@RevenueSeries\"\n                          UseValueForAutoCalloutLabels=\"false\"\n                          CalloutLeaderBrush=\"Transparent\" CalloutTextColor=\"Black\"\n                          CalloutBackground = \"Transparent\"\n                          CalloutPositionPadding=\"-5\"/>\n\n            <IgbCalloutLayer DataSource=\"Data\" IsAutoCalloutBehaviorEnabled=\"false\" XMemberPath=\"ExpensesX\" YMemberPath=\"Expenses\" LabelMemberPath=\"FormattedExpenses\"\n                          TargetSeries=\"@ExpenseSeries\"\n                          UseValueForAutoCalloutLabels=\"false\"\n                          CalloutLeaderBrush=\"Transparent\" CalloutTextColor=\"Black\"\n                          CalloutBackground = \"Transparent\"\n                          CalloutPositionPadding=\"-5\"/>\n\n            <IgbCalloutLayer IsAutoCalloutBehaviorEnabled=\"true\" TargetSeries=\"@IncomeSeries\"\n                          UseValueForAutoCalloutLabels=\"true\" ContentMemberPath=\"IncomePerRevenue\"\n                          CalloutLeaderBrush=\"Transparent\" CalloutTextColor=\"Black\"\n                          CalloutBackground = \"LightGray\" AutoCalloutLabelPrecision=\"1\"/>\n        </IgbDataChart>\n    </div>\n</div>\n\n@code {\n    \n\n    private IgbLegend _legend;\n    private IgbLegend Legend\n    {\n        get { return _legend; }\n        set { _legend = value; StateHasChanged(); }\n    }\n\n    private IgbColumnSeries _RevenueSeries;\n    public IgbColumnSeries RevenueSeries\n    {\n        get { return _RevenueSeries; }\n        set { _RevenueSeries = value; StateHasChanged(); }\n    }\n\n    private IgbColumnSeries _ExpenseSeries;\n    public IgbColumnSeries ExpenseSeries\n    {\n        get { return _ExpenseSeries; }\n        set { _ExpenseSeries = value; StateHasChanged(); }\n    }\n\n    private IgbSplineAreaSeries _IncomeSeries;\n    public IgbSplineAreaSeries IncomeSeries\n    {\n        get { return _IncomeSeries; }\n        set { _IncomeSeries = value; StateHasChanged(); }\n    }\n\n    private List<CompanyBudgetInfoWithFormatting> Data = new CompanyBudgetDataWithFormatting();\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/composite-chart/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbDataChartAnnotationModule),\n                typeof(IgbCalloutLayerModule),\n                typeof(IgbNumberAbbreviatorModule),\n                typeof(IgbLegendModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/composite-chart/Services/CompanyBudgetDataWithFormatting.cs",
    "content": "﻿using System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class CompanyBudgetInfoWithFormatting\n    {\n        public string Date { get; set; }\n        public double Revenue { get; set; }\n        public double Expenses { get; set; }\n        public double RevenueX { get; set; }\n        public double ExpensesX { get; set; }\n        public double Income { get; set; }\n        public double IncomePerRevenue { get; set; }\n        public string FormattedRevenue { get; set; }\n        public string FormattedIncome { get; set; }\n        public string FormattedExpenses { get; set; }\n        public string FormattedProfit { get; set; }\n    }\n\n    public class CompanyBudgetDataWithFormatting : List<CompanyBudgetInfoWithFormatting>\n    {\n        public string FormatNumber(double num)\n        {\n            var ret = num;\n            if (num >= 1000000) return (num / 1000000.0).ToString(\"0\") + \"M\";\n            if (num >= 1000) return (num / 1000.0).ToString(\"0\") + \"K\";\n            return ret.ToString().Replace(@\"/\\B(?=(\\d{3})+(?!\\d))/g\", \",\");\n        }\n\n        public CompanyBudgetDataWithFormatting()\n        {\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Jan 1, 2019\", Revenue = 16914, Expenses = 10183 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Mar 1, 2019\", Revenue = 15077, Expenses = 12813 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Jun 1, 2019\", Revenue = 16886, Expenses = 14476 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Sep 1, 2019\", Revenue = 17652, Expenses = 11705 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Jan 1, 2020\", Revenue = 21082, Expenses = 14044 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Mar 1, 2020\", Revenue = 17737, Expenses = 12803 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Jun 1, 2020\", Revenue = 18687, Expenses = 13677 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Sep 1, 2020\", Revenue = 21470, Expenses = 13717 });\n            Add(new CompanyBudgetInfoWithFormatting { Date = \"Jan 1, 2021\", Revenue = 28072, Expenses = 17133 });\n\n            var i = 0;\n            foreach (var item in this)\n            {\n                item.Revenue = item.Revenue * 1000;\n                item.Expenses = item.Expenses * 1000;\n                item.Income = item.Revenue - item.Expenses;\n                item.IncomePerRevenue = (item.Income / item.Revenue * 100);\n                // calculating x-offset for callouts\n                item.RevenueX = i;\n                item.ExpensesX = i;\n                // formatting values for callouts\n                item.FormattedRevenue = \"$\" + FormatNumber(item.Revenue);\n                item.FormattedIncome = \"$\" + FormatNumber(item.Income);\n                item.FormattedExpenses = \"$\" + FormatNumber(item.Expenses);\n                item.FormattedProfit = item.IncomePerRevenue + \"%\";\n                i++;\n            }\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/composite-chart/wwwroot/ColumnChartStyling.js",
    "content": "﻿function onColumnChartStylingMarkerTemplate(o, e) {\r\n\r\n    let style = { text: \"black\" };\r\n    let size = 12;\r\n\r\n    return {\r\n        measure: function (measureInfo) {\r\n            const data = measureInfo.data;\r\n            const context = measureInfo.context;\r\n            let value = \"0.00\";\r\n            let item = data.item;\r\n            if (item != null) {\r\n                value = item.Solar.toString();\r\n            }\r\n            const height = context.measureText(\"M\").width;\r\n            const width = context.measureText(value).width;\r\n            measureInfo.width = width;\r\n            measureInfo.height = height + size;\r\n        },\r\n        render: function (renderInfo) {\r\n            const item = renderInfo.data.item;\r\n            const series = renderInfo.data.series;\r\n\r\n            const valuePath = series.valueColumn.propertyName;\r\n\r\n            var value = 0;\r\n\r\n            switch (valuePath) {\r\n                case \"Solar\":\r\n                    value = item.Solar;\r\n                    break;\r\n                case \"Coal\":\r\n                    value = item.Coal;\r\n                    break;\r\n                case \"Hydro\":\r\n                    value = item.Hydro;\r\n                    break;\r\n                case \"Wind\":\r\n                    value = item.Wind;\r\n                    break;\r\n                case \"Nuclear\":\r\n                    value = item.Nuclear;\r\n                    break;\r\n            }\r\n\r\n            const ctx = renderInfo.context;\r\n            let x = renderInfo.xPosition;\r\n            let y = renderInfo.yPosition;\r\n\r\n            if (renderInfo.isHitTestRender) {\r\n                ctx.fillStyle = renderInfo.data.actualItemBrush.fill;\r\n\r\n                let width = renderInfo.availableWidth;\r\n                let height = renderInfo.availableHeight;\r\n\r\n                ctx.fillRect(x - (width / 2), y - (height), renderInfo.availableWidth, renderInfo.availableHeight);\r\n                return;\r\n            }\r\n\r\n            let xOffset = 20;\r\n            let yOffset = 10;\r\n\r\n            ctx.font = '8pt Verdana';\r\n            ctx.textBaseline = 'top';\r\n            ctx.fillStyle = style.text;\r\n\r\n            if (value < 0) {\r\n                ctx.fillText(value + \"%\", x - (xOffset / 2), y + (yOffset ));\r\n            }\r\n            else {\r\n                ctx.fillText(value + \"%\", x - (xOffset / 2), y - (yOffset * 2));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nigRegisterScript(\"onColumnChartStylingMarkerTemplate\", onColumnChartStylingMarkerTemplate, true);",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/composite-chart/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}