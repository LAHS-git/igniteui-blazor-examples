{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations-corner-radius/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"legend-title\">\n        Renewable Electricity Generated\n    </div>\n\n    <div class=\"container vertical fill\">\n        <IgbDataChart\n        Name=\"chart\"\n        @ref=\"chart\">\n            <IgbCategoryXAxis\n            Name=\"xAxis\"\n            @ref=\"xAxis\"\n            DataSource=\"CountryRenewableElectricity\"\n            Label=\"Year\">\n            </IgbCategoryXAxis>\n\n            <IgbNumericYAxis\n            Name=\"yAxis\"\n            @ref=\"yAxis\"\n            Title=\"TWh\">\n            </IgbNumericYAxis>\n\n            <IgbLineSeries\n            Name=\"LineSeries1\"\n            @ref=\"lineSeries1\"\n            Title=\"Electricity\"\n            XAxisName=\"xAxis\"\n            YAxisName=\"yAxis\"\n            DataSource=\"CountryRenewableElectricity\"\n            ValueMemberPath=\"America\">\n            </IgbLineSeries>\n\n            <IgbCalloutLayer\n            Name=\"CalloutLayer1\"\n            @ref=\"calloutLayer1\"\n            DataSource=\"CountryRenewableCallouts\"\n            XMemberPath=\"Index\"\n            YMemberPath=\"Value\"\n            LabelMemberPath=\"Label\"\n            CalloutPaddingLeft=\"20\"\n            CalloutPaddingRight=\"20\"\n            CalloutPaddingBottom=\"10\"\n            CalloutPaddingTop=\"10\"\n            CalloutCornerRadius=\"5\">\n            </IgbCalloutLayer>\n\n            <IgbFinalValueLayer\n            Name=\"FinalValueLayer\"\n            @ref=\"finalValueLayer\"\n            AxisAnnotationBackgroundCornerRadius=\"10\"\n            AxisAnnotationPaddingBottom=\"10\"\n            AxisAnnotationPaddingTop=\"10\"\n            AxisAnnotationPaddingLeft=\"10\"\n            AxisAnnotationPaddingRight=\"10\">\n            </IgbFinalValueLayer>\n\n            <IgbCrosshairLayer\n            Name=\"CrosshairLayer\"\n            @ref=\"crosshairLayer\"\n            IsAxisAnnotationEnabled=\"true\"\n            YAxisAnnotationInterpolatedValuePrecision=\"0\"\n            XAxisAnnotationBackgroundCornerRadius=\"10\"\n            YAxisAnnotationBackgroundCornerRadius=\"10\">\n            </IgbCrosshairLayer>\n\n            <IgbDataToolTipLayer\n            Name=\"Tooltips\"\n            @ref=\"tooltips\">\n            </IgbDataToolTipLayer>\n\n        </IgbDataChart>\n\n    </div>\n</div>\n\n@code {\n    \n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var chart = this.chart;\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n        var lineSeries1 = this.lineSeries1;\n        var calloutLayer1 = this.calloutLayer1;\n        var finalValueLayer = this.finalValueLayer;\n        var crosshairLayer = this.crosshairLayer;\n        var tooltips = this.tooltips;\n\n    }\n\n    private IgbDataChart chart;\n    private IgbCategoryXAxis xAxis;\n    private IgbNumericYAxis yAxis;\n    private IgbLineSeries lineSeries1;\n    private IgbCalloutLayer calloutLayer1;\n    private IgbFinalValueLayer finalValueLayer;\n    private IgbCrosshairLayer crosshairLayer;\n    private IgbDataToolTipLayer tooltips;\n\n    private CountryRenewableElectricity _countryRenewableElectricity = null;\n    public CountryRenewableElectricity CountryRenewableElectricity\n    {\n        get\n        {\n            if (_countryRenewableElectricity == null)\n            {\n                _countryRenewableElectricity = new CountryRenewableElectricity();\n            }\n            return _countryRenewableElectricity;\n        }\n    }\n\n    private CountryRenewableCallouts _countryRenewableCallouts = null;\n    public CountryRenewableCallouts CountryRenewableCallouts\n    {\n        get\n        {\n            if (_countryRenewableCallouts == null)\n            {\n                _countryRenewableCallouts = new CountryRenewableCallouts();\n            }\n            return _countryRenewableCallouts;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations-corner-radius/CountryRenewableCallouts.cs",
    "content": "using System;\nusing System.Collections.Generic;\npublic class CountryRenewableCalloutsItem\n{\n    public double Index { get; set; }\n    public string Label { get; set; }\n    public double Value { get; set; }\n}\n\npublic class CountryRenewableCallouts\n    : List<CountryRenewableCalloutsItem>\n{\n    public CountryRenewableCallouts()\n    {\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 0,\n            Label = @\"19 TWh\",\n            Value = 19\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 1,\n            Label = @\"24 TWh\",\n            Value = 24\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 2,\n            Label = @\"28 TWh\",\n            Value = 28\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 3,\n            Label = @\"26 TWh\",\n            Value = 26\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 4,\n            Label = @\"38 TWh\",\n            Value = 38\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 5,\n            Label = @\"31 TWh\",\n            Value = 31\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 6,\n            Label = @\"19 TWh\",\n            Value = 19\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 7,\n            Label = @\"52 TWh\",\n            Value = 52\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 8,\n            Label = @\"50 TWh\",\n            Value = 50\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 9,\n            Label = @\"34 TWh\",\n            Value = 34\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 10,\n            Label = @\"38 TWh\",\n            Value = 34\n        });\n        this.Add(new CountryRenewableCalloutsItem()\n        {\n            Index = 11,\n            Label = @\"38 TWh\",\n            Value = 38\n        });\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations-corner-radius/CountryRenewableElectricity.cs",
    "content": "using System;\nusing System.Collections.Generic;\npublic class CountryRenewableElectricityItem\n{\n    public string Year { get; set; }\n    public double Europe { get; set; }\n    public double China { get; set; }\n    public double America { get; set; }\n}\n\npublic class CountryRenewableElectricity\n    : List<CountryRenewableElectricityItem>\n{\n    public CountryRenewableElectricity()\n    {\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2009\",\n            Europe = 34,\n            China = 21,\n            America = 19\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2010\",\n            Europe = 43,\n            China = 26,\n            America = 24\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2011\",\n            Europe = 66,\n            China = 29,\n            America = 28\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2012\",\n            Europe = 69,\n            China = 32,\n            America = 26\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2013\",\n            Europe = 58,\n            China = 47,\n            America = 38\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2014\",\n            Europe = 40,\n            China = 46,\n            America = 31\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2015\",\n            Europe = 78,\n            China = 50,\n            America = 19\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2016\",\n            Europe = 13,\n            China = 90,\n            America = 52\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2017\",\n            Europe = 78,\n            China = 132,\n            America = 50\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2018\",\n            Europe = 40,\n            China = 134,\n            America = 34\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2018\",\n            Europe = 40,\n            China = 134,\n            America = 34\n        });\n        this.Add(new CountryRenewableElectricityItem()\n        {\n            Year = @\"2019\",\n            Europe = 80,\n            China = 96,\n            America = 38\n        });\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations-corner-radius/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataChartCoreModule),\n                typeof(IgbDataChartCategoryModule),\n                typeof(IgbDataChartAnnotationModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbAnnotationLayerProxyModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/charts/data-chart/axis-annotations-corner-radius/wwwroot/index.css",
    "content": "/*\r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}