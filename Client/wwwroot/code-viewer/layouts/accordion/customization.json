{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/accordion/customization/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<style>\nigc-accordion {\nwidth: 100%;\n}\n\n.sample-wrapper {\noverflow-y: auto;\nmax-height: 530px;\nmargin: 8px;\n}\n\nigc-range-slider {\nmargin: 24px;\n}\n\n.categories-container {\ndisplay: flex;\nflex-flow: column nowrap;\n}\n\nigc-checkbox,\nigc-radio {\nmargin: 4px 0;\n}\n\nigc-expansion-panel {\nborder: 1px solid rgba(174, 174, 174, 0.25);\n}\n\nigc-rating {\nflex-direction: row;\n}\n</style>\n\n<div class=\"container vertical\">\n    <IgbAccordion>\n        <IgbExpansionPanel>\n            <h3 slot=\"title\" id=\"categories\">@CategoryTitle</h3>\n            <div class=\"categories-container\">\n                @foreach (var category in Categories)\n                {\n                    <IgbCheckbox Value=\"@category.Id\" Checked=\"@category.Selected\" Change=\"OnCategoryChange\">@category.Label</IgbCheckbox>\n                }\n            </div>\n        </IgbExpansionPanel>\n        <IgbExpansionPanel>\n            <h3 slot=\"title\">Cost: $<span id=\"lowerCost\">@SliderLower</span> to $<span id=\"upperCost\">@SliderUpper</span></h3>\n            <IgbRangeSlider Min=\"0\" Max=\"1000\" Lower=\"@SliderLower\" Upper=\"@SliderUpper\" Change=\"OnSliderChange\"></IgbRangeSlider>\n        </IgbExpansionPanel>\n        <IgbExpansionPanel>\n            <h3 slot=\"title\" id=\"rating\">@RatingTitle</h3>\n            <IgbRadioGroup>\n                @foreach (var rating in Ratings)\n                {\n                    <IgbRadio Value=\"@rating.Id\" Change=\"OnRadioChange\">\n                        <IgbRating Label=\"@rating.Label\" Value=\"@rating.Value\" Max=\"5\" Size=\"SizableComponentSize.Small\" Readonly=\"true\"></IgbRating>\n                    </IgbRadio>\n                }\n            </IgbRadioGroup>\n        </IgbExpansionPanel>\n        <IgbExpansionPanel>\n            <h3 slot=\"title\" id=\"timeTitle\">@TimeTitle</h3>\n            <IgbDateTimeInput @ref=\"DateTimeInputRef\" InputFormat=\"hh:mm tt\" Label=\"Arrive before\" Size=\"SizableComponentSize.Small\" Change=\"OnTimeChange\">\n                <IgbIcon IconName=\"clock\" Collection=\"material\" slot=\"prefix\"></IgbIcon>\n                <IgbIcon IconName=\"clear\" Collection=\"material\" slot=\"suffix\" @onclick=\"OnTimeClear\"></IgbIcon>\n            </IgbDateTimeInput>\n        </IgbExpansionPanel>\n    </IgbAccordion>\n\n    <IgbIcon @ref=\"@RegisterIconRef\"/>\n</div>\n\n@code {\n    \n    IgbIcon? RegisterIconRef;\n\n    IgbDateTimeInput? DateTimeInputRef;\n\n    double SliderLower = 200;\n    double SliderUpper = 800;\n\n    string CategoryTitle = \"Categories\";\n    List<Category> Categories = new List<Category>();\n\n    string RatingTitle = \"Rating\";\n    List<Rating> Ratings = new List<Rating>();\n\n    string TimeTitle = \"Time\";\n\n    protected override async Task OnInitializedAsync()\n    {\n        Categories.Add(new Category { Id = \"0\", Label = \"Bike\" });\n        Categories.Add(new Category { Id = \"1\", Label = \"Motorcycle\" });\n        Categories.Add(new Category { Id = \"2\", Label = \"Car\" });\n        Categories.Add(new Category { Id = \"3\", Label = \"Taxi\" });\n        Categories.Add(new Category { Id = \"4\", Label = \"Public Transport\" });\n\n        Ratings.Add(new Rating { Id = \"0\", Label = \"1 star or more\", Value = 1.5 });\n        Ratings.Add(new Rating { Id = \"1\", Label = \"2 star or more\", Value = 2.5 });\n        Ratings.Add(new Rating { Id = \"2\", Label = \"3 star or more\", Value = 3.5 });\n        Ratings.Add(new Rating { Id = \"3\", Label = \"4 star or more\", Value = 4.5 });\n    }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender && this.RegisterIconRef != null)\n        {\n            await this.RegisterIconRef.EnsureReady();\n            string clearIcon = \"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' width='24' height='24' viewBox='0 0 24 24'><path d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /></svg>\";\n            string clockIcon = \"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' width='24' height='24' viewBox='0 0 24 24'><path d='M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z' /></svg>\";\n            await this.RegisterIconRef.RegisterIconFromTextAsync(\"clear\", clearIcon, \"material\");\n            await this.RegisterIconRef.RegisterIconFromTextAsync(\"clock\", clockIcon, \"material\");\n        }\n    }\n\n    public void OnCategoryChange(IgbComponentBoolValueChangedEventArgs args)\n    {\n        var id = (args.Parent as IgbCheckbox).Value;\n        var category = Categories.Where(x => x.Id == id).FirstOrDefault();\n        if (category != null)\n            category.Selected = args.Detail;\n\n        UpdateCheckedCategories();\n    }\n\n    private void UpdateCheckedCategories()\n    {\n        string checkedItems = \"\";\n        Categories.ForEach(category =>\n        {\n            if (category.Selected)\n            {\n                checkedItems += checkedItems != \"\" ? \", \" + category.Label : \"Categories: \" + category.Label;\n            }\n        });\n        CategoryTitle = checkedItems == \"\" ? \"Categories\" : checkedItems;\n        StateHasChanged();\n    }\n\n    private void OnSliderChange(IgbRangeSliderValueEventArgs args)\n    {\n        if (args.Detail != null)\n        {\n            SliderLower = args.Detail.Lower;\n            SliderUpper = args.Detail.Upper;\n            StateHasChanged();\n        }\n    }\n\n    private void OnRadioChange(IgbComponentBoolValueChangedEventArgs args)\n    {\n        var id = (args.Parent as IgbRadio).Value;\n        var rating = Ratings.Where(x => x.Id == id).FirstOrDefault();\n        if (rating != null)\n        {\n            RatingTitle = \"Rating: \" + rating.Label;\n            StateHasChanged();\n        }\n    }\n\n    private async Task OnTimeChange(IgbComponentDateValueChangedEventArgs args)\n    {\n        TimeTitle = \"Time: \" + (args.Parent as IgbDateTimeInput).Label + \" \" + args.Detail.ToShortTimeString();\n        StateHasChanged();\n\n    }\n\n    private async Task OnTimeClear()\n    {\n        if (DateTimeInputRef != null)\n        {\n            await DateTimeInputRef.ClearAsync();\n        }\n        TimeTitle = \"Time\";\n        StateHasChanged();\n    }\n\n    public class Category\n    {\n        public string Id { get; set; }\n        public bool Selected { get; set; }\n        public string Label { get; set; }\n    }\n\n    public class Rating\n    {\n        public string Id { get; set; }\n        public string Label { get; set; }\n        public double Value { get; set; }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/accordion/customization/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\nusing BlazorClientApp;\n\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\nbuilder.Services.AddIgniteUIBlazor(\n    typeof(IgbIconModule),\n    typeof(IgbDateTimeInputModule),\n    typeof(IgbRadioGroupModule),\n    typeof(IgbRadioModule),\n    typeof(IgbRatingModule),\n    typeof(IgbAccordionModule),\n    typeof(IgbExpansionPanelModule),\n    typeof(IgbCheckboxModule),\n    typeof(IgbSliderModule),\n    typeof(IgbRangeSliderModule)\n);\n\nawait builder.Build().RunAsync();",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  }
]
}