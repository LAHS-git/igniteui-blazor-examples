{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/dock-manager/updating-panes/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\" style=\"overflow: hidden;\">\n\n        @*NOTE: code in npmJS\\src\\DockManagerUpdatingPanes.js file sets layout of these DIV elements:*@\n        <IgbDockManager @ref=\"dockManager\" Layout=\"Layout\" height=\"100%\" width=\"100%\">\n            <div slot=\"content1\">\n                @if (this.EmployeeList != null)\n                {\n                     @foreach (var employee in this.EmployeeList)\n                     {\n                         <div style=\"background: @employee.Background; display: flex; flex-direction: row; align-items: center; cursor: pointer; padding: 0.5rem\"\n                              @onclick=\"@(e => onClick(employee))\">\n                             <img style=\"height: 3rem; width: 3rem\" src=\"@employee.Photo\"/>\n                             <div style=\"padding-left: 1rem\">@employee.Name</div>\n                         </div>\n                     }\n                }\n            </div>\n\n            <div slot=\"content2\" style=\"height: 100%; width: 100%; overflow: hidden;\">\n                <IgbCategoryChart @ref=\"ProductivityChart\" Height=\"100%\" Width=\"100%\"\n                               ChartTitle=\"@EmployeeSelectedInfo\"\n                               TitleTopMargin=\"10\"\n                               ChartType=\"CategoryChartType.Column\"\n                               ToolTipType=\"ToolTipType.Item\"\n                               CrosshairsDisplayMode=\"CrosshairsDisplayMode.Both\"\n                               CrosshairsAnnotationEnabled=\"true\"\n                               IsSeriesHighlightingEnabled=\"true\"\n                               IsTransitionInEnabled=\"true\"\n                               YAxisMaximumValue=\"100\"\n                               YAxisMinimumValue=\"40\"/>\n            </div>\n\n            <div slot=\"content3\" style=\"height: 100%; width: 100%; overflow: hidden;\">\n                <IgbGeographicMap @ref=\"GeoMap\" Height=\"100%\" Width=\"100%\" Zoomable=\"true\"\n                               BackgroundContent=\"@GeoImagery\">\n                      <IgbGeographicSymbolSeries\n                               DataSource=\"EmployeeList\"\n                               MarkerType=\"MarkerType.Circle\"\n                               LatitudeMemberPath=\"Latitude\"\n                               LongitudeMemberPath=\"Longitude\"\n                               MarkerBrush=\"White\"\n                               MarkerOutline=\"Red\" />\n\n                      <IgbGeographicSymbolSeries @ref=\"GeoSeries\"\n                               DataSource=\"EmployeeSelected\"\n                               MarkerType=\"MarkerType.Circle\"\n                               LatitudeMemberPath=\"Latitude\"\n                               LongitudeMemberPath=\"Longitude\"\n                               MarkerBrush=\"White\"\n                               MarkerOutline=\"DarkViolet\" />\n                </IgbGeographicMap>\n            </div>\n\n        </IgbDockManager>\n    </div>\n</div>\n\n@code {\n\n    public IgbDockManager dockManager { get; set; }\n    public IgbDockManagerLayout Layout { get; set; }\n    protected List<PersonInfo> EmployeeList;\n    protected List<PersonInfo> EmployeeSelected;\n    protected IgbArcGISOnlineMapImagery GeoImagery;\n    protected IgbGeographicSymbolSeries GeoSeries;\n    protected IgbGeographicMap GeoMap;\n    protected Rect GeoBounds;\n    protected IgbCategoryChart ProductivityChart;\n    protected string EmployeeSelectedInfo;\n\n    protected override void OnInitialized()\n    {\n\n        Layout = new IgbDockManagerLayout();\n        Layout.RootPane = new IgbSplitPane();\n        Layout.RootPane.Size = 200;\n        Layout.RootPane.PaneType = DockManagerPaneType.SplitPane;\n        Layout.RootPane.Orientation = SplitPaneOrientation.Horizontal;\n\n        var rootPane = new IgbDockManagerPaneCollection(null, null);\n        var splitpane1 = new IgbSplitPane { PaneType = DockManagerPaneType.SplitPane, Orientation = SplitPaneOrientation.Vertical };\n        var splitpane2 = new IgbSplitPane { PaneType = DockManagerPaneType.SplitPane, Orientation = SplitPaneOrientation.Vertical, Size=200 };\n        var contentpane1 = new IgbContentPane { PaneType = DockManagerPaneType.ContentPane, Header = \"Managers List\", ContentId = \"content1\" };\n        var contentpane2 = new IgbContentPane { PaneType = DockManagerPaneType.ContentPane, Header = \"Manager's Productivity\", ContentId = \"content2\" };\n        var contentpane3 = new IgbContentPane { PaneType = DockManagerPaneType.ContentPane, Header = \"Managers Location\", ContentId = \"content3\" };\n\n        splitpane1.Panes.Add(contentpane1);\n        splitpane2.Panes.Add(contentpane2);\n        splitpane2.Panes.Add(contentpane3);\n        Layout.RootPane.Panes.Add(splitpane1);\n        Layout.RootPane.Panes.Add(splitpane2);\n    }\n\n    protected override async Task OnInitializedAsync()\n    {\n        this.GeoBounds = new Rect() { Left = - 150, Top = - 60, Width = 315, Height = 140 };\n\n        this.GeoImagery = new IgbArcGISOnlineMapImagery();\n        this.GeoImagery.MapServerUri = \"https://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer\";\n\n        this.EmployeeList = PersonDataSource.Create(200);\n        this.EmployeeList[0].Background = \"#a8d3fd\";\n        this.EmployeeSelected =  new List<PersonInfo> { this.EmployeeList[0] };\n        this.EmployeeSelectedInfo = this.EmployeeList[0].Name + \" (\" + this.EmployeeList[0].City + \", \" + this.EmployeeList[0].Country + \")\";\n    }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            if (this.ProductivityChart != null)\n            {\n                this.ProductivityChart.DataSource = this.EmployeeList[0].Productivity;\n            }\n        }\n    }\n\n    private void onClick(PersonInfo selectedManager)\n    {\n        this.EmployeeSelected = new List<PersonInfo> { selectedManager };\n        this.EmployeeSelectedInfo = selectedManager.Name + \" (\" + selectedManager.City + \", \" + selectedManager.Country + \")\";\n        this.ProductivityChart.DataSource = selectedManager.Productivity;\n\n        this.ZoomMapToLocationOf(selectedManager);\n\n        foreach(var employee in this.EmployeeList)\n        {\n            if (employee.ID != selectedManager.ID) {\n                employee.Background = \"transparent\";\n            } else {\n                employee.Background = \"#a8d3fd\";\n            }\n        }\n    }\n\n    private void ZoomMapToLocationOf(PersonInfo selectedManager)\n    {\n        var geoZoom = new Rect();\n        geoZoom.Width = 30;\n        geoZoom.Height = 20;\n        geoZoom.Left = selectedManager.Longitude - (geoZoom.Width  / 2);\n        geoZoom.Top  = selectedManager.Latitude  - (geoZoom.Height / 2);\n        this.GeoMap.ZoomToGeographic(geoZoom);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/dock-manager/updating-panes/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDockManagerModule),\n                typeof(IgbDataChartInteractivityModule),\n                typeof(IgbGeographicMapModule),\n                typeof(IgbCategoryChartModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/dock-manager/updating-panes/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/dock-manager/updating-panes/Services/PersonDataSource.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class PersonLocation\n    {\n        public string City { get; set; }\n        public double Latitude  { get; set; }\n        public double Longitude { get; set; }\n\n        private string _Country;\n        public string Country\n        {\n            get { return _Country; }\n            set { if (_Country != value) { OnCountryChanged(value); } }\n        }\n\n        public string CountryFlag { get; set; }\n\n        protected void OnCountryChanged(string countryName)\n        {\n            // syncronizing country name and country flag\n            _Country = countryName;\n            CountryFlag = DataGenerator.GetCountryFlag(countryName);\n            OnPropertyChanged(\"Country\");\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n    }\n\n    public class PersonInfo : PersonLocation, INotifyPropertyChanged\n    {\n        public string ID { get; set; }\n        public string Address { get; set; }\n        public double Age { get; set; }\n        public string Gender { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Name { get; set; }\n        public string Street { get; set; }\n        public string Email { get; set; }\n        public string Phone { get; set; }\n        public string Photo { get; set; }\n        public double Salary { get; set; }\n        public double Sales { get; set; }\n        public string Income { get; set; }\n        public int Index { get; set; }\n        public string Background { get; set; }\n\n        public DateTime Birthday { get; set; }\n        public List<PersonProductivity> Productivity { get; set; }\n\n    }\n\n    public class PersonProductivity\n    {\n        public double Value { get; set; }\n        public string Month { get; set; }\n    }\n\n    public static class PersonDataSource\n    {\n        public static List<PersonInfo> Create(int? count)\n        {\n            if (count == null) count = 100;\n\n            var locations = GetLocations();\n\n            var managers = new List<PersonInfo>();\n            for (int i = 0; i < count; i++)\n            {\n                var age = Math.Round(DataGenerator.GetNumber(20, 40));\n                var gender = DataGenerator.GetGender();\n                var firstName = DataGenerator.GetNameFirst(gender);\n                var lastName = DataGenerator.GetNameLast();\n                var street = DataGenerator.GetStreet();\n                var email = firstName.ToLower() + \"@\" + DataGenerator.GetEmail();\n                var photoPath = DataGenerator.GetPhoto(gender);\n\n                var manager = new PersonInfo\n                {\n                    Index = i,\n                    Age = age,\n                    Birthday = DataGenerator.GetBirthday(),\n                    Email = email,\n                    Gender = gender,\n                    ID = DataGenerator.Pad(1001 + i, 4),\n                    Name = firstName + \" \" + lastName,\n                    Photo = photoPath,\n                    Phone = DataGenerator.GetPhone(),\n                    Salary = DataGenerator.GetNumber(40, 200) * 1000,\n                    Sales = DataGenerator.GetNumber(200, 980) * 1000,\n                    Background = \"Transparent\",\n\n                };\n\n                var location = GetRandom(locations);\n                manager.Address = street + \", \" + location.City;\n                manager.City = location.City;\n                manager.Country = location.Country;\n                manager.Latitude = location.Latitude;\n                manager.Longitude = location.Longitude;\n                manager.Income = DataGenerator.GetIncomeRange(manager.Salary);\n                manager.Productivity = GetProductivity();\n\n                managers.Add(manager);\n            }\n\n            return managers;\n        }\n\n        public static List<PersonProductivity> GetProductivity()\n        {\n            var productivity = new List<PersonProductivity>();\n            var months = new List<string> {\n                \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\n                \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\" };\n\n            var value = 50.0;\n            for (var i = 0; i < months.Count; i++)\n            {\n                value += DataGenerator.GetNumber(-5, 10);\n                var prod = new PersonProductivity\n                {\n                    Value = value,\n                    Month = months[i]\n                };\n                productivity.Add(prod);\n            };\n\n            return productivity;\n        }\n\n        public static PersonLocation GetRandom(List<PersonLocation> array)\n        {\n            var index = (int)Math.Round(DataGenerator.GetNumber(0, array.Count - 1));\n            return array[index];\n        }\n\n        public static List<PersonLocation> GetLocations()\n        {\n            var locations = new List<PersonLocation> {\n                new PersonLocation { Latitude = 54.689, Longitude = 25.276, Country = \"Lithuania\", City = \"Vilnius\" },\n                new PersonLocation { Latitude = 53.900, Longitude = 27.576, Country = \"Belarus\", City = \"Minsk\" },\n                new PersonLocation { Latitude = 53.342, Longitude = -6.257, Country = \"Ireland\", City = \"Dublin\" },\n                new PersonLocation { Latitude = 52.516, Longitude = 13.328, Country = \"Germany\", City = \"Berlin\" },\n                new PersonLocation { Latitude = 52.373, Longitude = 4.895, Country = \"Netherlands\", City = \"Amsterdam\" },\n                new PersonLocation { Latitude = 52.245, Longitude = 21.012, Country = \"Poland\", City = \"Warsaw\" },\n                new PersonLocation { Latitude = 51.488, Longitude = -0.178, Country = \"UK\", City = \"London\" },\n                new PersonLocation { Latitude = 50.448, Longitude = 30.502, Country = \"Ukraine\", City = \"Kiev\" },\n                new PersonLocation { Latitude = 50.106, Longitude = 14.457, Country = \"Czech-Republic\", City = \"Prague\" },\n                new PersonLocation { Latitude = 48.882, Longitude = 2.433, Country = \"France\", City = \"Paris\" },\n                new PersonLocation { Latitude = 48.202, Longitude = 16.321, Country = \"Austria\", City = \"Vienna\" },\n                new PersonLocation { Latitude = 47.515, Longitude = 19.094, Country = \"Hungary\", City = \"Budapest\" },\n                new PersonLocation { Latitude = 46.948, Longitude = 7.446, Country = \"Switzerland\", City = \"Bern\" },\n                new PersonLocation { Latitude = 45.374, Longitude = -75.651, Country = \"Canada\", City = \"Ottawa\" },\n                new PersonLocation { Latitude = 43.255, Longitude = 76.913, Country = \"Kazakhstan\", City = \"Almaty\" },\n                new PersonLocation { Latitude = 42.707, Longitude = 23.332, Country = \"Bulgaria\", City = \"Sofia\" },\n                new PersonLocation { Latitude = 41.722, Longitude = 44.783, Country = \"Georgia\", City = \"Tbilisi\" },\n                new PersonLocation { Latitude = 40.442, Longitude = -3.691, Country = \"Spain\", City = \"Madrid\" },\n                new PersonLocation { Latitude = 39.929, Longitude = 32.853, Country = \"Turkey\", City = \"Ankara\" },\n                new PersonLocation { Latitude = 39.906, Longitude = 116.388, Country = \"China\", City = \"Beijing\" },\n                new PersonLocation { Latitude = 39.029, Longitude = 125.758, Country = \"Korea-North\", City = \"Pyongyang\" },\n                new PersonLocation { Latitude = 38.891, Longitude = -76.954, Country = \"USA\", City = \"Washington\" },\n                new PersonLocation { Latitude = 37.950, Longitude = 58.390, Country = \"Turkmenistan\", City = \"Ashkhabad\" },\n                new PersonLocation { Latitude = 37.542, Longitude = 126.935, Country = \"Korea-South\", City = \"Seoul\" },\n                new PersonLocation { Latitude = 36.819, Longitude = 10.166, Country = \"Tunisia\", City = \"Tunis\" },\n                new PersonLocation { Latitude = 35.774, Longitude = 51.448, Country = \"Iran\", City = \"Tehran\" },\n                new PersonLocation { Latitude = 35.683, Longitude = 139.809, Country = \"Japan\", City = \"Tokyo\" },\n                new PersonLocation { Latitude = 34.531, Longitude = 69.137, Country = \"Afghanistan\", City = \"Kabul\" },\n                new PersonLocation { Latitude = 33.718, Longitude = 73.061, Country = \"Pakistan\", City = \"Islamabad\" },\n                new PersonLocation { Latitude = 33.519, Longitude = 36.313, Country = \"Syria\", City = \"Damascus\" },\n                new PersonLocation { Latitude = 33.334, Longitude = 44.398, Country = \"Iraq\", City = \"Baghdad\" },\n                new PersonLocation { Latitude = 31.949, Longitude = 35.933, Country = \"Jordan\", City = \"Amman\" },\n                new PersonLocation { Latitude = 30.078, Longitude = 31.251, Country = \"Egypt\", City = \"Cairo\" },\n                new PersonLocation { Latitude = 28.569, Longitude = 77.217, Country = \"India\", City = \"New Delhi\" },\n                new PersonLocation { Latitude = 27.712, Longitude = 85.313, Country = \"Nepal\", City = \"Kathmandu\" },\n                new PersonLocation { Latitude = 25.204, Longitude = 51.497, Country = \"Qatar\", City = \"Doha\" },\n                new PersonLocation { Latitude = 25.035, Longitude = 121.507, Country = \"Taiwan\", City = \"Taipei\" },\n                new PersonLocation { Latitude = 23.710, Longitude = 90.407, Country = \"Bangladesh\", City = \"Dhaka\" },\n                new PersonLocation { Latitude = 21.032, Longitude = 105.820, Country = \"Vietnam\", City = \"Hanoi\" },\n                new PersonLocation { Latitude = 19.427, Longitude = -99.128, Country = \"Mexico\", City = \"Mexico City\" },\n                new PersonLocation { Latitude = 18.527, Longitude = -72.343, Country = \"Haiti\", City = \"Port-au-Prince\" },\n                new PersonLocation { Latitude = 18.016, Longitude = -76.797, Country = \"Jamaica\", City = \"Kingston\" },\n                new PersonLocation { Latitude = 16.872, Longitude = 96.125, Country = \"Myanmar\", City = \"Rangoon\" },\n                new PersonLocation { Latitude = 15.361, Longitude = 44.210, Country = \"Yemen\", City = \"Sanaa\" },\n                new PersonLocation { Latitude = 14.618, Longitude = -90.525, Country = \"Guatemala\", City = \"Guatemala\" },\n                new PersonLocation { Latitude = 14.099, Longitude = -87.203, Country = \"Honduras\", City = \"Tegucigalpa\" },\n                new PersonLocation { Latitude = 13.746, Longitude = 100.553, Country = \"Thailand\", City = \"Bangkok\" },\n                new PersonLocation { Latitude = 13.605, Longitude = 2.083, Country = \"Niger\", City = \"Niamey\" },\n                new PersonLocation { Latitude = 12.653, Longitude = -7.986, Country = \"Mali\", City = \"Bamako\" },\n                new PersonLocation { Latitude = 12.151, Longitude = -86.273, Country = \"Nicaragua\", City = \"Managua\" },\n                new PersonLocation { Latitude = 10.496, Longitude = -66.898, Country = \"Venezuela\", City = \"Caracas\" },\n                new PersonLocation { Latitude = 9.930, Longitude = -84.079, Country = \"Costa-Rica\", City = \"San Jose\" },\n                new PersonLocation { Latitude = 5.559, Longitude = -0.201, Country = \"Ghana\", City = \"Accra\" },\n                new PersonLocation { Latitude = 5.325, Longitude = -4.022, Country = \"Ivory-Coast\", City = \"Abidjan\" },\n                new PersonLocation { Latitude = 4.630, Longitude = -74.081, Country = \"Colombia\", City = \"Bogota\" },\n                new PersonLocation { Latitude = 3.865, Longitude = 11.514, Country = \"Cameroon\", City = \"Yaounde\" },\n            };\n            return locations;\n        }\n\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/layouts/dock-manager/updating-panes/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}