{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/grid/column-data-types/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n@inject IJSRuntime JS\n\n<div class=\"container vertical\">\n\n    <div class=\"container vertical fill\">\n        <IgbGrid\n        AutoGenerate=\"false\"\n        Id=\"grid\"\n        Data=\"InvoicesDataExtendedDates\"\n        Locale=\"EN\"\n        AllowFiltering=\"true\"\n        FilterMode=\"FilterMode.ExcelStyleFilter\"\n        DisplayDensity=\"DisplayDensity.Compact\"\n        Name=\"grid\"\n        @ref=\"grid\">\n            <IgbColumn\n            Field=\"ProductName\"\n            Header=\"Prod. Name\"\n            Sortable=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            HasSummary=\"true\"\n            Width=\"120px\"\n            DataType=\"GridColumnDataType.String\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"UnitPrice\"\n            Header=\"Unit Price\"\n            Width=\"120px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Number\"\n            PipeArgs=\"ColumnPipeArgs1\"\n            Name=\"column1\"\n            @ref=\"column1\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"OrderFullDate\"\n            Header=\"Order Full Date\"\n            Width=\"300px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.DateTime\"\n            PipeArgs=\"ColumnPipeArgs2\"\n            Name=\"column2\"\n            @ref=\"column2\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"OrderDate\"\n            Header=\"Order Date\"\n            Width=\"160px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Date\"\n            PipeArgs=\"ColumnPipeArgs3\"\n            Name=\"column3\"\n            @ref=\"column3\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"OrderDateDelay\"\n            Header=\"Order Time\"\n            Width=\"120px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Time\"\n            PipeArgs=\"ColumnPipeArgs4\"\n            Name=\"column4\"\n            @ref=\"column4\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"UnitsInStock\"\n            Header=\"Stock Value\"\n            Width=\"120px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Currency\"\n            PipeArgs=\"ColumnPipeArgs5\"\n            Name=\"column5\"\n            @ref=\"column5\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"UnitsOnOrder\"\n            Header=\"% Change\"\n            Width=\"120px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Percent\"\n            PipeArgs=\"ColumnPipeArgs6\"\n            Name=\"column6\"\n            @ref=\"column6\">\n            </IgbColumn>\n\n            <IgbColumn\n            Field=\"Discontinued\"\n            Header=\"Discontinued\"\n            Width=\"160px\"\n            Sortable=\"true\"\n            HasSummary=\"true\"\n            Editable=\"true\"\n            Resizable=\"true\"\n            DataType=\"GridColumnDataType.Boolean\">\n            </IgbColumn>\n\n        </IgbGrid>\n\n    </div>\n\n</div>\n\n@code {\n    \n    protected override async Task OnInitializedAsync()\n    {\n\n    }\n\n    private Action BindElements { get; set; }\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        var grid = this.grid;\n        var column1 = this.column1;\n        var column2 = this.column2;\n        var column3 = this.column3;\n        var column4 = this.column4;\n        var column5 = this.column5;\n        var column6 = this.column6;\n    }\n\n    private IgbGrid grid;\n    private IgbColumn column1;\n    private IgbColumnPipeArgs _columnPipeArgs1 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs1\n    {\n        get\n        {\n            if (this._columnPipeArgs1 == null)\n            {\n                var columnPipeArgs1 = new IgbColumnPipeArgs();\n                columnPipeArgs1.DigitsInfo = \"1.4-4\";\n                columnPipeArgs1.CurrencyCode = \"\";\n                this._columnPipeArgs1 = columnPipeArgs1;\n            }\n            return this._columnPipeArgs1;\n        }\n    }\n    private IgbColumn column2;\n    private IgbColumnPipeArgs _columnPipeArgs2 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs2\n    {\n        get\n        {\n            if (this._columnPipeArgs2 == null)\n            {\n                var columnPipeArgs2 = new IgbColumnPipeArgs();\n                columnPipeArgs2.Format = \"long\";\n                columnPipeArgs2.Timezone = \"UTC+0\";\n                this._columnPipeArgs2 = columnPipeArgs2;\n            }\n            return this._columnPipeArgs2;\n        }\n    }\n    private IgbColumn column3;\n    private IgbColumnPipeArgs _columnPipeArgs3 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs3\n    {\n        get\n        {\n            if (this._columnPipeArgs3 == null)\n            {\n                var columnPipeArgs3 = new IgbColumnPipeArgs();\n                columnPipeArgs3.Format = \"mediumDate\";\n                this._columnPipeArgs3 = columnPipeArgs3;\n            }\n            return this._columnPipeArgs3;\n        }\n    }\n    private IgbColumn column4;\n    private IgbColumnPipeArgs _columnPipeArgs4 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs4\n    {\n        get\n        {\n            if (this._columnPipeArgs4 == null)\n            {\n                var columnPipeArgs4 = new IgbColumnPipeArgs();\n                columnPipeArgs4.Format = \"shortTime\";\n                columnPipeArgs4.Timezone = \"UTC+0\";\n                this._columnPipeArgs4 = columnPipeArgs4;\n            }\n            return this._columnPipeArgs4;\n        }\n    }\n    private IgbColumn column5;\n    private IgbColumnPipeArgs _columnPipeArgs5 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs5\n    {\n        get\n        {\n            if (this._columnPipeArgs5 == null)\n            {\n                var columnPipeArgs5 = new IgbColumnPipeArgs();\n                columnPipeArgs5.CurrencyCode = \"\";\n                columnPipeArgs5.DigitsInfo = \"1.4-4\";\n                this._columnPipeArgs5 = columnPipeArgs5;\n            }\n            return this._columnPipeArgs5;\n        }\n    }\n    private IgbColumn column6;\n    private IgbColumnPipeArgs _columnPipeArgs6 = null;\n    public IgbColumnPipeArgs ColumnPipeArgs6\n    {\n        get\n        {\n            if (this._columnPipeArgs6 == null)\n            {\n                var columnPipeArgs6 = new IgbColumnPipeArgs();\n                columnPipeArgs6.CurrencyCode = \"\";\n                columnPipeArgs6.DigitsInfo = \"1.4-4\";\n                this._columnPipeArgs6 = columnPipeArgs6;\n            }\n            return this._columnPipeArgs6;\n        }\n    }\n\n    private InvoicesDataExtendedDates _invoicesDataExtendedDates = null;\n    public InvoicesDataExtendedDates InvoicesDataExtendedDates\n    {\n        get\n        {\n            if (_invoicesDataExtendedDates == null)\n            {\n                _invoicesDataExtendedDates = new InvoicesDataExtendedDates();\n            }\n            return _invoicesDataExtendedDates;\n        }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/grid/column-data-types/InvoicesDataExtendedDates.cs",
    "content": "//begin data\n    using System;\n    using System.Collections.Generic;\n    using System.Text.Json;\n    using System.Collections.ObjectModel;\n    using IgniteUI.Blazor.Controls;\n\n    public class InvoicesDataExtendedDates : List<Invoice>\n    {\n\n        public InvoicesDataExtendedDates()\n        {\n\n            List<Invoice> data = new List<Invoice>()\n            {\n                new Invoice()\n                {\n                    ProductID = 1,\n                    ProductName = \"Chai\",\n                    SupplierID = 1,\n                    CategoryID = 1,\n                    QuantityPerUnit = \"10 boxes x 20 bags\",\n                    UnitPrice= 18.0000,\n                    UnitsInStock= 39,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 10,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2012-02-12\"),\n                    OrderDateDelay= DateTime.Parse(\"2012-02-12\") + new TimeSpan(3,20,0),\n                    OrderFullDate= DateTime.Parse(\"2012-02-12\") + new TimeSpan(3,20,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 2,\n                    ProductName= \"Chang\",\n                    SupplierID= 1,\n                    CategoryID= 1,\n                    QuantityPerUnit= \"24 - 12 oz bottles\",\n                    UnitPrice= 19.0000,\n                    UnitsInStock= 17,\n                    UnitsOnOrder= 0.040,\n                    ReorderLevel= 25,\n                    Discontinued= true,\n                    OrderDate= DateTime.Parse(\"2003-03-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2003-03-17\") + new TimeSpan(5,40,0),\n                    OrderFullDate=  DateTime.Parse(\"2003-03-17\") + new TimeSpan(5,40,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 3,\n                    ProductName= \"Aniseed Syrup\",\n                    SupplierID= 1,\n                    CategoryID= 2,\n                    QuantityPerUnit= \"12 - 550 ml bottles\",\n                    UnitPrice= 10.0000,\n                    UnitsInStock= 13,\n                    UnitsOnOrder= 0.070,\n                    ReorderLevel= 25,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2006-03-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2006-03-17\") + new TimeSpan(1,55,0),\n                    OrderFullDate= DateTime.Parse(\"2006-03-17\") + new TimeSpan(1,55,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 4,\n                    ProductName= \"Chef Antons Cajun Seasoning\",\n                    SupplierID= 2,\n                    CategoryID= 2,\n                    QuantityPerUnit= \"48 - 6 oz jars\",\n                    UnitPrice= 22.0000,\n                    UnitsInStock= 53,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 0,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2016-03-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2016-03-17\") + new TimeSpan(11,11,0),\n                    OrderFullDate= DateTime.Parse(\"2016-03-17\") + new TimeSpan(11,11,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 5,\n                    ProductName= \"Chef Antons Gumbo Mix\",\n                    SupplierID= 2,\n                    CategoryID= 2,\n                    QuantityPerUnit= \"36 boxes\",\n                    UnitPrice= 21.3500,\n                    UnitsInStock= 0,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 0,\n                    Discontinued= true,\n                    OrderDate= DateTime.Parse(\"2011-11-11\"),\n                    OrderDateDelay= DateTime.Parse(\"2011-11-11\") + new TimeSpan(11,11,0),\n                    OrderFullDate= DateTime.Parse(\"2011-11-11\") + new TimeSpan(11,11,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 6,\n                    ProductName= \"Grandmas Boysenberry Spread\",\n                    SupplierID= 3,\n                    CategoryID= 2,\n                    QuantityPerUnit= \"12 - 8 oz jars\",\n                    UnitPrice= 25.0000,\n                    UnitsInStock= 0,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 25,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2017-12-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2017-12-17\") + new TimeSpan(2,15,0),\n                    OrderFullDate= DateTime.Parse(\"2017-12-17\") + new TimeSpan(2,15,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 7,\n                    ProductName= \"Uncle Bobs Organic Dried Pears\",\n                    SupplierID= 3,\n                    CategoryID= 7,\n                    QuantityPerUnit= \"12 - 1 lb pkgs.\",\n                    UnitPrice= 30.0000,\n                    UnitsInStock= 150,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 10,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2016-07-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2016-07-17\") + new TimeSpan(2,15,0),\n                    OrderFullDate= DateTime.Parse(\"2016-07-17\") + new TimeSpan(2,15,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 8,\n                    ProductName= \"Northwoods Cranberry Sauce\",\n                    SupplierID= 3,\n                    CategoryID= 2,\n                    QuantityPerUnit= \"12 - 12 oz jars\",\n                    UnitPrice= 40.0000,\n                    UnitsInStock= 6,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 0,\n                    Discontinued= false,\n                    OrderDate= DateTime.Parse(\"2018-01-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2018-01-17\") + new TimeSpan(2,15,0),\n                    OrderFullDate= DateTime.Parse(\"2018-01-17\") + new TimeSpan(2,15,0)\n                },\n                new Invoice()\n                {\n                    ProductID= 9,\n                    ProductName= \"Mishi Kobe Niku\",\n                    SupplierID= 4,\n                    CategoryID= 6,\n                    QuantityPerUnit= \"18 - 500 g pkgs.\",\n                    UnitPrice= 97.0000,\n                    UnitsInStock= 29,\n                    UnitsOnOrder= 0.030,\n                    ReorderLevel= 0,\n                    Discontinued= true,\n                    OrderDate= DateTime.Parse(\"2010-02-17\"),\n                    OrderDateDelay= DateTime.Parse(\"2010-02-17\") + new TimeSpan(8,10,0),\n                    OrderFullDate= DateTime.Parse(\"2010-02-17\") + new TimeSpan(8,10,0)\n                }\n            };\n\n            this.AddRange(data);\n        }\n\n    }\n\n    public class Invoice\n    {\n        public int ProductID { get; set; }\n        public string ProductName { get; set; }\n        public int SupplierID { get; set; }\n        public int CategoryID { get; set; }\n        public string QuantityPerUnit { get; set; }\n        public double UnitPrice { get; set; }\n        public int UnitsInStock { get; set; }\n        public double UnitsOnOrder { get; set; }\n        public int ReorderLevel { get; set; }\n        public bool Discontinued { get; set; }\n        public DateTime OrderDate { get; set; }\n        public DateTime? OrderDateDelay { get; set; }\n        public DateTime? OrderFullDate { get; set; }\n    }\n\n    //end data",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/grid/column-data-types/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbGridModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/grid/column-data-types/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}