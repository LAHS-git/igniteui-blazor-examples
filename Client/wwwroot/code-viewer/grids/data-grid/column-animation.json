{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-animation/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <label class=\"options-item\" style=\"width: 9rem\">Adding Animation: </label>\n        <select class=\"options-item\" style=\"width: 9rem\" @bind=\"ShowingAddingAnimation\">\n            <option>@ColumnShowingAnimationMode.Auto</option>\n            <option>@ColumnShowingAnimationMode.None</option>\n            <option>@ColumnShowingAnimationMode.SlideFromLeft</option>\n            <option>@ColumnShowingAnimationMode.SlideFromRight</option>\n            <option>@ColumnShowingAnimationMode.SlideFromTop</option>\n            <option>@ColumnShowingAnimationMode.SlideFromBottom</option>\n            <option>@ColumnShowingAnimationMode.FadeIn</option>\n            <option>@ColumnShowingAnimationMode.SlideFromLeftAndFadeIn</option>\n            <option>@ColumnShowingAnimationMode.SlideFromRightAndFadeIn</option>\n            <option>@ColumnShowingAnimationMode.SlideFromTopAndFadeIn</option>\n            <option>@ColumnShowingAnimationMode.SlideFromBottomAndFadeIn</option>\n        </select>\n        <span class=\"options-item\" style=\"width: 9rem\">Exchange Animation: </span>\n        <select class=\"options-item\" style=\"width: 9rem\" @bind=\"ExchangeAnimation\">\n            <option>@ColumnExchangingAnimationMode.Auto</option>\n            <option>@ColumnExchangingAnimationMode.None</option>\n            <option>@ColumnExchangingAnimationMode.SlideToLeft</option>\n            <option>@ColumnExchangingAnimationMode.SlideToRight</option>\n            <option>@ColumnExchangingAnimationMode.SlideToTop</option>\n            <option>@ColumnExchangingAnimationMode.SlideToBottom</option>\n            <option>@ColumnExchangingAnimationMode.Crossfade</option>\n            <option>@ColumnExchangingAnimationMode.SlideToLeftAndCrossfade</option>\n            <option>@ColumnExchangingAnimationMode.SlideToRightAndCrossfade</option>\n            <option>@ColumnExchangingAnimationMode.SlideToTopAndCrossfade</option>\n            <option>@ColumnExchangingAnimationMode.SlideToBottomAndCrossfade</option>\n        </select>\n    </div>\n    <div class=\"options horizontal\">\n        <span class=\"options-item\" style=\"width: 9rem\">Hiding Animation: </span>\n        <select class=\"options-item\" style=\"width: 9rem\" @bind=\"HidingAnimation\">\n            <option>@ColumnHidingAnimationMode.Auto</option>\n            <option>@ColumnHidingAnimationMode.None</option>\n            <option>@ColumnHidingAnimationMode.SlideToLeft</option>\n            <option>@ColumnHidingAnimationMode.SlideToRight</option>\n            <option>@ColumnHidingAnimationMode.SlideToTop</option>\n            <option>@ColumnHidingAnimationMode.SlideToBottom</option>\n            <option>@ColumnHidingAnimationMode.FadeOut</option>\n            <option>@ColumnHidingAnimationMode.SlideToLeftAndFadeOut</option>\n            <option>@ColumnHidingAnimationMode.SlideToRightAndFadeOut</option>\n            <option>@ColumnHidingAnimationMode.SlideToTopAndFadeOut</option>\n            <option>@ColumnHidingAnimationMode.SlideToBottomAndFadeOut</option>\n        </select>\n        <span class=\"options-item\" style=\"width: 9rem\">Updating Animation: </span>\n        <select class=\"options-item\" style=\"width: 9rem\" @bind=\"UpdatingAnimation\">\n            <option>@ColumnPropertyUpdatingAnimationMode.Auto</option>\n            <option>@ColumnPropertyUpdatingAnimationMode.None</option>\n            <option>@ColumnPropertyUpdatingAnimationMode.Interpolate</option>\n            <option>@ColumnPropertyUpdatingAnimationMode.InterpolateDeep</option>\n        </select>\n    </div>\n    <div class=\"options horizontal\">\n        <span class=\"options-item\" style=\"width: 9rem\">Moving Animation: </span>\n        <select class=\"options-item\" style=\"width: 9rem\" @bind=\"MovingAnimation\">\n            <option>@ColumnMovingAnimationMode.Auto</option>\n            <option>@ColumnMovingAnimationMode.None</option>\n            <option>@ColumnMovingAnimationMode.SlideOver</option>\n        </select>\n        <button class=\"options-item\" @onclick=\"OnHideClick\">Hide Column</button>\n        <button class=\"options-item\" @onclick=\"OnShowClick\">Show Column</button>\n        <button class=\"options-item\" @onclick=\"OnReloadClick\">Reload Grid</button>\n    </div>\n\n    <div class=\"container vertical\" style=\"height: calc(100% - 125px)\">\n        @if (Data != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\" @ref=\"DataGridRef\"\n                      DefaultColumnMinWidth=\"100\"\n                      ColumnAddingAnimationMode=\"@ShowingAddingAnimation\"\n                      ColumnShowingAnimationMode=\"@ShowingAddingAnimation\"\n                      ColumnExchangingAnimationMode=\"@ExchangeAnimation\"\n                      ColumnHidingAnimationMode=\"@HidingAnimation\"\n                      ColumnMovingAnimationMode=\"@MovingAnimation\"\n                      ColumnPropertyUpdatingAnimationMode=\"@UpdatingAnimation\"\n                      AutoGenerateColumns=\"false\"\n                      DataSource=\"Data\"\n                      IsColumnOptionsEnabled=\"true\">\n                    <IgbTextColumn Field=\"Name\" Width=\"@(\"*>170\")\" />\n                    <IgbTextColumn Field=\"Street\" HeaderText=\"Address\" Width=\"@(\"*>150\")\" />\n                    <IgbTextColumn Field=\"City\" Width=\"@(\"*>120\")\" />\n                    <IgbNumericColumn Field=\"Salary\" Width=\"@(\"*>120\")\" PositivePrefix=\"$\" ShowGroupingSeparator=\"true\" />\n                    <IgbDateTimeColumn Field=\"Birthday\" Width=\"@(\"*>170\")\" />\n                    <IgbTextColumn Field=\"Country\" Width=\"@(\"*>120\")\" />\n                    <IgbNumericColumn Field=\"Sales\" Width=\"@(\"*>120\")\" PositivePrefix=\"$\" ShowGroupingSeparator=\"true\" />\n                    <IgbNumericColumn Field=\"Age\" Width=\"@(\"*>120\")\" />\n                    <IgbTextColumn Field=\"Email\" Width=\"@(\"*>120\")\" />\n                </IgbDataGrid>\n            </div>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<Employee> Data;\n    private IgbDataGrid DataGridRef;\n\n    private ColumnShowingAnimationMode ShowingAddingAnimation = ColumnShowingAnimationMode.SlideFromLeft;\n    private ColumnExchangingAnimationMode ExchangeAnimation = ColumnExchangingAnimationMode.Crossfade;\n    private ColumnHidingAnimationMode HidingAnimation = ColumnHidingAnimationMode.FadeOut;\n    private ColumnPropertyUpdatingAnimationMode UpdatingAnimation = ColumnPropertyUpdatingAnimationMode.Interpolate;\n    private ColumnMovingAnimationMode MovingAnimation = ColumnMovingAnimationMode.SlideOver;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = EmployeeData.Create(100, false);\n    }\n\n    private void OnHideClick(MouseEventArgs e)\n    {\n        foreach (IgbDataGridColumn col in this.DataGridRef.ActualColumns)\n        {\n            if (!col.IsHidden)\n            {\n                col.IsHidden = true;\n                break;\n            }\n        }\n    }\n\n    private void OnReloadClick(MouseEventArgs e)\n    {\n        List<Employee> newData = EmployeeData.Create(100, false);\n        for (int i = 0; i < newData.Count; i++)\n        {\n            Employee oldData = this.Data[i];\n            this.Data[i].Salary = newData[i].Salary;\n            this.DataGridRef.NotifySetItem(this.Data, i, oldData, newData[i]);\n        }\n    }\n\n    private void OnShowClick(MouseEventArgs e)\n    {\n        IEnumerable<IgbDataGridColumn> revColumns = this.DataGridRef.ActualColumns.Reverse();\n\n        foreach (IgbDataGridColumn col in revColumns)\n        {\n            if (col.IsHidden)\n            {\n                col.IsHidden = false;\n                break;\n            }\n        }\n\n        this.DataGridRef.ActualColumns.Reverse();\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-animation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbGridColumnOptionsModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-animation/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-animation/Services/EmployeeData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class Employee : INotifyPropertyChanged\n    {\n        public string ID { get; set; }\n        public string Address { get; set; }\n        public double Age { get; set; }\n        public string Gender { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Name { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Email { get; set; }\n        public string Phone { get; set; }\n        public string Photo { get; set; }\n        public double Salary { get; set; }\n        public double Sales { get; set; }\n        public string Income { get; set; }\n        public int Index { get; set; }\n\n        public DateTime Birthday { get; set; }\n        public List<Productivity> Productivity { get; set; }\n\n        private string _Country;\n        public string Country\n        {\n            get { return _Country; }\n            set { if (_Country != value) { OnCountryChanged(value); } }\n        }\n\n        public string CountryFlag { get; set; }\n\n        protected void OnCountryChanged(string countryName)\n        {\n            // syncronizing country name and country flag\n            _Country = countryName;\n            CountryFlag = DataGenerator.GetCountryFlag(countryName);\n            City = DataGenerator.GetCity(countryName);\n            OnPropertyChanged(\"Country\");\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n\n    public class Productivity\n    {\n        public double Value { get; set; }\n        public int Week { get; set; }\n    }\n\n    public static class EmployeeData\n    {\n        public static List<Employee> Create(int? count, bool? useProductivity)\n        {\n            if (count == null) count = 100;\n\n            var employees = new List<Employee>();\n            for (int i = 0; i < count; i++)\n            {\n                var age = Math.Round(DataGenerator.GetNumber(20, 40));\n                var gender = DataGenerator.GetGender();\n                var firstName = DataGenerator.GetNameFirst(gender);\n                var lastName = DataGenerator.GetNameLast();\n                var street = DataGenerator.GetStreet();\n                var country = DataGenerator.GetCountry();\n                var city = DataGenerator.GetCity(country);\n                var email = firstName.ToLower() + \"@\" + DataGenerator.GetEmail();\n                var photoPath = DataGenerator.GetPhoto(gender);\n\n                var employee = new Employee\n                {\n                    Index = i,\n                    Address = street + \", \" + city,\n                    Age = age,\n                    Birthday = DataGenerator.GetBirthday(),\n                    City = city,\n                    Email = email,\n                    Gender = gender,\n                    ID = DataGenerator.Pad(1001 + i, 4),\n                    FirstName = firstName,\n                    LastName = lastName,\n                    Name = firstName + \" \" + lastName,\n                    Photo = photoPath,\n                    Phone = DataGenerator.GetPhone(),\n                    Street = DataGenerator.GetStreet(),\n                    Salary = DataGenerator.GetNumber(40, 200) * 1000,\n                    Sales = DataGenerator.GetNumber(200, 980) * 1000,\n                };\n                employee.Country = country;\n\n                employee.Income = DataGenerator.GetIncomeRange(employee.Salary);\n\n                if (useProductivity.HasValue && useProductivity.Value)\n                {\n                    employee.Productivity = GetProductivity(52);\n                }\n                employees.Add(employee);\n            }\n\n            return employees;\n        }\n\n        public static List<Productivity> GetProductivity(int weekCount)\n        {\n            var productivity = new List<Productivity>();\n\n            for (var w = 1; w <= weekCount; w++)\n            {\n                var value = DataGenerator.GetNumber(-50, 50);\n                var prod = new Productivity\n                {\n                    Value = value,\n                    Week = w\n                };\n                productivity.Add(prod);\n            };\n\n            return productivity;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-animation/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}