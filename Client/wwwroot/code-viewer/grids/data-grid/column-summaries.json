{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n;\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-item\">Summary Scope:</span>\n        <select class=\"options-item\" @bind=\"GridSummaryScope\">\n            <option>@SummaryScope.Root</option>\n            <option>@SummaryScope.Groups</option>\n            <option>@SummaryScope.Both</option>\n            <option>@SummaryScope.None</option>\n        </select>\n        <span class=\"options-item\" >Group Summary Display Mode:</span>\n        <select class=\"options-item\" @bind=\"GridGroupSummaryDisplayMode\">\n            <option>@GroupSummaryDisplayMode.List</option>\n            <option>@GroupSummaryDisplayMode.Cells</option>\n            <option>@GroupSummaryDisplayMode.RowTop</option>\n            <option>@GroupSummaryDisplayMode.RowBottom</option>\n            <option>@GroupSummaryDisplayMode.None</option>\n        </select>\n    </div>\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                      @ref=\"@DataGridRef\"\n                      SummaryScope=\"@GridSummaryScope\"\n                      GroupSummaryDisplayMode=\"@GridGroupSummaryDisplayMode\"\n                      AutoGenerateColumns=\"false\"\n                      IsGroupCollapsable=\"true\"\n                      GroupHeaderDisplayMode=\"@GroupHeaderDisplayMode.Combined\"\n                      IsColumnOptionsEnabled=\"true\"\n                      DataSource=\"Data\">\n                    <IgbNumericColumn Field=\"ID\" Width=\"@(\"*>120\")\" HeaderText=\"ID\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" />\n                    <IgbTextColumn Field=\"ProductName\" Width=\"@(\"*>130\")\" HeaderText=\"Product\" />\n                    <IgbNumericColumn Field=\"BundlePrice\" PositivePrefix=\"$\" Width=\"@(\"*>120\")\" ShowGroupingSeparator=\"true\" HeaderText=\"Price\" />\n                    <IgbNumericColumn Field=\"OrderItems\" Width=\"@(\"*>140\")\" HeaderText=\"Orders\" />\n                    <IgbNumericColumn Field=\"OrderValue\" Width=\"@(\"*>160\")\" ShowGroupingSeparator=\"true\" HeaderText=\"Order Totals\" PositivePrefix=\"$\" />\n                    <IgbDateTimeColumn Field=\"OrderDate\" Width=\"@(\"*>150\")\" HeaderText=\"Order Date\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Right\" />\n                    <IgbNumericColumn Field=\"Profit\" Width=\"@(\"*>140\")\" ShowGroupingSeparator=\"true\" HeaderText=\"Profit\" PositivePrefix=\"$\" />\n                    <IgbTextColumn Field=\"Country\" Width=\"@(\"*>170\")\" HeaderText=\"Ship Country\" />\n                </IgbDataGrid>\n            </div>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<SaleInfo> Data;\n    private SummaryScope GridSummaryScope;\n    private GroupSummaryDisplayMode GridGroupSummaryDisplayMode;\n\n    private IgbDataGrid _grid;\n    private IgbDataGrid DataGridRef\n    {\n        get { return _grid; }\n        set\n        {\n            _grid = value;\n            this.OnDataGridRef();\n            StateHasChanged();\n        }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = SalesDataService.Create(50);\n\n        this.GridSummaryScope = SummaryScope.Root;\n        this.GridGroupSummaryDisplayMode = GroupSummaryDisplayMode.RowBottom;\n    }\n\n    private void OnDataGridRef()\n    {\n        var productGroup = new IgbColumnGroupDescription()\n        {\n            Field = \"ProductName\",\n            DisplayName = \"ProductName\"\n        };\n\n        var productCount = new IgbColumnSummaryDescription()\n        {\n            Field = \"ProductName\",\n            Operand = DataSourceSummaryOperand.Count\n        };\n\n        var priceMin = new IgbColumnSummaryDescription()\n        {\n            Field = \"BundlePrice\",\n            Operand = DataSourceSummaryOperand.Min\n        };\n\n        var priceMax = new IgbColumnSummaryDescription()\n        {\n            Field = \"BundlePrice\",\n            Operand = DataSourceSummaryOperand.Max\n        };\n\n        var orderSum = new IgbColumnSummaryDescription()\n        {\n            Field = \"OrderItems\",\n            Operand = DataSourceSummaryOperand.Sum\n        };\n\n        var orderValueSum = new IgbColumnSummaryDescription()\n        {\n            Field = \"OrderValue\",\n            Operand = DataSourceSummaryOperand.Sum\n        };\n\n        var orderValueAvg = new IgbColumnSummaryDescription()\n        {\n            Field = \"OrderValue\",\n            Operand = DataSourceSummaryOperand.Average\n        };\n\n        var orderDateMin = new IgbColumnSummaryDescription()\n        {\n            Field = \"OrderDate\",\n            Operand = DataSourceSummaryOperand.Min,\n            CalculatorDisplayName = \"First\"\n        };\n\n        var orderDateMax = new IgbColumnSummaryDescription()\n        {\n            Field = \"OrderDate\",\n            Operand = DataSourceSummaryOperand.Max,\n            CalculatorDisplayName = \"Last\"\n        };\n\n        var sum1 = new IgbColumnSummaryDescription()\n        {\n            Field = \"Profit\",\n            Operand = DataSourceSummaryOperand.Sum\n        };\n\n        var avg2 = new IgbColumnSummaryDescription()\n        {\n            Field = \"Profit\",\n            Operand = DataSourceSummaryOperand.Average\n        };\n\n        //var countryCustomSummary = new IgbColumnSummaryDescription()\n        //{\n        //    Field = \"Country\",\n        //    Operand = DataSourceSummaryOperand.Custom,\n        //    //ProvideCalculatorScript = \"onProvideCalculator\" // <= This seems like what needs to be done, but how do you specify the logic that the calculator uses?\n        //};\n\n        //TODO CUSTOM SUMMARY\n\n        this.DataGridRef.GroupDescriptions.Add(productGroup);\n\n        this.DataGridRef.SummaryDescriptions.Add(productCount);\n        this.DataGridRef.SummaryDescriptions.Add(priceMin);\n        this.DataGridRef.SummaryDescriptions.Add(priceMax);\n        this.DataGridRef.SummaryDescriptions.Add(orderSum);\n        this.DataGridRef.SummaryDescriptions.Add(orderValueSum);\n        this.DataGridRef.SummaryDescriptions.Add(orderValueAvg);\n        this.DataGridRef.SummaryDescriptions.Add(orderDateMin);\n        this.DataGridRef.SummaryDescriptions.Add(orderDateMax);\n        this.DataGridRef.SummaryDescriptions.Add(sum1);\n        this.DataGridRef.SummaryDescriptions.Add(avg2);\n        //this.DataGridRef.SummaryDescriptions.Add(countryCustomSummary);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbGridColumnOptionsModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/Services/SalesDataService.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class SaleInfo\n    {\n        public DateTime OrderDate { get; set; }\n        public string ID { get; set; }\n        public string ProductName { get; set; }\n        public double ProductPrice { get; set; }\n        public double BundlePrice { get; set; }\n        public double Margin { get; set; }\n        public double OrderItems { get; set; }\n        public double OrderValue { get; set; }\n        public double Profit { get; set; }\n        public string Country { get; set; }\n        public string CountryFlag { get; set; }\n        public string City { get; set; }\n        public string Status { get; set; }\n    }\n\n    public class SalesDataService\n    {\n        public static List<SaleInfo> Create(int? count)\n        {\n            if (count == null) count = 100;\n\n            string[] names = {\n                \"Intel CPU\", \"AMD CPU\",\n                \"Intel Motherboard\", \"AMD Motherboard\", \"NVIDIA Motherboard\",\n                \"NVIDIA GPU\", \"GIGABYTE GPU\", \"Asus GPU\", \"AMD GPU\", \"MSI GPU\",\n                \"Corsair Memory\", \"Patriot Memory\", \"Skill Memory\",\n                \"Samsung HDD\", \"WD HDD\", \"Seagate HDD\", \"Intel HDD\",\n                \"Samsung SSD\", \"WD SSD\", \"Seagate SSD\", \"Intel SSD\",\n                \"Samsung Monitor\", \"Asus Monitor\", \"LG Monitor\", \"HP Monitor\" };\n            string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\" };\n            string[] status = { \"Packing\", \"Shipped\", \"Delivered\" };\n\n            var sales = new List<SaleInfo>();\n            for (var i = 0; i < count; i++)\n            {\n                var price = DataGenerator.GetNumber(100, 900);\n                var items = DataGenerator.GetNumber(10, 80);\n                var value = price * items;\n                var margin = DataGenerator.GetNumber(3, 10);\n                var profit = Math.Round((price * margin / 100) * items);\n                var country = DataGenerator.GetItem(countries);\n                var city = DataGenerator.GetCity(country);\n\n                sales.Add(new SaleInfo\n                {\n                    ID = DataGenerator.Pad(1001 + i, 4),\n                    BundlePrice = price,\n                    ProductPrice = price,\n                    Margin = margin,\n                    OrderDate = DataGenerator.GetDate(),\n                    OrderItems = items,\n                    OrderValue = value,\n                    ProductName = DataGenerator.GetItem(names),\n                    Profit = profit,\n                    City = city,\n                    Country = country,\n                    CountryFlag = DataGenerator.GetCountryFlag(country),\n                    Status = DataGenerator.GetItem(status)\n                });\n            }\n            return sales;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/wwwroot/DataGridColumnSummaries.js",
    "content": "ï»¿function onProvideCalculator(grid, args) {\r\n\r\n    args.setCalculator(null);\r\n\r\n}\r\n\r\nigRegisterScript(\"onProvideCalculator\", onProvideCalculator, false);",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-summaries/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}