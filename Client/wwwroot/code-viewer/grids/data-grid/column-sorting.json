{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-sorting/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n;\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-item\">Header Click Action: </span>\n        <select class=\"options-item\" @bind=\"GridHeaderClickAction\">\n            <option>@HeaderClickAction.SortByMultipleColumns</option>\n            <option>@HeaderClickAction.SortByMultipleColumnsTriState</option>\n            <option>@HeaderClickAction.SortByOneColumnOnly</option>\n            <option>@HeaderClickAction.SortByOneColumnOnlyTriState</option>\n        </select>\n    </div>\n\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                      @ref=\"DataGridRef\"\n                      HeaderClickAction=\"@GridHeaderClickAction\"\n                      AutoGenerateColumns=\"false\"\n                      DataSource=\"Data\"\n                      DefaultColumnMinWidth=\"100\"\n                      IsColumnOptionsEnabled=\"true\">\n                    <IgbTextColumn Field=\"ID\" Width=\"@(\"*>110\")\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" />\n                    <IgbTextColumn Field=\"Property\" Width=\"@(\"*>150\")\" HeaderText=\"Property\" />\n                    <IgbImageColumn IsEditable=\"false\" Field=\"CountryFlag\" HeaderText=\"Country\" Width=\"@(\"*>160\")\" ContentOpacity=\"1\"\n                                HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" PaddingTop=\"5\" PaddingBottom=\"5\" />\n                    <IgbTextColumn Field=\"City\" Width=\"@(\"*>150\")\" />\n                    <IgbNumericColumn Field=\"Price\" Width=\"@(\"*>130\")\" PositivePrefix=\"$\" ShowGroupingSeparator=\"true\" />\n                    <IgbNumericColumn Field=\"Rooms\" Width=\"@(\"*>110\")\" />\n                </IgbDataGrid>\n            </div>\n        }\n    </div>\n</div>\n\n@code {\n\n    private List<RealEstate> Data;\n    private HeaderClickAction GridHeaderClickAction;\n\n    private IgbDataGrid grid;\n    private IgbDataGrid DataGridRef\n    {\n        get { return grid; }\n        set { grid = value; OnGridRefChanged(); StateHasChanged(); }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = RealEstateData.Create(100);\n        this.GridHeaderClickAction = HeaderClickAction.SortByMultipleColumnsTriState;\n    }\n\n    private void OnGridRefChanged()\n    {\n        if (this.DataGridRef != null)\n        {\n            this.DataGridRef.SortDescriptions.Add(new IgbColumnSortDescription()\n            {\n                Field = \"Property\",\n                SortDirection = ListSortDirection.Descending\n            });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-sorting/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbGridColumnOptionsModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-sorting/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-sorting/Services/RealEstateData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class RealEstate\n    {\n        public string ID { get; set; }\n        public string Address { get; set; }\n        public string Street { get; set; }\n        public string Country { get; set; }\n        public string CountryFlag { get; set; }\n        public string City { get; set; }\n        public string Email { get; set; }\n        public string Phone { get; set; }\n\n        public double Age { get; set; }\n        public double Baths { get; set; }\n        public double Built { get; set; }\n        public string Property { get; set; }\n        public double Rooms { get; set; }\n        public string Agent { get; set; }\n        public double Area { get; set; }\n        public double Price { get; set; }\n        public DateTime SaleDate { get; set; }\n    }\n\n    public static class RealEstateData\n    {\n        public static List<RealEstate> Create(int? count)\n        {\n            if (count == null) count = 100;\n\n            string[] property = { \"Townhouse\", \"Single\", \"Condo\", \"Villa\" };\n            string[] emails = { \"estates.com\", \"remax.com\", \"zillow.com\", \"realtor.com\", \"coldwell.com\" };\n            string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\" };\n            var houses = new List<RealEstate>();\n\n            for (var i = 0; i < count; i++)\n            {\n                var year = DataGenerator.GetNumber(1950, 2015);\n                var age = 2020 - year;\n\n                var gender = DataGenerator.GetGender();\n                var firstName = DataGenerator.GetNameFirst(gender);\n                var lastName = DataGenerator.GetNameLast();\n                var initials = firstName.Substring(0, 1).ToLower();\n                var email = initials + firstName.ToLower() + \"@\" + DataGenerator.GetItem(emails);\n                var street = DataGenerator.GetStreet();\n                var country = DataGenerator.GetItem(countries);\n                var city = DataGenerator.GetCity(country);\n\n                houses.Add(new RealEstate\n                {\n                    Address = street,\n                    Age = age,\n                    Agent = firstName + \" \" + lastName,\n                    Area = DataGenerator.GetNumber(50, 300),\n                    Baths = DataGenerator.GetNumber(1, 3),\n                    Built = year,\n                    City = city,\n                    Country = country,\n                    CountryFlag = DataGenerator.GetCountryFlag(country),\n                    Email = email,\n                    ID = DataGenerator.Pad(i + 1001, 4),\n                    Phone = DataGenerator.GetPhone(),\n                    Price = DataGenerator.GetNumber(210, 900) * 1000,\n                    Property = DataGenerator.GetItem(property),\n                    Rooms = DataGenerator.GetNumber(2, 5),\n                    SaleDate = DataGenerator.GetDate(),\n                    Street = street\n                });\n            }\n            return houses;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-sorting/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}