{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/performance/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n;\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                      @ref=\"DataGridRef\"\n                      AutoGenerateColumns=\"false\"\n                      HeaderClickAction=\"@HeaderClickAction.SortByMultipleColumnsTriState\"\n                      RowHeight=\"40\"\n                      SelectionMode=\"@DataGridSelectionMode.MultipleRow\"\n                      DefaultColumnMinWidth=\"80\"\n                      SortDescriptionsChanged=\"OnSortDescriptionsChanged\"\n                      ColumnShowingAnimationMode=\"@ColumnShowingAnimationMode.Auto\"\n                      ColumnHidingAnimationMode=\"@ColumnHidingAnimationMode.Auto\"\n                      DataSource=\"Data\"\n                      IsRowHoverEnabled=\"false\">\n                    <IgbTextColumn Field=\"FirstName\" HeaderText=\"First Name\" Width=\"@(\"*>130\")\" />\n                    <IgbTextColumn Field=\"LastName\" HeaderText=\"Last Name\" Width=\"@(\"*>130\")\" />\n                    <IgbTextColumn Field=\"Territory\" Width=\"@(\"*>130\")\" />\n                    <IgbNumericColumn Field=\"YearToDateSales\" HeaderText=\"YTD Sales\" Width=\"@(\"*>130\")\"\n                                PositivePrefix=\"$\" ShowGroupingSeparator=\"true\" />\n                    <IgbTemplateColumn Field=\"AvgSale\" HeaderText=\"Avg. Sale\" Width=\"@(\"*>120\")\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Right\"\n                                    CellUpdatingScript=\"onAvgSaleCellUpdating\"  />\n                    <IgbTemplateColumn Field=\"Change\" Width=\"@(\"*>120\")\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Right\"\n                                    CellUpdatingScript=\"onChangeCellUpdating\"/>\n                    <IgbTemplateColumn Field=\"PercentChange\" Width=\"@(\"*>140\")\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Right\"\n                                    HeaderText=\"Change (%)\" CellUpdatingScript=\"onPercentChangeCellUpdating\"/>\n                    <IgbDateTimeColumn Field=\"DateValue\" HeaderText=\"Date\" Width=\"@(\"*>120\")\" />\n\n                    @for (int i = 0; i < 8; i++)\n                    {\n                        string str = \"KPI_\" + i.ToString();\n                        <IgbNumericColumn Width=\"@(\"*>150\")\" Field=\"@str\" DataBoundScript=\"onKPIColumnDataBound\"/>\n                    }\n                </IgbDataGrid>\n            </div>\n        }\n    </div>\n</div>\n\n@code {\n\n    private void OnSortDescriptionsChanged(IgbGridSortDescriptionsChangedEventArgs args)\n    {\n\n    }\n\n    private List<SalesPerson> Data;\n\n    private IgbDataGrid _grid;\n    private IgbDataGrid DataGridRef\n    {\n        get { return _grid; }\n        set\n        {\n            _grid = value;\n            this.OnDataGridRef();\n            StateHasChanged();\n        }\n    }\n\n    private DateTime lastDataUpdate = new DateTime();\n    private int interval = 1000;\n    private Random random = new Random();\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = SalesPersonData.GenerateSalesPeople(500);\n    }\n\n    private void OnDataGridRef()\n    {\n        var columnGroup = new IgbColumnGroupDescription();\n        columnGroup.Field = \"Territory\";\n        this.DataGridRef.GroupDescriptions.Add(columnGroup);\n\n        Task.Delay(1000).ContinueWith((t) => OnTimerTick());\n    }\n\n    private void OnTimerTick()\n    {\n        bool sortedBySales = false;\n\n        int toChange = (int)Math.Round(this.Data.Count / 10.0);\n        var toChangeIndexes = new List<bool>();\n        bool stillAnimating = false;\n\n        for (int i = 0; i < this.Data.Count; i++)\n        {\n            toChangeIndexes.Add(false);\n            SalesPerson item = this.Data[i];\n            if (item.AvgSaleHeat != 0)\n            {\n                stillAnimating = true;\n            }\n        }\n\n        var now = DateTime.Now;\n        bool intervalElapsed = false;\n\n        if ((now - lastDataUpdate).TotalMilliseconds > this.interval)\n        {\n            intervalElapsed = true;\n        }\n\n        bool useClear = false;\n        bool sortingByAvgSale = false;\n\n        for (int i = 0; i < this.DataGridRef.SortDescriptions.Count; i++)\n        {\n            if (this.DataGridRef.SortDescriptions[i].Field == \"AvgSale\" || this.DataGridRef.SortDescriptions[i].Field.IndexOf(\"Change\") >= 0)\n            {\n                sortingByAvgSale = true;\n            }\n        }\n\n        bool changing = false;\n        if (intervalElapsed)\n        {\n            this.lastDataUpdate = new DateTime();\n            for (int i = 0; i < toChange; i++)\n            {\n                int index = (int)Math.Round(random.NextDouble() * (this.Data.Count - 1));\n                toChangeIndexes[index] = true;\n\n            }\n        }\n\n        for (int i = 0; i < toChangeIndexes.Count; i++)\n        {\n            var item = this.Data[i];\n            if (toChangeIndexes[i] == true)\n            {\n                if (sortingByAvgSale && !useClear)\n                {\n                    this.DataGridRef.NotifyRemoveItem(this.Data, i, item);\n                    this.RandomizeItem(item);\n                    this.DataGridRef.NotifyInsertItem(this.Data, i, item);\n                }\n                else\n                {\n                    this.RandomizeItem(item);\n                    this.DataGridRef.NotifyUpdateItem(this.Data, i, item, true);\n                }\n\n                if (item.Change > 0)\n                {\n                    item.AvgSaleHeat = 1;\n                }\n                else\n                {\n                    item.AvgSaleHeat = -1;\n                }\n            }\n            else\n            {\n                if (item.AvgSaleHeat > 0)\n                {\n                    item.AvgSaleHeat -= .06;\n                    if (item.AvgSaleHeat < 0)\n                    {\n                        item.AvgSaleHeat = 0;\n                    }\n                }\n                if (item.AvgSaleHeat < 0)\n                {\n                    item.AvgSaleHeat += .06;\n                    if (item.AvgSaleHeat > 0)\n                    {\n                        item.AvgSaleHeat = 0;\n                    }\n                }\n            }\n        }\n\n        //if(sortingByAvgSale && useClear)\n        //{\n        //    this.DataGridRef.ActualDataSource.QueueAutoRefresh();\n        //}\n\n        if (!sortingByAvgSale || !intervalElapsed)\n        {\n            this.DataGridRef.InvalidateVisibleRows();\n        }\n\n        Task.Delay(1000).ContinueWith((t) => OnTimerTick());\n    }\n\n    private void RandomizeItem(SalesPerson item)\n    {\n        item.Change = (random.NextDouble() * 40.0) - 20.0;\n        double prevSale = item.AvgSale;\n        item.AvgSale += item.Change;\n        item.PercentChange = ((item.AvgSale / prevSale) * 100.00);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/performance/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/performance/Services/SalesPersonData.cs",
    "content": "ï»¿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class SalesPerson\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Name { get; set; }\n        public string ImageName { get; set; }\n        public string Territory { get; set; }\n        public int Index { get; set; }\n        public double AvgSale { get; set; }\n        public double AvgSaleHeat { get; set; }\n        public double Change { get; set; }\n        public double PercentChange { get; set; }\n        public double YearToDateSales { get; set; }\n        public DateTime DateValue { get; set; }\n\n        public double KPI_0 { get; set; }\n        public double KPI_1 { get; set; }\n        public double KPI_2 { get; set; }\n        public double KPI_3 { get; set; }\n        public double KPI_4 { get; set; }\n        public double KPI_5 { get; set; }\n        public double KPI_6 { get; set; }\n        public double KPI_7 { get; set; }\n    }\n\n    public class SalesPersonData\n    {\n        public static List<SalesPerson> GenerateSalesPeople(int number)\n        {\n            string[] firstNames = new string[] {\n           \"Kyle\",\n           \"Gina\",\n           \"Irene\",\n           \"Katie\",\n           \"Michael\",\n           \"Oscar\",\n           \"Ralph\",\n           \"Torrey\",\n           \"William\",\n           \"Bill\",\n           \"Daniel\",\n           \"Frank\",\n           \"Brenda\",\n           \"Danielle\",\n           \"Fiona\",\n           \"Howard\",\n           \"Jack\",\n           \"Larry\",\n           \"Holly\",\n           \"Jennifer\",\n           \"Liz\",\n           \"Pete\",\n           \"Steve\",\n           \"Vince\",\n           \"Zeke\"\n            };\n\n            string[] lastNames = new string[] {\n                \"Adams\",\n            \"Crowley\",\n            \"Ellis\",\n            \"Gable\",\n            \"Irvine\",\n            \"Keefe\",\n            \"Mendoza\",\n            \"Owens\",\n            \"Rooney\",\n            \"Waddell\",\n            \"Thomas\",\n            \"Betts\",\n            \"Doran\",\n            \"Fitzgerald\",\n            \"Holmes\",\n            \"Jefferson\",\n            \"Landry\",\n            \"Newberry\",\n            \"Perez\",\n            \"Spencer\",\n            \"Vargas\",\n            \"Grimes\",\n            \"Edwards\",\n            \"Stark\",\n            \"Cruise\",\n            \"Fitz\",\n            \"Chief\",\n            \"Blanc\",\n            \"Perry\",\n            \"Stone\",\n            \"Williams\",\n            \"Lane\",\n            \"Jobs\"\n            };\n\n            string[] genders = new string[] {\n                \"GUY\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GIRL\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\",\n                \"GUY\"\n            };\n\n            string[] territories = new string[]{\n                \"Australia\",\n                \"Canada\",\n                \"Egypt\",\n                \"Greece\",\n                \"Italy\",\n                \"Kenya\",\n                \"Mexico\",\n                \"Oman\",\n                \"Qatar\",\n                \"Sweden\",\n                \"Uruguay\",\n                \"Yemen\",\n                \"Bulgaria\",\n                \"Denmark\",\n                \"France\",\n                \"Hungary\",\n                \"Japan\",\n                \"Latvia\",\n                \"Netherlands\",\n                \"Portugal\",\n                \"Russia\",\n                \"Turkey\",\n                \"Venezuela\",\n                \"Zimbabwe\"\n            };\n\n            List<SalesPerson> items = new List<SalesPerson>();\n\n            Random r = new Random();\n\n            for (int i = 0; i < number; i++)\n            {\n                SalesPerson item = new SalesPerson();\n                int firstIndex = (int)Math.Round(r.NextDouble() * (firstNames.Length - 1));\n\n                item.Index = i;\n                item.FirstName = firstNames[firstIndex];\n                item.LastName = lastNames[(int)Math.Round(r.NextDouble() * (lastNames.Length - 1))];\n                item.Name = item.FirstName + item.LastName;\n\n                int randomIndex = (int)Math.Round(r.NextDouble() * (firstNames.Length - 1));\n\n                if (randomIndex == 0)\n                {\n                    randomIndex = 1;\n                }\n\n                string value = randomIndex.ToString();\n                if (randomIndex < 10)\n                {\n                    value = \"0\" + value;\n                }\n\n                item.ImageName = SalesPersonData.CreateUri(genders[firstIndex] + value + \".png\");\n                item.Territory = territories[(int)Math.Round(r.NextDouble() * (territories.Length - 1))];\n                item.AvgSale = Math.Round((r.NextDouble() * 800)) + 200.0;\n                item.Change = (r.NextDouble() * 40.0) - 20.0;\n                item.PercentChange = 0;\n                item.YearToDateSales = Math.Round(r.NextDouble() * 50000);\n\n                item.DateValue = DateTime.Today.AddDays(number * -1);\n\n                for (int j = 0; j < 8; j++)\n                {\n                    PropertyInfo info = typeof(SalesPerson).GetProperty(\"KPI_\" + j.ToString());\n                    info.SetValue(item, Math.Round(r.NextDouble() * 100));\n                }\n\n                items.Add(item);\n            }\n\n            return items;\n        }\n\n        public static string CreateUri(string value)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/\" + value;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/performance/wwwroot/DataGridPerformance.js",
    "content": "ï»¿function onAvgSaleCellUpdating(column, args) {\r\n    let row = args.cellInfo.rowItem;\r\n    let priceShiftUp = row.Change >= 0;\r\n    let templ = args.cellInfo;\r\n\r\n    let content = args.content;\r\n    let sp = null;\r\n    let icon = null;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n        icon = content.children[1];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        icon = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n        content.appendChild(icon);\r\n        icon.style.fontFamily = \"Material Icons\";\r\n        icon.style.fontSize = \"13px\";\r\n        icon.style.fontFeatureSettings = \"liga\";\r\n        icon.style.verticalAlign = \"center\";\r\n    }\r\n\r\n    sp.textContent = \"$\" + (+templ.value).toFixed(2);\r\n    \r\n    if (priceShiftUp) {        \r\n        icon.style.color = \"#4EB862\";\r\n        sp.style.color = \"#4EB862\";\r\n    } else {     \r\n        icon.style.color = \"#FF134A\";\r\n        sp.style.color = \"#FF134A\";\r\n    }    \r\n}\r\n\r\nfunction onChangeCellUpdating(column, args) {\r\n    let templ = args.cellInfo;\r\n    let priceShiftUp = templ.value >= 0;\r\n\r\n    let content = args.content;\r\n    let sp = null;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n    }\r\n\r\n    sp.textContent = (+templ.value).toFixed(2);\r\n    \r\n    if (priceShiftUp) {\r\n        sp.style.paddingRight = \"5px\";\r\n        sp.style.borderRight = \"4px solid #4EB862\";        \r\n    } else {\r\n        sp.style.paddingRight = \"5px\";\r\n        sp.style.borderRight = \"4px solid #FF134A\";        \r\n    }   \r\n}\r\n\r\nfunction onPercentChangeCellUpdating(column, args) {\r\n    let templ = args.cellInfo;\r\n    let priceShiftUp = templ.value >= 0;\r\n\r\n    let content = args.content;\r\n    let sp = null;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n    }\r\n\r\n    sp.textContent = (+templ.value).toFixed(2) + \"%\";\r\n    \r\n    if (priceShiftUp) {\r\n        sp.style.paddingRight = \"5px\";\r\n        sp.style.borderRight = \"4px solid #4EB862\";        \r\n    } else {\r\n        sp.style.paddingRight = \"5px\";\r\n        sp.style.borderRight = \"4px solid #FF134A\";        \r\n    }\r\n}\r\n\r\nfunction onKPIColumnDataBound(column, args) {\r\n    let value = args.resolvedValue;\r\n    if (value < 20.0) {\r\n        if (args.cellInfo.background !== \"red\") {\r\n            args.cellInfo.background = \"#FF134A\";\r\n        }\r\n    }\r\n\r\n    if (value > 80.0) {\r\n        if (args.cellInfo.background !== \"green\") {\r\n            args.cellInfo.background = \"#4EB862\";\r\n        }\r\n    }\r\n}\r\n\r\nigRegisterScript(\"onAvgSaleCellUpdating\", onAvgSaleCellUpdating, false);\r\nigRegisterScript(\"onChangeCellUpdating\", onChangeCellUpdating, false);\r\nigRegisterScript(\"onPercentChangeCellUpdating\", onPercentChangeCellUpdating, false);\r\nigRegisterScript(\"onKPIColumnDataBound\", onKPIColumnDataBound, false);",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/performance/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}