{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/App.razor",
    "content": "\n@using System.ComponentModel\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n\n    <div class=\"container vertical\">\n\n        @if (Employees != null && CountryNames != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                  @ref=\"@DataGridRef\"\n                  RowHeight=\"50\"\n                  DataSource=\"Employees\"\n                  AutoGenerateColumns=\"false\"\n                  ActivationMode=\"GridActivationMode.Cell\">\n\n                    <IgbImageColumn IsEditable=\"false\" Width=\"100\" Field=\"Photo\" PaddingTop=\"5\" PaddingBottom=\"5\" PaddingRight=\"10\"\n                                HorizontalAlignment=\"@CellContentHorizontalAlignment.Stretch\" />\n\n                    <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Name\" />\n\n                    @*NOTE: CellUpdatingScript is implemented in wwwroot/*.js file *@\n                    <IgbTemplateColumn Width=\"@(\"*>160\")\" Field=\"Sales\" CellUpdatingScript=\"onUpdatingSalesColumn\"\n                                    HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\"\n                                    />\n\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"Salary\" PositivePrefix=\"$\"\n                                ShowGroupingSeparator=\"true\"\n                                MaxFractionDigits=\"0\"\n                                MinFractionDigits=\"0\" />\n\n                    <IgbDateTimeColumn Width=\"@(\"*>140\")\" Field=\"Birthday\" HeaderText=\"Date of Birth\" />\n\n                    <IgbComboBoxColumn Width=\"@(\"*>120\")\" Field=\"Country\" DataSource=\"CountryNames\" />\n                    <IgbImageColumn IsEditable=\"false\" Width=\"@(\"*>110\")\" Field=\"CountryFlag\" HeaderText=\"Flag\"\n                                PaddingTop=\"5\" PaddingBottom=\"5\" PaddingRight=\"10\"\n                                HorizontalAlignment=\"@CellContentHorizontalAlignment.Stretch\" />\n\n                    @*NOTE: CellUpdatingScript is implemented in wwwroot/*.js file *@\n                    <IgbTemplateColumn Width=\"@(\"*>170\")\" Field=\"Address\" CellUpdatingScript=\"onUpdatingAddressColumn\" />\n                    <IgbTemplateColumn Width=\"@(\"*>130\")\" Field=\"Phone\" CellUpdatingScript=\"onUpdatingPhoneColumn\" />\n\n                    <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Income\" />\n                    <IgbNumericColumn Width=\"100\" Field=\"Age\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Left\"/>\n\n                </IgbDataGrid>\n            </div>\n        }\n\n    </div>\n</div>\n\n@code {\n\n    protected List<Employee> Employees;\n    protected List<Country> CountryNames;\n\n    private IgbDataGrid _grid;\n    private IgbDataGrid DataGridRef\n    {\n        get { return _grid; }\n        set { _grid = value; }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.Employees = EmployeeData.Create(50, false);\n        for (int i = 0; i < this.Employees.Count; i++)\n        {\n            this.Employees[i].PropertyChanged += OnPropertyChanged;\n        }\n\n        this.CountryNames = new List<Country> {\n            new Country { Name = \"Canada\" },\n            new Country { Name = \"France\" },\n            new Country { Name = \"Poland\" },\n            new Country { Name = \"UK\" },\n            new Country { Name = \"USA\" }\n        };\n    }\n\n    protected void OnPropertyChanged(object item, PropertyChangedEventArgs args)\n    {\n        var employee = item as Employee;\n\n        if (this._grid != null && employee != null)\n            this._grid.NotifyUpdateItem(this.Employees, employee.Index, employee);\n    }\n\n    public class Country\n    {\n        public string Name { get; set; }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbGridColumnOptionsModule),\n                typeof(IgbSparklineModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/Services/DataGenerator.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGenerator\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"male\", \"female\" };\n        readonly static string[] maleNames = { \"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\" };\n        readonly static string[] femaleNames = { \"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\" };\n        readonly static string[] lastNames = { \"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\" };\n        readonly static string[] countries = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n        readonly static string[] citiesUS = { \"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\" };\n        readonly static string[] citiesUK = { \"London\", \"Liverpool\", \"Manchester\" };\n        readonly static string[] citiesFR = { \"Paris\", \"Marseille\", \"Lyon\" };\n        readonly static string[] citiesCA = { \"Toronto\", \"Vancouver\", \"Montreal\" };\n        readonly static string[] citiesPL = { \"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\" };\n        readonly static string[] citiesJP = { \"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\" };\n        readonly static string[] citiesGR = { \"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\" };\n        readonly static string[] roadSuffixes = { \"Road\", \"Street\", \"Way\" };\n        readonly static string[] roadNames = { \"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"male\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"Canada\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"France\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"Poland\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"USA\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"male\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + country + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"Low\";\n            }\n            else if (salary < 100000)\n            {\n                return \"Average\";\n            }\n            else\n            {\n                return \"High\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/Services/EmployeeData.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class Employee : INotifyPropertyChanged\n    {\n        public string ID { get; set; }\n        public string Address { get; set; }\n        public double Age { get; set; }\n        public string Gender { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Name { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Email { get; set; }\n        public string Phone { get; set; }\n        public string Photo { get; set; }\n        public double Salary { get; set; }\n        public double Sales { get; set; }\n        public string Income { get; set; }\n        public int Index { get; set; }\n\n        public DateTime Birthday { get; set; }\n        public List<Productivity> Productivity { get; set; }\n\n        private string _Country;\n        public string Country\n        {\n            get { return _Country; }\n            set { if (_Country != value) { OnCountryChanged(value); } }\n        }\n\n        public string CountryFlag { get; set; }\n\n        protected void OnCountryChanged(string countryName)\n        {\n            // syncronizing country name and country flag\n            _Country = countryName;\n            CountryFlag = DataGenerator.GetCountryFlag(countryName);\n            City = DataGenerator.GetCity(countryName);\n            OnPropertyChanged(\"Country\");\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n\n    public class Productivity\n    {\n        public double Value { get; set; }\n        public int Week { get; set; }\n    }\n\n    public static class EmployeeData\n    {\n        public static List<Employee> Create(int? count, bool? useProductivity)\n        {\n            if (count == null) count = 100;\n\n            var employees = new List<Employee>();\n            for (int i = 0; i < count; i++)\n            {\n                var age = Math.Round(DataGenerator.GetNumber(20, 40));\n                var gender = DataGenerator.GetGender();\n                var firstName = DataGenerator.GetNameFirst(gender);\n                var lastName = DataGenerator.GetNameLast();\n                var street = DataGenerator.GetStreet();\n                var country = DataGenerator.GetCountry();\n                var city = DataGenerator.GetCity(country);\n                var email = firstName.ToLower() + \"@\" + DataGenerator.GetEmail();\n                var photoPath = DataGenerator.GetPhoto(gender);\n\n                var employee = new Employee\n                {\n                    Index = i,\n                    Address = street + \", \" + city,\n                    Age = age,\n                    Birthday = DataGenerator.GetBirthday(),\n                    City = city,\n                    Email = email,\n                    Gender = gender,\n                    ID = DataGenerator.Pad(1001 + i, 4),\n                    FirstName = firstName,\n                    LastName = lastName,\n                    Name = firstName + \" \" + lastName,\n                    Photo = photoPath,\n                    Phone = DataGenerator.GetPhone(),\n                    Street = DataGenerator.GetStreet(),\n                    Salary = DataGenerator.GetNumber(40, 200) * 1000,\n                    Sales = DataGenerator.GetNumber(200, 980) * 1000,\n                };\n                employee.Country = country;\n\n                employee.Income = DataGenerator.GetIncomeRange(employee.Salary);\n\n                if (useProductivity.HasValue && useProductivity.Value)\n                {\n                    employee.Productivity = GetProductivity(52);\n                }\n                employees.Add(employee);\n            }\n\n            return employees;\n        }\n\n        public static List<Productivity> GetProductivity(int weekCount)\n        {\n            var productivity = new List<Productivity>();\n\n            for (var w = 1; w <= weekCount; w++)\n            {\n                var value = DataGenerator.GetNumber(-50, 50);\n                var prod = new Productivity\n                {\n                    Value = value,\n                    Week = w\n                };\n                productivity.Add(prod);\n            };\n\n            return productivity;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/wwwroot/DataGridColumnTypes.js",
    "content": "ï»¿// NOTE this JavaScript file implements functions for styling/templating columnd of the DataGrid control\r\n// at end of this file, the igRegisterScript registers functions that are used .razor file\r\n\r\nfunction onUpdatingSalesColumn(grid, args) {\r\n    let content = args.content;\r\n    let info = args.cellInfo;\r\n    let sales = info.rowItem.Sales;\r\n    let gaugeValue = null;\r\n    let gaugeBar = null;\r\n\r\n    if (content.childElementCount === 0) {\r\n        gaugeValue = document.createElement(\"span\");\r\n        gaugeValue.style.margin = \"0px\";\r\n        gaugeValue.style.marginTop = \"2px\";\r\n        gaugeValue.style.padding = \"0px\";\r\n        gaugeValue.style.fontFamily = \"Verdana\";\r\n        gaugeValue.style.fontSize = \"13px\";\r\n        gaugeValue.style.textAlign = \"center\";\r\n\r\n        gaugeBar = document.createElement(\"div\");\r\n        gaugeBar.style.background = \"#7f7f7f\";\r\n        gaugeBar.style.padding = \"0px\";\r\n        gaugeBar.style.margin = \"0px\";\r\n        gaugeBar.style.height = \"6px\";\r\n        gaugeBar.style.left = \"0px\";\r\n        gaugeBar.style.top = \"0px\";\r\n        gaugeBar.style.position = \"relative\";\r\n\r\n        const gauge = document.createElement(\"div\");\r\n        gauge.style.background = \"#dddddd\";\r\n        gauge.style.padding = \"0px\";\r\n        gauge.style.margin = \"0px\";\r\n        gauge.style.height = \"4px\";\r\n        gauge.style.marginTop = \"8px\";\r\n        gauge.style.width = \"100%\";\r\n        gauge.appendChild(gaugeBar);\r\n\r\n        content.style.verticalAlign = \"center\";\r\n        content.style.lineHeight = \"normal\";\r\n        content.style.display = \"flex\";\r\n        content.style.flexDirection = \"column\";\r\n        content.style.justifyContent = \"center\";\r\n        content.style.height = \"100%\";\r\n        content.style.width = \"calc(100% - 2rem)\";\r\n        content.style.marginRight = \"1rem\";\r\n        content.style.marginLeft = \"1rem\";\r\n\r\n        content.appendChild(gauge);\r\n        content.appendChild(gaugeValue);\r\n    } else {\r\n        const gauge = content.children[0];\r\n        gaugeBar = gauge.children[0];\r\n        gaugeValue = content.children[1];\r\n    }\r\n\r\n    // conditional formatting:\r\n    if (sales < 400000) {\r\n        gaugeValue.style.color = \"rgb(211, 17, 3)\";\r\n        gaugeBar.style.background = \"rgb(211, 17, 3)\";\r\n    }\r\n    else if (sales < 650000) {\r\n        gaugeValue.style.color = \"Orange\";\r\n        gaugeBar.style.background = \"Orange\";\r\n    }\r\n    else {\r\n        gaugeValue.style.color = \"rgb(21, 190, 6)\";\r\n        gaugeBar.style.background = \"rgb(21, 190, 6)\";\r\n    }\r\n\r\n    let gaugeWidth = (sales / 990000) * 100;\r\n    gaugeWidth = Math.min(100, gaugeWidth);\r\n    gaugeBar.style.width = gaugeWidth + \"%\";\r\n\r\n    gaugeValue.textContent = \"$\" + sales / 1000 + \",000\";\r\n}\r\n\r\nfunction onUpdatingAddressColumn(grid, args) {\r\n    let content = args.content;\r\n    let info = args.cellInfo;\r\n    let item = info.rowItem;\r\n    let span1 = null;\r\n    let span2 = null;\r\n\r\n    if (content.childElementCount === 0) {\r\n        content.style.fontFamily = \"Verdana\";\r\n        content.style.fontSize = \"13px\";\r\n        content.style.verticalAlign = \"center\";\r\n        content.style.lineHeight = \"normal\";\r\n        content.style.display = \"flex\";\r\n        content.style.flexDirection = \"column\";\r\n        content.style.justifyContent = \"center\";\r\n        content.style.height = \"100%\";\r\n        content.style.width = \"100%\";\r\n        content.style.color = \"rgb(24, 29, 31)\";\r\n        // stacking above elements in the content of grid's cell\r\n        span1 = document.createElement(\"span\");\r\n        span2 = document.createElement(\"span\");\r\n        content.appendChild(span1);\r\n        content.appendChild(span2);\r\n    }\r\n    else {\r\n        span1 = content.children[0];\r\n        span2 = content.children[1];\r\n    }\r\n\r\n    if (span1 && span2) {\r\n        // updating elements in the content of grid's cell\r\n        span1.textContent = item.Street;\r\n        span2.textContent = item.City + \", \" + item.Country;\r\n    }\r\n}\r\n\r\nfunction onUpdatingPhoneColumn(grid, args) {\r\n    let content = args.content;\r\n    let info = args.cellInfo;\r\n    let item = info.rowItem;\r\n    let link = null;\r\n\r\n    if (content.childElementCount === 0) {\r\n        link = document.createElement(\"a\");\r\n        content.style.verticalAlign = \"center\";\r\n        content.style.justifyContent = \"center\"; \r\n        content.style.lineHeight = \"normal\";\r\n        content.style.display = \"inline-block\";\r\n        // content.style.display = \"inline-grid\";\r\n        content.style.fontFamily = \"Verdana\";\r\n        content.style.fontSize = \"13px\";\r\n        content.style.color = \"#4286f4\";\r\n        content.style.width = \"100%\";\r\n\r\n        content.appendChild(link);\r\n    } else {\r\n        link = content.children[0];\r\n    }\r\n\r\n    link.href = \"tel:\" + item.Phone;\r\n    link.textContent = item.Phone;\r\n}\r\n\r\n// this code allows calling above functions from a .razor file\r\nigRegisterScript(\"onUpdatingSalesColumn\", onUpdatingSalesColumn, false);\r\nigRegisterScript(\"onUpdatingAddressColumn\", onUpdatingAddressColumn, false);\r\nigRegisterScript(\"onUpdatingPhoneColumn\", onUpdatingPhoneColumn, false);",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/column-types/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}