{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/type-marketing-table/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n;\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        @if (Data != null)\n        {\n            <div style=\"overflow: hidden\">\n                <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                      @ref=\"DataGridRef\"\n                      DataSource=\"Data\"\n                      AutoGenerateColumns=\"false\"\n                      SelectionMode=\"@DataGridSelectionMode.MultipleRow\"\n                      IsGroupCollapsable=\"true\"\n                      RowHeight=\"32\"\n                      HeaderClickAction=\"@HeaderClickAction.SortByMultipleColumnsTriState\"\n                      ActivationMode=\"GridActivationMode.Cell\"\n                      DefaultColumnMinWidth=\"100\">\n\n                    <IgbTextColumn Width=\"@(\"*>140\")\" Field=\"ID\" IsHidden=\"true\" />\n                    <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Category\" />\n                    <IgbTextColumn Width=\"@(\"*>110\")\" Field=\"Type\" />\n                    <IgbTextColumn Width=\"@(\"*>110\")\" Field=\"Risk\" />\n\n                    <IgbNumericColumn Width=\"@(\"*>120\")\" Field=\"Open\" HeaderText=\"Open\" ShowGroupingSeparator=\"true\" PositivePrefix=\"$\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n                    <IgbTemplateColumn Width=\"@(\"*>120\")\" Field=\"Price\"\n                        CellStyleKeyRequestedScript=\"onPriceStyleKey\"\n                        CellUpdatingScript=\"onPriceCellUpdating\"\n                        DataBoundScript=\"onPriceDataBound\"\n                        HeaderText=\"Close\" />\n                    <IgbNumericColumn Width=\"@(\"*>120\")\" Field=\"Change\" HeaderText=\"Change ($)\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n                    <IgbNumericColumn Width=\"@(\"*>180\")\" Field=\"ChangePercent\" HeaderText=\"Change (%)\" NegativeSuffix=\"%\" PositiveSuffix=\"%\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n\n                    <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Contract\" />\n                    <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Settlement\" />\n                    <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Region\" />\n                    <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Country\" />\n\n                    <IgbNumericColumn Width=\"@(\"*>110\")\" Field=\"Buy\" ShowGroupingSeparator=\"true\" PositivePrefix=\"$\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n                    <IgbNumericColumn Width=\"@(\"*>110\")\" Field=\"Sell\" ShowGroupingSeparator=\"true\" PositivePrefix=\"$\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"Spread\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"Volume\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"0\" MaxFractionDigits=\"0\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"DailyHigh\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" PositivePrefix=\"$\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"DailyLow\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" PositivePrefix=\"$\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"YearlyHigh\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" PositivePrefix=\"$\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"YearlyLow\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" PositivePrefix=\"$\" />\n                    <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"YearlyStart\" ShowGroupingSeparator=\"true\" MinFractionDigits=\"2\" MaxFractionDigits=\"2\" PositivePrefix=\"$\" />\n\n                    <IgbDateTimeColumn Width=\"@(\"*>140\")\" Field=\"Maturity\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Right\" />\n                    <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Currency\" />\n                    <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Sector\" />\n                    <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Security\" />\n                    <IgbTextColumn Width=\"@(\"*>170\")\" Field=\"Issuer\" />\n\n                </IgbDataGrid>\n            </div>\n        }\n    </div>\n</div>\n\n@code {\n\n    public List<PortfolioInfo> Data;\n\n    public DateTime lastUpdateTime = new DateTime();\n    public int frequency = 1000;\n    public int DataVolume = 500;\n    public bool isTimerTicking = false;\n    public bool isUpdatingAllPrices = false;\n    public bool isUpdatingSomePrices = false;\n\n    public bool UseHeatBackground = true;\n\n    private IgbDataGrid grid;\n    public IgbDataGrid DataGridRef\n    {\n        get { return grid; }\n        set { grid = value; StateHasChanged(); this.onGridGroupingAdd(); this.startTicking(); }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = PortfolioData.Create(this.DataVolume);\n    }\n\n    public void startTicking()\n    {\n        if (!this.isTimerTicking)\n        {\n            this.isTimerTicking = true;\n            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());\n        }\n    }\n\n    public static Random random = new Random();\n    public void onTimerTick()\n    {\n        if (!this.isTimerTicking)\n        {\n            return;\n        }\n        if (this.grid == null)\n        {\n            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());\n            return;\n        }\n\n        var stillAnimating = false;\n\n        var useClear = this.isUpdatingAllPrices;\n        var updateAll = this.isUpdatingAllPrices;\n\n        var toChangeIndexes = new List<bool>();\n        foreach (var item in this.Data)\n        {\n            toChangeIndexes.Add(false);\n            if (!this.UseHeatBackground)\n            {\n                item.PriceHeat = 0;\n            }\n            else if (item.PriceHeat != 0)\n            {\n                stillAnimating = true;\n            }\n        }\n\n        var toChange = (int)Math.Round(this.DataVolume / 10.0);\n        if (updateAll)\n        {\n            toChange = this.Data.Count;\n        }\n        else\n        {\n            toChange = (int)(random.Next(2, this.Data.Count - 1));\n        }\n\n        var sortingByPrice = false;\n        for (var i = 0; i < this.grid.SortDescriptions.Count; i++)\n        {\n            if (this.grid.SortDescriptions[i].Field == \"Price\" ||\n                this.grid.SortDescriptions[i].Field.Contains(\"Change\"))\n            {\n                sortingByPrice = true;\n            }\n        }\n\n        var changing = false;\n        var toChangeCount = 0;\n\n        var now = DateTime.Now;\n        var elapsedTime = now.Subtract(this.lastUpdateTime);\n        var elapsedInterval = elapsedTime.TotalMilliseconds > this.frequency;\n        if (elapsedInterval)\n        {\n            this.lastUpdateTime = DateTime.Now;\n            for (var i = 0; i < toChange; i++)\n            {\n                var index = (int)(random.Next(0, this.Data.Count - 1));\n                toChangeIndexes[index] = true;\n                toChangeCount++;\n                changing = true;\n\n            }\n        }\n\n        for (var i = 0; i < this.Data.Count; i++)\n        {\n            var item = this.Data[i];\n            if (toChangeIndexes[i] == true)\n            {\n                if (sortingByPrice && !useClear)\n                {\n                    this.grid.NotifyRemoveItem(this.Data, i, item);\n                    PortfolioData.RandomizeDataValues(item);\n                    this.grid.NotifyInsertItem(this.Data, i, item);\n                }\n                else\n                {\n                    PortfolioData.RandomizeDataValues(item);\n                    this.grid.NotifyUpdateItem(this.Data, i, item, true);\n                }\n\n                if (this.UseHeatBackground)\n                {\n                    if (item.Change > 0)\n                    {\n                        item.PriceHeat = 1;\n                    }\n                    else\n                    {\n                        item.PriceHeat = -1;\n                    }\n                }\n            }\n            else\n            {\n                if (this.UseHeatBackground)\n                {\n                    if (item.PriceHeat > 0)\n                    {\n                        item.PriceHeat -= .06;\n                        if (item.PriceHeat < 0)\n                        {\n                            item.PriceHeat = 0;\n                        }\n                    }\n                    if (item.PriceHeat < 0)\n                    {\n                        item.PriceHeat += .06;\n                        if (item.PriceHeat > 0)\n                        {\n                            item.PriceHeat = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (sortingByPrice && useClear && elapsedInterval)\n        {\n            this.grid.NotifyClearItems(Data);\n        }\n        else if (useClear)\n        {\n            this.grid.NotifyClearItems(Data);\n        }\n\n        if (!sortingByPrice || !elapsedInterval)\n        {\n            this.grid.InvalidateVisibleRows();\n        }\n\n        Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());\n    }\n\n    private void onGridGroupingAdd()\n    {\n        var g = new IgbColumnGroupDescription();\n        g.Field = \"Category\";\n        g.SortDirection = ListSortDirection.Descending;\n        this.grid.GroupDescriptions.Add(g);\n\n        g = new IgbColumnGroupDescription();\n        g.Field = \"Type\";\n        g.SortDirection = ListSortDirection.Descending;\n        this.grid.GroupDescriptions.Add(g);\n\n        g = new IgbColumnGroupDescription();\n        g.Field = \"Contract\";\n        g.SortDirection = ListSortDirection.Descending;\n        this.grid.GroupDescriptions.Add(g);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/type-marketing-table/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/type-marketing-table/Services/PortfolioData.cs",
    "content": "﻿using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace Infragistics.Samples\n{\n    public class Region\n    {\n        public string Name { get; set; }\n        public List<string> Countries { get; set; }\n    }\n\n    public class PortfolioData // LiveFinancialData\n    {\n        public static Random random = new Random();\n\n        public static List<string> DealType = new List<string>() { \"Buy\", \"Sell\" };\n        public static List<string> Contracts = new List<string>() { \"Forwards\", \"Futures\", \"Options\", \"Swap\", \"CFD\" };\n        public static List<string> Settlements = new List<string>() { \"Credit\", \"Cash\", \"Loan\" };\n        public static List<string> SectorTypes = new List<string>() { \"Public\", \"Private\", \"Government\" };\n        public static List<string> CurrencyTypes = new List<string>() { \"USD\", \"EUR\", \"PLN\", \"GBP\", \"YEN\" };\n        public static List<string> CountryRisks = new List<string>() { \"Low\", \"High\" };\n        public static List<string> SecurityTypes = new List<string>() { \"Poor\", \"Good\", \"High\", };\n        public static List<string> IssuerNames = new List<string>() { \"American Airlines\", \"Delta Airlines\", \"Southwest\", \"FedEx\", };\n        public static List<string> RatingTypes = new List<string>() { \"AAA\", \"BBB\", \"CCC\", };\n        public static List<PortfolioInfo> DataItems = GetDataItems();\n        public static List<Region> Regions = GetRegions();\n\n        public static List<PortfolioInfo> Create(int count)\n        {\n            var dataItems = new List<PortfolioInfo>();\n            var defaultItem = GetDefaultData();\n\n            for (int i = 0; i < count; i++)\n            {\n                var rand = (int)Math.Floor(random.NextDouble() * DataItems.Count);\n\n                var region = DataRandomizer.GetItem(Regions) as Region;\n\n                var item = DataItems[rand].Clone();\n                item.Region = region.Name;\n                // generating random values of properties\n                item.Settlement = DataRandomizer.GetItem(Settlements).ToString();\n                item.Contract = DataRandomizer.GetItem(Contracts).ToString();\n                item.Country = DataRandomizer.GetItem(region.Countries).ToString();\n                item.Risk = DataRandomizer.GetItem(CountryRisks).ToString();\n                item.Sector = DataRandomizer.GetItem(SectorTypes).ToString();\n                item.Currency = DataRandomizer.GetItem(CurrencyTypes).ToString();\n                item.Security = DataRandomizer.GetItem(SecurityTypes).ToString();\n                item.Issuer = DataRandomizer.GetItem(IssuerNames).ToString();\n                item.Maturity = DataRandomizer.GetDate();\n                item.Rating = DataRandomizer.GetItem(RatingTypes).ToString();\n\n                // setting default properties\n                item.IndGroup = defaultItem.IndGroup;\n                item.IndSector = defaultItem.IndSector;\n                item.IndCategory = defaultItem.IndCategory;\n                item.Fitch = defaultItem.Fitch;\n                item.Collateral = defaultItem.Collateral;\n                item.Transactions = defaultItem.Transactions;\n                item.Spread = defaultItem.Spread;\n                item.KRD_1YR = defaultItem.KRD_1YR;\n                item.KRD_3YR = defaultItem.KRD_3YR;\n                item.KRD_5YR = defaultItem.KRD_5YR;\n\n                item.ID = i;\n                RandomizeDataValues(item);\n                dataItems.Add(item);\n            }\n            return dataItems;\n        }\n\n        public static PortfolioInfo GetDefaultData()\n        {\n            return new PortfolioInfo\n            {\n                IndGroup = \"Airlines\",\n                IndSector = \"Consumer, Cyclical\",\n                IndCategory = \"Airlines\",\n                Fitch = \"N.A.\",\n                Collateral = \"Assets\",\n                Transactions = \"1765866\",\n                CPN = 7.875,\n                Maturity = new DateTime(2022, 1, 1),\n                Spread = 28.302,\n                KRD_3YR = 0.00006,\n                KRD_5YR = 0,\n                KRD_1YR = -0.00187,\n            };\n        }\n\n        public static List<Region> GetRegions()\n        {\n            var data = new List<Region>\n            {\n                new Region {\n                    Name = \"North America\",\n                    Countries = new List<string>() {\"Canada\", \"United States\", \"Mexico\" }\n                },\n                new Region {\n                    Name = \"Middle East\",\n                    Countries =  new List<string>() {\"Turkey\", \"Iraq\", \"Saudi Arabia\", \"Syria\", \"UAE\", \"Israel\", \"Jordan\", \"Lebanon\", \"Oman\", \"Kuwait\", \"Qatar\", \"Bahrain\", \"Iran\" }\n                },\n                new Region {\n                    Name = \"Europe\",\n                    Countries = new List<string>() {\n                        \"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\", \"Spain\", \"Poland\", \"Romania\", \"Netherlands\", \"Belgium\", \"Greece\",\n                        \"Portugal\", \"Czech Republic\", \"Hungary\", \"Sweden\", \"Austria\", \"Switzerland\", \"Bulgaria\", \"Denmark\", \"Finland\", \"Slovakia\", \"Norway\",\n                        \"Ireland\", \"Croatia\", \"Slovenia\", \"Estonia\", \"Iceland\"\n                    }\n                },\n\n                new Region {\n                    Name = \"Africa\",\n                    Countries= new List<string>() { \"Nigeria\", \"Ethiopia\", \"Egypt\", \"South Africa\", \"Algeria\", \"Morocco\", \"Cameroon\", \"Niger\", \"Senegal\", \"Tunisia\", \"Libya\" }\n                },\n\n                new Region {\n                    Name = \"Asia Pacific\",\n                    Countries =  new List<string>() {\n                        \"Afghanistan\", \"Australia\", \"Azerbaijan\", \"China\", \"Hong Kong\", \"India\", \"Indonesia\", \"Japan\",\n                        \"Malaysia\", \"New Zealand\", \"Pakistan\", \"Philippines\", \"Korea\", \"Singapore\", \"Taiwan\", \"Thailand\"}\n                },\n\n                new Region {\n                    Name = \"South America\",\n                    Countries =  new List<string>() { \"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\" }\n                },\n\n            };\n\n            return data;\n        }\n\n        #region Default Data Items\n        public static List<PortfolioInfo> GetDataItems()\n        {\n            var data = new List<PortfolioInfo>()\n            {\n                new PortfolioInfo {\n                    Category = \"Metal\",\n                    Type = \"Gold\",\n                    Spread = 0.01,\n                    Open = 1281.10,\n                    Price = 1280.7317,\n                    Buy = 1280.7267,\n                    Sell = 1280.7367,\n                    Change = -0.3683,\n                    ChangePercent = -0.0287,\n                    Volume = 48387,\n                    DailyHigh = 1289.50,\n                    DailyLow = 1279.10,\n                    YearlyHigh = 1306,\n                    YearlyLow = 1047.20,\n                    YearlyStart = 1176.60,\n                    ChangeOnYear = 8.8502\n                },\n                new PortfolioInfo {\n                    Category = \"Metal\",\n                    Type = \"Silver\",\n                    Spread = 0.01,\n                    Open = 17.43,\n                    Price = 17.42,\n                    Buy = 17.43,\n                    Sell = 17.43,\n                    Change = -0.01,\n                    ChangePercent = -0.0287,\n                    Volume = 48387,\n                    DailyHigh = 1289.50,\n                    DailyLow = 1279.10,\n                    YearlyHigh = 1306,\n                    YearlyLow = 1047.20,\n                    YearlyStart = 1176.60,\n                    ChangeOnYear = 8.8502\n                },\n                new PortfolioInfo {\n                    Category= \"Metal\",\n                    Type = \"Copper\",\n                    Spread = 0.02,\n                    Open = 2.123,\n                    Price = 2.113,\n                    Buy = 2.123,\n                    Sell = 2.123,\n                    Change = -0.01,\n                    ChangePercent = -0.471,\n                    Volume = 28819,\n                    DailyHigh = 2.16,\n                    DailyLow = 2.11,\n                    YearlyHigh = 2.94,\n                    YearlyLow = 1.96,\n                    YearlyStart = 2.45,\n                    ChangeOnYear = -13.7551\n                },\n                new PortfolioInfo {\n                    Category = \"Metal\",\n                    Type = \"Platinum\",\n                    Spread = 0.01,\n                    Open = 1071.60,\n                    Price = 1071.0993,\n                    Buy = 1071.0943,\n                    Sell = 1071.1043,\n                    Change = -0.5007,\n                    ChangePercent = -0.0467,\n                    Volume = 3039,\n                    DailyHigh = 1081.20,\n                    DailyLow = 1070.50,\n                    YearlyHigh = 1120.60,\n                    YearlyLow = 812.40,\n                    YearlyStart = 966.50,\n                    ChangeOnYear = 10.8225\n                },\n                new PortfolioInfo {\n                     Category = \"Metal\",\n                     Type = \"Palladium\",\n                     Spread = 0.01,\n                     Open = 600.55,\n                     Price = 601.0005,\n                     Buy = 600.9955,\n                     Sell = 601.0055,\n                     Change = 0.4505,\n                     ChangePercent = 0.075,\n                     Volume = 651,\n                     DailyHigh = 607.20,\n                     DailyLow = 598.40,\n                     YearlyHigh = 690,\n                     YearlyLow = 458.6,\n                     YearlyStart = 574.3,\n                     ChangeOnYear = 4.6492\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Oil\",\n                     Spread = 0.015,\n                     Open = 45.54,\n                     Price = 45.7899,\n                     Buy = 45.7824,\n                     Sell = 45.7974,\n                     Change = 0.2499,\n                     ChangePercent = 0.5487,\n                     Volume = 107196,\n                     DailyHigh = 45.94,\n                     DailyLow = 45.00,\n                     YearlyHigh = 65.28,\n                     YearlyLow = 30.79,\n                     YearlyStart = 48.035,\n                     ChangeOnYear = -4.6739\n                },\n                new PortfolioInfo\n                {\n                    Category = \"Oil\",\n                    Type = \"Brent\",\n                    Spread = 0.01,\n                    Open = 46.06,\n                    Price = 46.05,\n                    Buy = 46.06,\n                    Sell = 46.06,\n                    Change = -0.01,\n                    ChangePercent = -0.0217,\n                    Volume = 59818,\n                    DailyHigh = 46.48,\n                    DailyLow = 45.60,\n                    YearlyHigh = 71.14,\n                    YearlyLow = 30.02,\n                    YearlyStart = 50.58,\n                    ChangeOnYear = -8.9561\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Natural Gas\",\n                     Spread = 0.02,\n                     Open = 2.094,\n                     Price = 2.104,\n                     Buy = 2.094,\n                     Sell = 2.094,\n                     Change = 0.01,\n                     ChangePercent = 0.4776,\n                     Volume = 2783,\n                     DailyHigh = 2.11,\n                     DailyLow = 2.09,\n                     YearlyHigh = 3.20,\n                     YearlyLow = 1.84,\n                     YearlyStart = 2.52,\n                     ChangeOnYear = -16.5079\n                },\n                new PortfolioInfo\n                {\n                    Category = \"Oil\",\n                    Type = \"Gas\",\n                    Spread = 0.015,\n                    Open = 1.5086,\n                    Price = 1.9532,\n                    Buy = 1.9457,\n                    Sell = 1.9607,\n                    Change = 0.4446,\n                    ChangePercent = 29.4686,\n                    Volume = 2646,\n                    DailyHigh = 1.9532,\n                    DailyLow = 1.50,\n                    YearlyHigh = 2.05,\n                    YearlyLow = 1.15,\n                    YearlyStart = 1.60,\n                    ChangeOnYear = 22.0727\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Diesel\",\n                     Spread = 0.015,\n                     Open = 1.3474,\n                     Price = 1.3574,\n                     Buy = 1.3474,\n                     Sell = 1.3474,\n                     Change = 0.01,\n                     ChangePercent = 0.7422,\n                     Volume = 2971,\n                     DailyHigh = 1.36,\n                     DailyLow = 1.34,\n                     YearlyHigh = 2.11,\n                     YearlyLow = 0.92,\n                     YearlyStart = 1.515,\n                     ChangeOnYear = -10.4026\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Ethanol\",\n                     Spread = 0.01,\n                     Open = 1.512,\n                     Price = 2.7538,\n                     Buy = 2.7488,\n                     Sell = 2.7588,\n                     Change = 1.2418,\n                     ChangePercent = 82.1323,\n                     Volume = 14,\n                     DailyHigh = 2.7538,\n                     DailyLow = 1.1168,\n                     YearlyHigh = 2.7538,\n                     YearlyLow = 1.1168,\n                     YearlyStart = 1.475,\n                     ChangeOnYear = 86.7011\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Crude\",\n                     Spread = 0.02,\n                     Open = 27.55,\n                     Price = 27.58,\n                     Buy = 27.55,\n                     Sell = 27.55,\n                     Change = 0.03,\n                     ChangePercent = 0.1089,\n                     Volume = 1200,\n                     DailyHigh = 27.55,\n                     DailyLow = 27.55,\n                     YearlyHigh = 29.32,\n                     YearlyLow = 21.28,\n                     YearlyStart = 25.30,\n                     ChangeOnYear = 9.0119\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Oil\",\n                     Type = \"Coal\",\n                     Spread = 0.015,\n                     Open = 0.4363,\n                     Price = 0.4163,\n                     Buy = 0.4363,\n                     Sell = 0.4363,\n                     Change = -0.02,\n                     ChangePercent = -4.584,\n                     Volume = 300,\n                     DailyHigh = 0.4363,\n                     DailyLow = 0.4363,\n                     YearlyHigh = 0.4841,\n                     YearlyLow = 0.3954,\n                     YearlyStart = 0.4398,\n                     ChangeOnYear = -5.3326\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Wheat\",\n                     Spread = 0.01,\n                     Open = 465.50,\n                     Price = 465.52,\n                     Buy = 465.50,\n                     Sell = 465.50,\n                     Change = 0.02,\n                     ChangePercent = 0.0043,\n                     Volume = 4318,\n                     DailyHigh = 467.00,\n                     DailyLow = 463.25,\n                     YearlyHigh = 628.50,\n                     YearlyLow = 449.50,\n                     YearlyStart = 539.00,\n                     ChangeOnYear = -13.6327\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Corn\",\n                     Spread = 0.01,\n                     Open = 379.50,\n                     Price = 379.8026,\n                     Buy = 379.7976,\n                     Sell = 379.8076,\n                     Change = 0.3026,\n                     ChangePercent = 0.0797,\n                     Volume = 11266,\n                     DailyHigh = 381.00,\n                     DailyLow = 377.75,\n                     YearlyHigh = 471.25,\n                     YearlyLow = 351.25,\n                     YearlyStart = 411.25,\n                     ChangeOnYear = -7.6468\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Sugar\",\n                     Spread = 0.01,\n                     Open = 15.68,\n                     Price = 14.6742,\n                     Buy = 14.6692,\n                     Sell = 14.6792,\n                     Change = -1.0058,\n                     ChangePercent = -6.4146,\n                     Volume = 4949,\n                     DailyHigh = 15.70,\n                     DailyLow = 14.6742,\n                     YearlyHigh = 16.87,\n                     YearlyLow = 11.37,\n                     YearlyStart = 14.12,\n                     ChangeOnYear = 3.9249\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Soybean\",\n                     Spread = 0.01,\n                     Open = 1038.00,\n                     Price = 1038.6171,\n                     Buy = 1038.6121,\n                     Sell = 1038.6221,\n                     Change = 0.6171,\n                     ChangePercent = 0.0595,\n                     Volume = 20356,\n                     DailyHigh = 1044.00,\n                     DailyLow = 1031.75,\n                     YearlyHigh = 1057.00,\n                     YearlyLow = 859.50,\n                     YearlyStart = 958.25,\n                     ChangeOnYear = 8.3869\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Soy oil\",\n                     Spread = 0.01,\n                     Open = 33.26,\n                     Price = 33.7712,\n                     Buy = 33.7662,\n                     Sell = 33.7762,\n                     Change = 0.5112,\n                     ChangePercent = 1.5371,\n                     Volume = 10592,\n                     DailyHigh = 33.7712,\n                     DailyLow = 33.06,\n                     YearlyHigh = 35.43,\n                     YearlyLow = 26.61,\n                     YearlyStart = 31.02,\n                     ChangeOnYear = 8.8692\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Soy Meat\",\n                     Spread = 0.01,\n                     Open = 342.60,\n                     Price = 342.62,\n                     Buy = 342.60,\n                     Sell = 342.60,\n                     Change = 0.02,\n                     ChangePercent = 0.0058,\n                     Volume = 5646,\n                     DailyHigh = 345.40,\n                     DailyLow = 340.30,\n                     YearlyHigh = 353.40,\n                     YearlyLow = 261.70,\n                     YearlyStart = 307.55,\n                     ChangeOnYear = 11.403\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"OJ Future\",\n                     Spread = 0.01,\n                     Open = 140.60,\n                     Price = 140.1893,\n                     Buy = 140.1843,\n                     Sell = 140.1943,\n                     Change = -0.4107,\n                     ChangePercent = -0.2921,\n                     Volume = 7000,\n                     DailyHigh = 140.1893,\n                     DailyLow = 0.00,\n                     YearlyHigh = 155.95,\n                     YearlyLow = 113.00,\n                     YearlyStart = 134.475,\n                     ChangeOnYear = 4.2493\n                },\n                new PortfolioInfo\n                {\n                    Category = \"Agriculture\",\n                    Type = \"Coffee\",\n                    Spread = 0.01,\n                    Open = 125.70,\n                    Price = 125.69,\n                    Buy = 125.70,\n                    Sell = 125.70,\n                    Change = -0.01,\n                    ChangePercent = -0.008,\n                    Volume = 1654,\n                    DailyHigh = 125.80,\n                    DailyLow = 125.00,\n                    YearlyHigh = 155.75,\n                    YearlyLow = 115.35,\n                    YearlyStart = 135.55,\n                    ChangeOnYear = -7.2741\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Cocoa\",\n                     Spread = 0.01,\n                     Open = 3076.00,\n                     Price = 3076.03,\n                     Buy = 3076.00,\n                     Sell = 3076.00,\n                     Change = 0.03,\n                     ChangePercent = 0.001,\n                     Volume = 978,\n                     DailyHigh = 3078.00,\n                     DailyLow = 3066.00,\n                     YearlyHigh = 3406.00,\n                     YearlyLow = 2746.00,\n                     YearlyStart = 3076.00,\n                     ChangeOnYear = 0.001\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Rice\",\n                     Spread = 0.01,\n                     Open = 11.245,\n                     Price = 10.4154,\n                     Buy = 10.4104,\n                     Sell = 10.4204,\n                     Change = -0.8296,\n                     ChangePercent = -7.3779,\n                     Volume = 220,\n                     DailyHigh = 11.38,\n                     DailyLow = 10.4154,\n                     YearlyHigh = 14.14,\n                     YearlyLow = 9.70,\n                     YearlyStart = 11.92,\n                     ChangeOnYear = -12.6228\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Oats\",\n                     Spread = 0.01,\n                     Open = 194.50,\n                     Price = 194.2178,\n                     Buy = 194.2128,\n                     Sell = 194.2228,\n                     Change = -0.2822,\n                     ChangePercent = -0.1451,\n                     Volume = 640,\n                     DailyHigh = 195.75,\n                     DailyLow = 194.00,\n                     YearlyHigh = 241.25,\n                     YearlyLow = 183.75,\n                     YearlyStart = 212.50,\n                     ChangeOnYear = -8.6034\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Milk\",\n                     Spread = 0.01,\n                     Open = 12.87,\n                     Price = 12.86,\n                     Buy = 12.87,\n                     Sell = 12.87,\n                     Change = -0.01,\n                     ChangePercent = -0.0777,\n                     Volume = 7000,\n                     DailyHigh = 12.89,\n                     DailyLow = 12.81,\n                     YearlyHigh = 16.96,\n                     YearlyLow = 12.81,\n                     YearlyStart = 14.885,\n                     ChangeOnYear = -13.6043\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Cotton\",\n                     Spread = 0.01,\n                     Open = 61.77,\n                     Price = 61.76,\n                     Buy = 61.77,\n                     Sell = 61.77,\n                     Change = -0.01,\n                     ChangePercent = -0.0162,\n                     Volume = 3612,\n                     DailyHigh = 62.06,\n                     DailyLow = 61.32,\n                     YearlyHigh = 67.59,\n                     YearlyLow = 54.33,\n                     YearlyStart = 60.96,\n                     ChangeOnYear = 1.3123\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Agriculture\",\n                     Type = \"Lumber\",\n                     Spread = 0.01,\n                     Open = 303.90,\n                     Price = 304.5994,\n                     Buy = 304.5944,\n                     Sell = 304.6044,\n                     Change = 0.6994,\n                     ChangePercent = 0.2302,\n                     Volume = 200,\n                     DailyHigh = 304.5994,\n                     DailyLow = 303.90,\n                     YearlyHigh = 317.10,\n                     YearlyLow = 236.00,\n                     YearlyStart = 276.55,\n                     ChangeOnYear = 10.1426\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Livestock\",\n                     Type = \"LV Cattle\",\n                     Spread = 0.01,\n                     Open = 120.725,\n                     Price = 120.705,\n                     Buy = 120.725,\n                     Sell = 120.725,\n                     Change = -0.02,\n                     ChangePercent = -0.0166,\n                     Volume = 4000,\n                     DailyHigh = 120.725,\n                     DailyLow = 120.725,\n                     YearlyHigh = 147.98,\n                     YearlyLow = 113.90,\n                     YearlyStart = 130.94,\n                     ChangeOnYear = -7.8166\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Livestock\",\n                     Type = \"FD Cattle\",\n                     Spread = 0.01,\n                     Open = 147.175,\n                     Price = 148.6065,\n                     Buy = 148.6015,\n                     Sell = 148.6115,\n                     Change = 1.4315,\n                     ChangePercent = 0.9727,\n                     Volume = 500,\n                     DailyHigh = 148.6065,\n                     DailyLow = 147.175,\n                     YearlyHigh = 190.00,\n                     YearlyLow = 138.10,\n                     YearlyStart = 164.05,\n                     ChangeOnYear = -9.4139\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Livestock\",\n                     Type = \"Lean Hogs\",\n                     Spread = 0.01,\n                     Open = 81.275,\n                     Price = 81.8146,\n                     Buy = 81.8096,\n                     Sell = 81.8196,\n                     Change = 0.5396,\n                     ChangePercent = 0.664,\n                     Volume = 1000,\n                     DailyHigh = 81.8146,\n                     DailyLow = 81.275,\n                     YearlyHigh = 83.98,\n                     YearlyLow = 70.25,\n                     YearlyStart = 77.115,\n                     ChangeOnYear = 6.0943\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"USD IDX Future\",\n                     Spread = 0.02,\n                     Open = 93.88,\n                     Price = 93.7719,\n                     Buy = 93.7619,\n                     Sell = 93.7819,\n                     Change = -0.1081,\n                     ChangePercent = -0.1151,\n                     Volume = 5788,\n                     DailyHigh = 94.05,\n                     DailyLow = 93.7534,\n                     YearlyHigh = 100.70,\n                     YearlyLow = 91.88,\n                     YearlyStart = 96.29,\n                     ChangeOnYear = -2.6151\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"USD/JPY Future\",\n                     Spread = 0.02,\n                     Open = 9275.50,\n                     Price = 9277.3342,\n                     Buy = 9277.3242,\n                     Sell = 9277.3442,\n                     Change = 1.8342,\n                     ChangePercent = 0.0198,\n                     Volume = 47734,\n                     DailyHigh = 9277.3342,\n                     DailyLow = 0.93,\n                     YearlyHigh = 9483.00,\n                     YearlyLow = 0.93,\n                     YearlyStart = 4741.965,\n                     ChangeOnYear = 95.6432\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"GBP/USD Future\",\n                     Spread = 0.02,\n                     Open = 1.4464,\n                     Price = 1.1941,\n                     Buy = 1.1841,\n                     Sell = 1.2041,\n                     Change = -0.2523,\n                     ChangePercent = -17.4441,\n                     Volume = 29450,\n                     DailyHigh = 1.45,\n                     DailyLow = 1.1941,\n                     YearlyHigh = 1.59,\n                     YearlyLow = 1.1941,\n                     YearlyStart = 1.485,\n                     ChangeOnYear = -19.59\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"AUD/USD Future\",\n                     Spread = 0.02,\n                     Open = 0.7344,\n                     Price = 0.7444,\n                     Buy = 0.7344,\n                     Sell = 0.7344,\n                     Change = 0.01,\n                     ChangePercent = 1.3617,\n                     Volume = 36764,\n                     DailyHigh = 0.74,\n                     DailyLow = 0.73,\n                     YearlyHigh = 0.79,\n                     YearlyLow = 0.68,\n                     YearlyStart = 0.735,\n                     ChangeOnYear = 1.2789\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"USD/CAD Future\",\n                     Spread = 0.02,\n                     Open = 0.7744,\n                     Price = 0.9545,\n                     Buy = 0.9445,\n                     Sell = 0.9645,\n                     Change = 0.1801,\n                     ChangePercent = 23.2622,\n                     Volume = 13669,\n                     DailyHigh = 0.9545,\n                     DailyLow = 0.77,\n                     YearlyHigh = 0.9545,\n                     YearlyLow = 0.68,\n                     YearlyStart = 0.755,\n                     ChangeOnYear = 26.4295\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Currencies\",\n                     Type = \"USD/CHF Future\",\n                     Spread = 0.02,\n                     Open = 1.0337,\n                     Price = 1.0437,\n                     Buy = 1.0337,\n                     Sell = 1.0337,\n                     Change = 0.01,\n                     ChangePercent = 0.9674,\n                     Volume = 5550,\n                     DailyHigh = 1.03,\n                     DailyLow = 1.03,\n                     YearlyHigh = 1.11,\n                     YearlyLow = 0.98,\n                     YearlyStart = 1.045,\n                     ChangeOnYear = -0.1244\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Index\",\n                     Type = \"DOW Future\",\n                     Spread = 0.01,\n                     Open = 17711.00,\n                     Price = 17712.1515,\n                     Buy = 17712.1465,\n                     Sell = 17712.1565,\n                     Change = 1.1515,\n                     ChangePercent = 0.0065,\n                     Volume = 22236,\n                     DailyHigh = 17727.00,\n                     DailyLow = 17642.00,\n                     YearlyHigh = 18083.00,\n                     YearlyLow = 15299.00,\n                     YearlyStart = 16691.00,\n                     ChangeOnYear = 6.118\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Index\",\n                     Type = \"S&P Future\",\n                     Spread = 0.01,\n                     Open = 2057.50,\n                     Price = 2056.6018,\n                     Buy = 2056.5968,\n                     Sell = 2056.6068,\n                     Change = -0.8982,\n                     ChangePercent = -0.0437,\n                     Volume = 142780,\n                     DailyHigh = 2059.50,\n                     DailyLow = 2049.00,\n                     YearlyHigh = 2105.50,\n                     YearlyLow = 1794.50,\n                     YearlyStart = 1950.00,\n                     ChangeOnYear = 5.4668\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Index\",\n                     Type = \"NAS Future\",\n                     Spread = 0.01,\n                     Open = 4341.25,\n                     Price = 4341.28,\n                     Buy = 4341.25,\n                     Sell = 4341.25,\n                     Change = 0.03,\n                     ChangePercent = 0.0007,\n                     Volume = 18259,\n                     DailyHigh = 4347.00,\n                     DailyLow = 4318.00,\n                     YearlyHigh = 4719.75,\n                     YearlyLow = 3867.75,\n                     YearlyStart = 4293.75,\n                     ChangeOnYear = 1.107\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Index\",\n                     Type = \"S&P MID MINI\",\n                     Spread = 0.01,\n                     Open = 1454.30,\n                     Price = 1455.7812,\n                     Buy = 1455.7762,\n                     Sell = 1455.7862,\n                     Change = 1.4812,\n                     ChangePercent = 0.1018,\n                     Volume = 3380,\n                     DailyHigh = 1455.7812,\n                     DailyLow = 1448.00,\n                     YearlyHigh = 1527.30,\n                     YearlyLow = 1236.00,\n                     YearlyStart = 1381.65,\n                     ChangeOnYear = 5.3654\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Index\",\n                     Type = \"S&P 600 MINI\",\n                     Spread = 0.01,\n                     Open = 687.90,\n                     Price = 687.88,\n                     Buy = 687.90,\n                     Sell = 687.90,\n                     Change = -0.02,\n                     ChangePercent = -0.0029,\n                     Volume = 3340,\n                     DailyHigh = 0.00,\n                     DailyLow = 0.00,\n                     YearlyHigh = 620.32,\n                     YearlyLow = 595.90,\n                     YearlyStart = 608.11,\n                     ChangeOnYear = 13.1177\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Interest Rate\",\n                     Type = \"US 30YR Future\",\n                     Spread = 0.01,\n                     Open = 164.875,\n                     Price = 164.1582,\n                     Buy = 164.1532,\n                     Sell = 164.1632,\n                     Change = -0.7168,\n                     ChangePercent = -0.4347,\n                     Volume = 28012,\n                     DailyHigh = 165.25,\n                     DailyLow = 164.0385,\n                     YearlyHigh = 169.38,\n                     YearlyLow = 151.47,\n                     YearlyStart = 160.425,\n                     ChangeOnYear = 2.3271\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Interest Rate\",\n                     Type = \"US 2Y Future\",\n                     Spread = 0.01,\n                     Open = 109.3984,\n                     Price = 109.3884,\n                     Buy = 109.3984,\n                     Sell = 109.3984,\n                     Change = -0.01,\n                     ChangePercent = -0.0091,\n                     Volume = 17742,\n                     DailyHigh = 109.41,\n                     DailyLow = 109.38,\n                     YearlyHigh = 109.80,\n                     YearlyLow = 108.62,\n                     YearlyStart = 109.21,\n                     ChangeOnYear = 0.1634\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Interest Rate\",\n                     Type = \"US 10YR Future\",\n                     Spread = 0.01,\n                     Open = 130.5625,\n                     Price = 130.5825,\n                     Buy = 130.5625,\n                     Sell = 130.5625,\n                     Change = 0.02,\n                     ChangePercent = 0.0153,\n                     Volume = 189310,\n                     DailyHigh = 130.63,\n                     DailyLow = 130.44,\n                     YearlyHigh = 132.64,\n                     YearlyLow = 125.48,\n                     YearlyStart = 129.06,\n                     ChangeOnYear = 1.1797\n                },\n                new PortfolioInfo\n                {\n                     Category = \"Interest Rate\",\n                     Type = \"Euro$ 3M\",\n                     Spread = 0.01,\n                     Open = 99.18,\n                     Price = 99.17,\n                     Buy = 99.18,\n                     Sell = 99.18,\n                     Change = -0.01,\n                     ChangePercent = -0.0101,\n                     Volume = 29509,\n                     DailyHigh = 99.18,\n                     DailyLow = 99.17,\n                     YearlyHigh = 99.38,\n                     YearlyLow = 98.41,\n                     YearlyStart = 98.895,\n                     ChangeOnYear = 0.2781\n                }\n\n            };\n\n            return data;\n        }\n        #endregion\n\n        public static List<PortfolioInfo> UpdateAllPrices(List<PortfolioInfo> data)\n        {\n            var updateItems = new List<PortfolioInfo>();\n            foreach (var item in data)\n            {\n                var changeItem = item.Clone();\n                RandomizeDataValues(changeItem as PortfolioInfo);\n                updateItems.Add(changeItem);\n            }\n            return updateItems;\n        }\n\n        public static List<PortfolioInfo> UpdateRandomPrices(List<PortfolioInfo> data)\n        {\n            var updateItems = new List<PortfolioInfo>();\n            foreach (var item in data)\n            {\n                updateItems.Add(item.Clone());\n            }\n            var updatedCount = 0;\n            var start = (int)Math.Round(random.NextDouble() * 10);\n            var step = (int)Math.Round(random.NextDouble() * 10);\n            for (var i = start; i < data.Count; i += step)\n            {\n                var item = data[i].Clone();\n                RandomizeDataValues(item as PortfolioInfo);\n                updateItems[i] = item;\n                updatedCount++;\n            }\n            return data;\n        }\n\n        public static void RandomizeDataValues(PortfolioInfo item)\n        {\n            var priceChange = DataRandomizer.GetPriceChange(item.Price);\n            item.Change = priceChange.ByAmount;\n            item.Price = priceChange.New;\n            item.ChangePercent = priceChange.Percentage;\n        }\n    }\n\n    public static class DataRandomizer\n    {\n        public static Random random = new Random();\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetInteger(10, 12);\n            var day = GetInteger(10, 25);\n            return new DateTime(year, month, day);\n        }\n\n        public static object GetItem(IList list)\n        {\n            var index = GetInteger(0, list.Count - 1);\n            return list[index];\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (random.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static PriceChange GetPriceChange(double oldPrice)\n        {\n            var rnd = float.Parse(random.NextDouble().ToString(\"N2\"));\n            var volatility = 2;\n            var changePercent = 2 * volatility * rnd;\n            if (changePercent > volatility)\n            {\n                changePercent -= (2 * volatility);\n            }\n\n            var changeAmount = oldPrice * (changePercent / 100);\n            var newPrice = oldPrice + changeAmount;\n\n            var result = new PriceChange();\n            result.ByAmount = changeAmount;\n            result.New = Math.Round(newPrice * 100) / 100;\n            result.Old = Math.Round(oldPrice * 100) / 100;\n            result.Percentage = Math.Round(changePercent * 100) / 100;\n\n            return result;\n        }\n    }\n\n    public class PriceChange {\n        public double New { get; set; }\n        public double Old { get; set; }\n        public double ByAmount { get; set; }\n        public double Percentage { get; set; }\n    }\n\n    public class PortfolioInfo\n    {\n        public PortfolioInfo Clone()\n        {\n            return (PortfolioInfo)this.MemberwiseClone();\n        }\n        public double PriceHeat { get; set; }\n\n        public string IndGroup { get; set; }\n        public string IndSector { get; set; }\n        public string IndCategory { get; set; }\n        public string Fitch { get; set; }\n        public string Collateral { get; set; }\n        public string Transactions { get; set; }\n        public double CPN { get; set; }\n        public double Spread { get; set; }\n        public double KRD_3YR { get; set; }\n        public double KRD_5YR { get; set; }\n        public double KRD_1YR { get; set; }\n        public DateTime Maturity { get; set; }\n\n        public int ID { get; set; }\n        public string Settlement { get; set; }\n        public string Category { get; set; }\n        public string Contract { get; set; }\n        public string Country { get; set; }\n        public string Currency { get; set; }\n        public string Type { get; set; }\n\n        public double Open { get; set; }\n        public double Price { get; set; }\n        public double Buy { get; set; }\n        public string Rating { get; set; }\n        public string Region { get; set; }\n        public string Risk { get; set; }\n        public double Sell { get; set; }\n        public string Sector { get; set; }\n        public string Security { get; set; }\n        public string Issuer { get; set; }\n        public double Change { get; set; }\n        public double ChangePercent { get; set; }\n        public double Volume { get; set; }\n\n        public double DailyHigh { get; set; }\n        public double DailyLow { get; set; }\n\n        public double YearlyHigh { get; set; }\n        public double YearlyLow { get; set; }\n        public double YearlyStart { get; set; }\n        public double ChangeOnYear { get; set; }\n    }\n\n    public class UpdateResponse\n    {\n        public List<object> Data { get; set; }\n        public int RecordsUpdated { get; set; }\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/type-marketing-table/wwwroot/DataGridTypeMarketingTable.js",
    "content": "// NOTE this JavaScript file implements functions for styling/templating columnd of the DataGrid control\r\n// at end of this file, the igRegisterScript registers functions that are used .razor file\r\n\r\nvar valuesIncreasedColor = \"#4EB862\";\r\nvar valuesDecreasedColor = \"#FF134A\";\r\nvar valuesDecreasedBorder = \"4px solid #FF134A\";\r\nvar valuesIncreasedBorder = \"4px solid #4EB862\";\r\n\r\nfunction onPriceStyleKey(column, args) {\r\n    var data = column.i.grid.actualDataSource.dataSource;\r\n    var row = null;\r\n    if (column.i.grid) {\r\n        row = column.i.grid.actualDataSource.getItemAtIndex(args.rowNumber);\r\n    } else {\r\n        row = data[args.rowNumber];\r\n    }\r\n    if (row.Change >= 0) {\r\n        args.styleKey = \"priceShiftUp\";\r\n    } else {\r\n        args.styleKey = \"priceShiftDown\";\r\n    }\r\n}\r\n\r\nfunction onPriceCellUpdating(grid, args) {\r\n    let item = args.cellInfo.rowItem;\r\n    let priceShiftUp = item.Change >= 0;\r\n    let templ = args.cellInfo;\r\n\r\n    if (args.isCanvasBased) {\r\n        let resized = args.ensureCorrectSize();\r\n        if (resized || args.cellInfo.isContentDirty) {\r\n            args.renderStandardBackground();\r\n\r\n            let context = args.context;\r\n\r\n            let iconText = \"trending_up\";\r\n            let iconColor = valuesIncreasedColor;\r\n\r\n            let scale = window.devicePixelRatio;\r\n            if (scale !== 1.0) {\r\n                context.save();\r\n                context.scale(scale, scale);\r\n            }\r\n\r\n            if (priceShiftUp) {\r\n                iconText = \"trending_up\";\r\n                iconColor = valuesIncreasedColor;\r\n            } else {\r\n                iconText = \"trending_down\";\r\n                iconColor = valuesDecreasedColor;\r\n            }\r\n\r\n            // context.fillStyle = \"blue\";\r\n            // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\r\n            let txt = \"$\" + (+templ.value).toFixed(2);\r\n            context.font = \"13px Verdana\";\r\n            let width = context.measureText(txt).width;\r\n\r\n            context.font = \"13px 'Material Icons'\";\r\n            let iconWidth = context.measureText(iconText).width;\r\n\r\n            let totalWidth = width + iconWidth;\r\n            context.font = \"13px Verdana\";\r\n            context.fillStyle = iconColor;\r\n            context.textBaseline = \"top\";\r\n            context.fillText(txt, templ.width - (totalWidth + 5), (templ.height / 2.0) - 7);\r\n\r\n            context.font = \"13px 'Material Icons'\";\r\n            context.fillStyle = iconColor;\r\n            context.textBaseline = \"top\";\r\n            context.fillText(iconText, templ.width - (iconWidth + 5), (templ.height / 2.0) - 7);\r\n\r\n            if (scale !== 1.0) {\r\n                context.restore();\r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var content = args.content;\r\n    var sp;\r\n    var icon;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n        icon = content.children[1];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        icon = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n        content.appendChild(icon);\r\n        icon.style.fontFamily = \"Material Icons\";\r\n        icon.style.fontSize = \"13px\";\r\n        icon.style.fontFeatureSettings = \"liga\";\r\n        icon.style.verticalAlign = \"center\";\r\n    }\r\n\r\n    sp.textContent = \"$\" + (+templ.value).toFixed(2);\r\n\r\n    if ((sp).__isUp === undefined ||\r\n        (sp).__isUp !== priceShiftUp) {\r\n        (sp).__isUp = priceShiftUp;\r\n        if (priceShiftUp) {\r\n            icon.textContent = \"trending_up\";\r\n            icon.style.color = valuesIncreasedColor;\r\n            sp.style.color = valuesIncreasedColor;\r\n        } else {\r\n            icon.textContent = \"trending_down\";\r\n            icon.style.color = valuesDecreasedColor;\r\n            sp.style.color = valuesDecreasedColor;\r\n        }\r\n    }\r\n}\r\n\r\nfunction onPricePercentStyleKey(grid, args) {\r\n    if (args.resolvedValue >= 0) {\r\n        args.styleKey = \"pricePercentUp\";\r\n    } else {\r\n        args.styleKey = \"pricePercentDown\";\r\n    }\r\n}\r\n\r\nfunction onPricePercentCellUpdating(grid, args) {\r\n    let templ = args.cellInfo;\r\n    let priceShiftUp = templ.value >= 0;\r\n\r\n    if (args.isCanvasBased) {\r\n        let resized = args.ensureCorrectSize();\r\n        if (resized || args.cellInfo.isContentDirty) {\r\n            args.renderStandardBackground();\r\n\r\n            let context = args.context;\r\n\r\n            let iconColor = valuesIncreasedColor;\r\n\r\n            let scale = window.devicePixelRatio;\r\n            if (scale !== 1.0) {\r\n                context.save();\r\n                context.scale(scale, scale);\r\n            }\r\n\r\n            if (priceShiftUp) {\r\n                iconColor = valuesIncreasedColor;\r\n            } else {\r\n                iconColor = valuesDecreasedColor;\r\n            }\r\n\r\n            // context.fillStyle = \"blue\";\r\n            // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\r\n            let txt = (+templ.value).toFixed(2) + \"%\";\r\n            context.font = \"13px Verdana\";\r\n            let width = context.measureText(txt).width;\r\n\r\n            let totalWidth = width + 4;\r\n\r\n            context.font = \"13px Verdana\";\r\n            context.fillStyle = templ.textColor;\r\n            context.textBaseline = \"top\";\r\n            context.fillText(txt, templ.width - (totalWidth + 10), (templ.height / 2.0) - 7);\r\n\r\n            context.font = \"13px 'Material Icons'\";\r\n            context.fillStyle = iconColor;\r\n            context.fillRect(templ.width - (5 + 4), (templ.height / 2.0) - 8, 4, 16);\r\n\r\n            if (scale !== 1.0) {\r\n                context.restore();\r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var content = args.content;\r\n    var sp;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n    }\r\n\r\n    sp.textContent = (+templ.value).toFixed(2) + \"%\";\r\n    if ((sp).__isUp === undefined ||\r\n        (sp).__isUp !== priceShiftUp) {\r\n        (sp).__isUp = priceShiftUp;\r\n        if (priceShiftUp) {\r\n            sp.style.paddingRight = \"5px\";\r\n            sp.style.borderRight = valuesIncreasedBorder;\r\n            // sp.style.color = valuesIncreasedColor;\r\n        } else {\r\n            sp.style.paddingRight = \"5px\";\r\n            sp.style.borderRight = valuesDecreasedBorder;\r\n            // sp.style.color = valuesDecreasedColor;\r\n        }\r\n    }\r\n}\r\n\r\nfunction onPriceAmountStyleKey(grid, args) {\r\n    if (args.resolvedValue >= 0) {\r\n        args.styleKey = \"priceAmountUp\";\r\n    } else {\r\n        args.styleKey = \"priceAmountDown\";\r\n    }\r\n}\r\n\r\nfunction onPriceAmountCellUpdating(grid, args) {\r\n    let templ = args.cellInfo;\r\n    let priceShiftUp = templ.value >= 0;\r\n\r\n    if (args.isCanvasBased) {\r\n        let resized = args.ensureCorrectSize();\r\n        if (resized || args.cellInfo.isContentDirty) {\r\n            args.renderStandardBackground();\r\n\r\n            let context = args.context;\r\n            let iconColor = valuesIncreasedColor;\r\n            let scale = window.devicePixelRatio;\r\n            if (scale !== 1.0) {\r\n                context.save();\r\n                context.scale(scale, scale);\r\n            }\r\n\r\n            if (priceShiftUp) {\r\n                iconColor = valuesIncreasedColor;\r\n            } else {\r\n                iconColor = valuesDecreasedColor;\r\n            }\r\n\r\n            // context.fillStyle = \"blue\";\r\n            // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\r\n            let txt = (+templ.value).toFixed(2);\r\n            context.font = \"13px Verdana\";\r\n            let width = context.measureText(txt).width;\r\n\r\n            let totalWidth = width + 4;\r\n            context.font = \"13px Verdana\";\r\n            context.fillStyle = templ.textColor;\r\n            context.textBaseline = \"top\";\r\n            context.fillText(txt, templ.width - (totalWidth + 10), (templ.height / 2.0) - 7);\r\n\r\n            context.font = \"13px 'Material Icons'\";\r\n            context.fillStyle = iconColor;\r\n            context.fillRect(templ.width - (5 + 4), (templ.height / 2.0) - 8, 4, 16);\r\n\r\n            if (scale !== 1.0) {\r\n                context.restore();\r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var content = args.content;\r\n    var sp;\r\n\r\n    if (content.childElementCount > 0) {\r\n        sp = content.children[0];\r\n    } else {\r\n        content.style.textAlign = \"right\";\r\n        sp = document.createElement(\"span\");\r\n        sp.style.font = \"13px Verdana\";\r\n        sp.style.verticalAlign = \"center\";\r\n        content.appendChild(sp);\r\n    }\r\n\r\n    sp.textContent = (+templ.value).toFixed(2);\r\n\r\n    if ((sp).__isUp === undefined ||\r\n        (sp).__isUp !== priceShiftUp) {\r\n        (sp).__isUp = priceShiftUp;\r\n        if (priceShiftUp) {\r\n            sp.style.paddingRight = \"5px\";\r\n            sp.style.borderRight = valuesIncreasedBorder;\r\n            // sp.style.color = valuesIncreasedColor;\r\n        } else {\r\n            sp.style.paddingRight = \"5px\";\r\n            sp.style.borderRight = valuesDecreasedBorder;\r\n            // sp.style.color = valuesDecreasedColor;\r\n        }\r\n    }\r\n}\r\n\r\nfunction onChartStyleKey(grid, args) {\r\n    args.styleKey = \"igComponent\";\r\n}\r\n\r\nfunction onChartCellUpdating(grid, args) {\r\n    if (args.isCanvasBased) {\r\n        return;\r\n    }\r\n\r\n    let content = args.content;\r\n    let icon;\r\n\r\n    if (content.childElementCount > 0) {\r\n        icon = content.children[0];\r\n        icon.onclick = (e) => {\r\n            // console.log(\"chart clicked!!\")\r\n            e.stopPropagation();\r\n        }\r\n    } else {\r\n        icon = document.createElement(\"span\");\r\n        content.appendChild(icon);\r\n        icon.style.fontFamily = \"Material Icons\";\r\n        icon.style.fontSize = \"13px\";\r\n        icon.style.fontFeatureSettings = \"liga\";\r\n        icon.style.verticalAlign = \"center\";\r\n        icon.textContent = \"insertchart_outlined\";\r\n    }\r\n}\r\n\r\nfunction onGridStyleKey(grid, args) {\r\n    args.styleKey = \"grid\";\r\n}\r\n\r\nfunction onGridCellUpdating(grid, args) {\r\n    if (args.isCanvasBased) {\r\n        return;\r\n    }\r\n\r\n    var content = args.content;\r\n    var icon;\r\n\r\n    if (content.childElementCount > 0) {\r\n        icon = content.children[0];\r\n        icon.onclick = (e) => {\r\n            // console.log(\"grid clicked!!\")\r\n            e.stopPropagation();\r\n        }\r\n    } else {\r\n        icon = document.createElement(\"span\");\r\n        content.appendChild(icon);\r\n        icon.style.fontFamily = \"Material Icons\";\r\n        icon.style.fontSize = \"13px\";\r\n        icon.style.fontFeatureSettings = \"liga\";\r\n        icon.style.verticalAlign = \"center\";\r\n        icon.textContent = \"tablechart\";\r\n    }\r\n}\r\n\r\nfunction onPriceDataBound(grid, args) {\r\n    let item = args.cellInfo.rowItem;\r\n    if (item === null) { return; }\r\n\r\n    if (item.PriceHeat > 0) { // && this.state.heatChecked) {\r\n        let p = +item.PriceHeat;\r\n        let minA = 1.0;\r\n        let maxA = 0.25;\r\n\r\n        let maxR = 0.0;\r\n        let minR = 1.0;\r\n        let minG = 1.0;\r\n        let maxG = 1.0;\r\n        let minB = 1.0;\r\n        let maxB = 0.0;\r\n\r\n        let a = minA + (maxA - minA) * p;\r\n        let r = minR + (maxR - minR) * p;\r\n        let g = minG + (maxG - minG) * p;\r\n        let b = minB + (maxB - minB) * p;\r\n        r = Math.round(r * 255.0);\r\n        g = Math.round(g * 255.0);\r\n        b = Math.round(b * 255.0);\r\n\r\n        let colorString = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        args.cellInfo.background = colorString;\r\n    }\r\n    else if (item.PriceHeat < 0) { //  && this.state.heatChecked) {\r\n        let p = +item.PriceHeat * -1.0;\r\n        let minA = 1.0;\r\n        let maxA = 0.25;\r\n\r\n        let minR = 1.0;\r\n        let maxR = 1.0;\r\n        let minG = 1.0;\r\n        let maxG = 0.0;\r\n        let minB = 1.0;\r\n        let maxB = 0.0;\r\n\r\n        let a = minA + (maxA - minA) * p;\r\n        let r = minR + (maxR - minR) * p;\r\n        let g = minG + (maxG - minG) * p;\r\n        let b = minB + (maxB - minB) * p;\r\n        r = Math.round(r * 255.0);\r\n        g = Math.round(g * 255.0);\r\n        b = Math.round(b * 255.0);\r\n\r\n        let colorString = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        args.cellInfo.background = colorString;\r\n    }\r\n    else {\r\n        args.cellInfo.background = \"white\";\r\n    }\r\n}\r\n\r\n// this code allows calling above functions from a .razor file\r\nigRegisterScript(\"onPriceStyleKey\", onPriceStyleKey, false);\r\nigRegisterScript(\"onPriceCellUpdating\", onPriceCellUpdating, false);\r\nigRegisterScript(\"onPriceDataBound\", onPriceDataBound, false);\r\n",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/type-marketing-table/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}