{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/localization/App.razor",
    "content": "\n@using Microsoft.AspNetCore.Components\n@using Microsoft.AspNetCore.Components.Rendering\n@using Microsoft.AspNetCore.Components.Forms\n@using Microsoft.AspNetCore.Components.RenderTree\n@using Microsoft.AspNetCore.Components.Web\n@inject HttpClient Http\n\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    @if (Employees != null)\n    {\n        <div style=\"overflow: hidden\">\n            <IgbDataGrid Height=\"100%\" Width=\"100%\"\n                    @ref=\"@DataGridRef\"\n                    RowHeight=\"50\"\n                    DataSource=\"Employees\"\n                    AutoGenerateColumns=\"false\"\n                    IsColumnOptionsEnabled=\"true\"\n                    IsGroupCollapsable=\"true\"\n                    ActivationMode=\"GridActivationMode.Cell\"\n                    SummaryScope=\"@SummaryScope.Root\"\n                    SelectionMode=\"DataGridSelectionMode.SingleRow\">\n\n                <IgbImageColumn IsEditable=\"false\" Width=\"@(\"*>120\")\" Field=\"Photo\" HeaderText=\"写真\" PaddingTop=\"5\" PaddingBottom=\"5\" PaddingRight=\"10\"\n                            HorizontalAlignment=\"@CellContentHorizontalAlignment.Stretch\"  />\n\n                <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Name\" HeaderText=\"名前\" />\n\n                <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"Sales\"\n                                HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" HeaderText=\"売上高\" />\n\n                <IgbNumericColumn Width=\"@(\"*>130\")\" Field=\"Salary\" PositivePrefix=\"$\"\n                            ShowGroupingSeparator=\"true\"\n                            MaxFractionDigits=\"0\"\n                            MinFractionDigits=\"0\"\n                            HeaderText=\"給料\"/>\n\n                <IgbNumericColumn Width=\"100\" Field=\"Age\" HorizontalAlignment=\"@CellContentHorizontalAlignment.Center\" HeaderText=\"年齢\"/>\n                <IgbDateTimeColumn Width=\"@(\"*>140\")\" Field=\"Birthday\" HeaderText=\"生年月日\" />\n\n                <IgbImageColumn IsEditable=\"false\" Width=\"@(\"*>110\")\" Field=\"CountryFlag\" HeaderText=\"国旗\" PaddingTop=\"5\" PaddingBottom=\"5\" PaddingRight=\"10\"\n                            HorizontalAlignment=\"@CellContentHorizontalAlignment.Stretch\" />\n\n                <IgbTextColumn Width=\"@(\"*>170\")\" Field=\"Address\" HeaderText=\"住所\"/>\n                <IgbTextColumn Width=\"@(\"*>130\")\" Field=\"Phone\" HeaderText=\"電話\"/>\n\n                <IgbTextColumn Width=\"@(\"*>120\")\" Field=\"Income\" HeaderText=\"所得\"/>\n\n            </IgbDataGrid>\n        </div>\n    }\n</div>\n\n@code {\n\n    private List<EmployeeJA> Employees;\n    private String GridStrings;\n    private IgbDataGrid _grid;\n    private IgbDataGrid DataGridRef\n    {\n        get { return _grid; }\n        set { _grid = value; Task.Delay(1).ContinueWith((t) => this.OnDataGridRef()); StateHasChanged(); }\n    }\n\n    protected override void OnInitialized()\n    {\n\n        this.Employees = EmployeeDataJA.Create(100, false);\n    }\n\n    private async Task OnDataGridRef()\n    {\n        var countryGroup = new IgbColumnGroupDescription() { Field = \"Country\", DisplayName = \"国\" };\n        var incomeGroup = new IgbColumnGroupDescription() { Field = \"Income\", DisplayName = \"所得\" };\n        this._grid.GroupDescriptions.Add(countryGroup);\n        this._grid.GroupDescriptions.Add(incomeGroup);\n\n        var ageSummary = new IgbColumnSummaryDescription() { Field = \"Age\", Operand = DataSourceSummaryOperand.Average };\n        var photoSummary = new IgbColumnSummaryDescription() { Field = \"Photo\", Operand = DataSourceSummaryOperand.Count };\n        var salarySummary = new IgbColumnSummaryDescription() { Field = \"Salary\", Operand = DataSourceSummaryOperand.Sum };\n        var saleSummary = new IgbColumnSummaryDescription() { Field = \"Sales\", Operand = DataSourceSummaryOperand.Max };\n\n        this._grid.SummaryDescriptions.Add(ageSummary);\n        this._grid.SummaryDescriptions.Add(photoSummary);\n        this._grid.SummaryDescriptions.Add(salarySummary);\n        this._grid.SummaryDescriptions.Add(saleSummary);\n\n        //Specific resource strings for Column-Options\n        await DataGridRef.SetCustomizedStringAsync(\"en\", DataGridResourceStrings());\n        //Specific resource strings for Summaries\n        await DataGridRef.ActualDataSource.SetCustomizedStringAsync(\"en\", DataGridResourceStrings());\n        await DataGridRef.InvalidateVisibleRowsAsync();\n    }\n\n    public string DataGridResourceStrings()\n    {\n        GridStrings =\n            \"{\\\"Apply\\\":\\\"適用\\\",\" +\n            \"\\\"Cancel\\\":\\\"キャンセル\\\",\" +\n            \"\\\"Clear_Column_Filter\\\":\\\"列フィルターをクリア\\\",\" +\n            \"\\\"Column_Move\\\":\\\"移動\\\",\" +\n            \"\\\"Column_Move_Left\\\":\\\"左\\\",\" +\n            \"\\\"Column_Move_Right\\\":\\\"右\\\",\" +\n            \"\\\"Column_Options_Summaries\\\":\\\"集計\\\",\" +\n            \"\\\"Column_Options_Summary_Average\\\":\\\"平均\\\",\" +\n            \"\\\"Column_Options_Summary_Count\\\":\\\"カウント\\\",\" +\n            \"\\\"Column_Options_Summary_Maximum\\\":\\\"最大値\\\",\" +\n            \"\\\"Column_Options_Summary_Minimum\\\":\\\"最小値\\\",\" +\n            \"\\\"Column_Options_Summary_Sum\\\":\\\"合計値\\\",\" +\n            \"\\\"Column_Pin\\\":\\\"ピン固定\\\",\" +\n            \"\\\"Column_Pin_Left\\\":\\\"左\\\",\" +\n            \"\\\"Column_Pin_Right\\\":\\\"右\\\",\" +\n            \"\\\"Column_Sort\\\":\\\"ソート\\\",\" +\n            \"\\\"Column_Sort_Ascending\\\":\\\"昇順\\\",\" +\n            \"\\\"Column_Sort_Descending\\\":\\\"降順\\\",\" +\n            \"\\\"ComparisonOperator_Bottom\\\":\\\"下\\\",\" +\n            \"\\\"ComparisonOperator_BottomPercentile\\\":\\\"下位の百分位数\\\",\" +\n            \"\\\"ComparisonOperator_Contains\\\":\\\"～を含む\\\",\" +\n            \"\\\"ComparisonOperator_DoesNotContain\\\":\\\"～を含まない\\\",\" +\n            \"\\\"ComparisonOperator_DoesNotEndWith\\\":\\\"～で終わらない\\\",\" +\n            \"\\\"ComparisonOperator_DoesNotMatch\\\":\\\"～と一致しない\\\",\" +\n            \"\\\"ComparisonOperator_DoesNotStartWith\\\":\\\"～で始まらない\\\",\" +\n            \"\\\"ComparisonOperator_Empty\\\":\\\"空\\\",\" +\n            \"\\\"ComparisonOperator_EndsWith\\\":\\\"次の値で終わる\\\",\" +\n            \"\\\"ComparisonOperator_Equals\\\":\\\"等しい\\\",\" +\n            \"\\\"ComparisonOperator_False\\\":\\\"False\\\",\" +\n            \"\\\"ComparisonOperator_GreaterThan\\\":\\\"次の値より大きい\\\",\" +\n            \"\\\"ComparisonOperator_GreaterThanOrEqualTo\\\":\\\"次の値より大きいまたは等しい\\\",\" +\n            \"\\\"ComparisonOperator_LastMonth\\\":\\\"先月\\\",\" +\n            \"\\\"ComparisonOperator_LastQuater\\\":\\\"前四半期\\\",\" +\n            \"\\\"ComparisonOperator_LastWeek\\\":\\\"先週\\\",\" +\n            \"\\\"ComparisonOperator_LastYear\\\":\\\"昨年\\\",\" +\n            \"\\\"ComparisonOperator_LessThan\\\":\\\"次の値より小さい\\\",\" +\n            \"\\\"ComparisonOperator_LessThanOrEqualTo\\\":\\\"次の値より小さいまたは等しい\\\",\" +\n            \"\\\"ComparisonOperator_NextMonth\\\":\\\"翌月\\\",\" +\n            \"\\\"ComparisonOperator_NextQuater\\\":\\\"翌四半期\\\",\" +\n            \"\\\"ComparisonOperator_NextWeek\\\":\\\"来週\\\",\" +\n            \"\\\"ComparisonOperator_NextYear\\\":\\\"翌年\\\",\" +\n            \"\\\"ComparisonOperator_NotEmpty\\\":\\\"空ではない\\\",\" +\n            \"\\\"ComparisonOperator_NotEquals\\\":\\\"次の値に等しくない\\\",\" +\n            \"\\\"ComparisonOperator_StartsWith\\\":\\\"～で始まる\\\",\" +\n            \"\\\"ComparisonOperator_ThisMonth\\\":\\\"今月\\\",\" +\n            \"\\\"ComparisonOperator_ThisQuarter\\\":\\\"本四半期\\\",\" +\n            \"\\\"ComparisonOperator_ThisWeek\\\":\\\"今週\\\",\" +\n            \"\\\"ComparisonOperator_ThisYear\\\":\\\"今年\\\",\" +\n            \"\\\"ComparisonOperator_Today\\\":\\\"今日\\\",\" +\n            \"\\\"ComparisonOperator_Tomorrow\\\":\\\"明日\\\",\" +\n            \"\\\"ComparisonOperator_Top\\\":\\\"上\\\",\" +\n            \"\\\"ComparisonOperator_TopPercentile\\\":\\\"上位の百分位数\\\",\" +\n            \"\\\"ComparisonOperator_True\\\":\\\"True\\\",\" +\n            \"\\\"ComparisonOperator_Yesterday\\\":\\\"昨日\\\",\" +\n            \"\\\"Filter_Columns_List\\\":\\\"列リストのフィルター...\\\",\" +\n            \"\\\"Search\\\":\\\"検索\\\",\" +\n            \"\\\"Select_All\\\":\\\"(すべて選択)\\\",\" +\n            \"\\\"DataSource_Summary_Avg\\\":\\\"平均\\\",\" +\n            \"\\\"DataSource_Summary_Count\\\":\\\"カウント\\\",\" +\n            \"\\\"DataSource_Summary_Max\\\":\\\"最大値\\\",\" +\n            \"\\\"DataSource_Summary_Min\\\":\\\"最小値\\\",\" +\n            \"\\\"DataSource_Summary_Sum\\\":\\\"合計値\\\"}\";\n        return GridStrings;\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/localization/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbDataGridModule),\n                typeof(IgbGridColumnOptionsModule)\n);\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/localization/Services/DataGeneratorJA.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Infragistics.Samples\n{\n    public static class DataGeneratorJA\n    {\n        readonly static string[] websites = { \".com\", \".gov\", \".edu\", \".org\" };\n        readonly static string[] emails = { \"gmail.com\", \"yahoo.com\", \"twitter.com\" };\n        readonly static string[] genders = { \"男\", \"女\" };\n        readonly static string[] maleNames = { \"カイル\", \"オスカー\", \"ラルフ\", \"マイク\", \"ビル\", \"フランク\", \"ハワード\", \"ジャック\", \"ラリー\", \"ピート\", \"スティーブ\", \"ヴィンス\", \"マーク\", \"アレックス\", \"マックス\", \"ブライアン\", \"クリス\", \"アンドリュー\", \"マーティン\", \"マイク\", \"スティーブ\", \"グレン\", \"ブルース\" };\n        readonly static string[] femaleNames = { \"ジーナ\", \"アイリーン\", \"ケイティー\", \"ブレンダ\", \"ケイシー\", \"フィオーナ\", \"ホリー\", \"ケイト\", \"リズ\", \"パメラ\", \"ネリー\", \"マルサ\", \"モニカ\", \"アンナ\", \"ジェシカ\", \"ソフィア\", \"イザベラ\", \"マーゴ\", \"ジェーン\", \"オードリー\", \"サリー\", \"メラニー\", \"グレタ\", \"オーロラ\", \"サリー\" };\n        readonly static string[] lastNames = { \"アダムス\", \"クローリー\", \"エリス\", \"マルチネス\", \"アーバイン\", \"マクスウェル\", \"クラーク\", \"オーエンス\", \"ルーニー\", \"リンカーン\", \"トーマス\", \"スペーシー\", \"モーガン\", \"キング\", \"ニュートン\", \"フィッツジェラルド\", \"ホームズ\", \"ジェファーソン\", \"ランドリー\", \"ベリー\", \"ペレス\", \"スペンサー\", \"スター\", \"カーター\", \"エドワーズ\", \"スターク\", \"ジョンソン\", \"フィッツ\", \"チーフ\", \"ブランク\", \"ペリー\", \"ストーン\", \"ウィリアムズ\", \"レーン\", \"ジョブズ\", \"アダムス\", \"パワー\", \"テスラ\" };\n        readonly static string[] countries = { \"アメリカ合衆国\", \"イギリス\", \"フランス\", \"カナダ\", \"ポーランド\" };\n        readonly static string[] citiesUS = { \"ニューヨーク\", \"ロサンゼルス\", \"マイアミ\", \"サンフランシスコ\", \"サンディエゴ\", \"ラスベガス\" };\n        readonly static string[] citiesUK = { \"ロンドン\", \"リバプール\", \"マンチェスター\" };\n        readonly static string[] citiesFR = { \"パリ\", \"マルセイユ\", \"リヨン\" };\n        readonly static string[] citiesCA = { \"トロント\", \"バンクーバー\", \"モントリオール\" };\n        readonly static string[] citiesPL = { \"クラクフ\", \"ワルシャワ\", \"ヴロツワフ\", \"グダニスク\" };\n        readonly static string[] citiesJP = { \"東京\", \"大阪\", \"京都\", \"横浜\" };\n        readonly static string[] citiesGR = { \"ベルリン\", \"ボン\", \"ケルン\", \"ミュンヘン\", \"ハンブルク\" };\n        readonly static string[] roadSuffixes = { \"通り\", \"通り\", \"通り\" };\n        readonly static string[] roadNames = { \"メイン\", \"ガーデン\", \"ブロード\", \"オーク\", \"シダー\", \"パーン\", \"パイン\", \"エルム\", \"マーケット\", \"ヒル\" };\n\n        public static Random Rand = new Random();\n\n        public static string GetWebsite()\n        {\n            return GetItem(websites);\n        }\n\n        public static string GetEmail()\n        {\n            return GetItem(emails);\n        }\n\n        public static double GetNumber(double min, double max)\n        {\n            return Math.Round(min + (Rand.NextDouble() * (max - min)));\n        }\n\n        public static int GetInteger(double min, double max)\n        {\n            return (int)GetNumber(min, max);\n        }\n\n        public static string GetPhone()\n        {\n            var phoneCode = GetNumber(100, 900);\n            var phoneNum1 = GetNumber(100, 900);\n            var phoneNum2 = GetNumber(1000, 9000);\n            var phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\n            return phone;\n        }\n\n        public static string GetGender()\n        {\n            return GetItem(genders);\n        }\n\n        public static string GetNameFirst(string gender)\n        {\n            if (gender == \"男\")\n                return GetItem(maleNames);\n            else\n                return GetItem(femaleNames);\n        }\n\n        public static string GetNameLast()\n        {\n            return GetItem(lastNames);\n        }\n\n        public static string GetItem(string[] array)\n        {\n            var index = (int)Math.Round(GetNumber(0, array.Length - 1));\n            return array[index];\n        }\n\n        public static string GetCountry()\n        {\n            return GetItem(countries);\n        }\n\n        public static string GetCity(string country)\n        {\n            if (country == \"カナダ\")\n            {\n                return GetItem(citiesCA);\n            }\n            else if (country == \"フランス\")\n            {\n                return GetItem(citiesFR);\n            }\n            else if (country == \"ポーランド\")\n            {\n                return GetItem(citiesPL);\n            }\n            else if (country == \"アメリカ合衆国\")\n            {\n                return GetItem(citiesUS);\n            }\n            else if (country == \"Japan\")\n            {\n                return GetItem(citiesJP);\n            }\n            else if (country == \"Germany\")\n            {\n                return GetItem(citiesGR);\n            }\n            else\n            {\n                return GetItem(citiesUK);\n            }\n        }\n\n        public static string GetStreet()\n        {\n            var num = Math.Round(GetNumber(100, 300)).ToString();\n            var road = GetItem(roadNames);\n            var suffix = GetItem(roadSuffixes);\n            return num + \" \" + road + \" \" + suffix;\n        }\n\n        public static DateTime GetBirthday()\n        {\n            var year = DateTime.Now.Year - GetInteger(30, 50);\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static DateTime GetDate()\n        {\n            var year = DateTime.Now.Year;\n            var month = GetNumber(10, 12);\n            var day = GetNumber(20, 27);\n            return new DateTime(year, (int)month, (int)day);\n        }\n\n        public static string Pad(int num, int size)\n        {\n            var s = num + \"\";\n            while (s.Length < size)\n            {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        public static string GetPhotoMale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GUY\" + Pad(id, 2) + \".png\";\n        }\n\n        public static string GetPhotoFemale(int id)\n        {\n            return \"https://static.infragistics.com/xplatform/images/people/GIRL\" + Pad(id, 2) + \".png\";\n        }\n\n        private static int maleCount = 0;\n        private static int femaleCount = 0;\n        public static string GetPhoto(string gender)\n        {\n            if (gender == \"男\")\n            {\n                maleCount++;\n                if (maleCount > 24) maleCount = 1;\n                return GetPhotoMale(maleCount);\n            }\n            else\n            {\n                femaleCount++;\n                if (femaleCount > 24) femaleCount = 1;\n                return GetPhotoFemale(femaleCount);\n            }\n        }\n\n        public static string GetGenderPhoto(string gender)\n        {\n            // Note: Mapping between En and Ja.\n            // This comment is for the sake of coding and debugging.\n            // readonly static string[] gendersEn = { \"male\", \"female\" };\n            // readonly static string[] genders = { \"男\", \"女\" };\n\n            string genderEn = (gender == \"男\" ? \"male\" : \"female\");\n            return \"https://static.infragistics.com/xplatform/images/genders/\" + genderEn + \".png\";\n        }\n\n        public static string GetCountryFlag(string country)\n        {\n            // Note: Mapping between En and Ja.\n            // This comment is for the sake of coding and debugging.\n            // readonly static string[] countriesEn = { \"USA\", \"UK\", \"France\", \"Canada\", \"Poland\" };\n            // readonly static string[] countries = { \"アメリカ合衆国\", \"イギリス\", \"フランス\", \"カナダ\", \"ポーランド\" };\n\n            string countryEn = \"\";\n            if (country == \"カナダ\")\n            {\n                countryEn = \"Canada\";\n            }\n            else if (country == \"フランス\")\n            {\n                countryEn = \"France\";\n            }\n            else if (country == \"ポーランド\")\n            {\n                countryEn = \"Poland\";\n            }\n            else if (country == \"アメリカ合衆国\")\n            {\n                countryEn = \"USA\";\n            }\n            else if (country == \"Japan\")\n            {\n                countryEn = \"Japan\";\n            }\n            else if (country == \"Germany\")\n            {\n                countryEn = \"Germany\";\n            }\n            else\n            { // if (country === \"United Kingdom\") {\n                countryEn = \"UK\";\n            }\n            return \"https://static.infragistics.com/xplatform/images/flags/\" + countryEn + \".png\";\n        }\n\n        public static string GetIncomeRange(double salary)\n        {\n            if (salary < 50000)\n            {\n                return \"低い\";\n            }\n            else if (salary < 100000)\n            {\n                return \"平均\";\n            }\n            else\n            {\n                return \"高い\";\n            }\n        }\n\n    }\n\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA GENERATOR"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/localization/Services/EmployeeDataJA.cs",
    "content": "﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace Infragistics.Samples\n{\n    public class EmployeeJA : INotifyPropertyChanged\n    {\n        public string ID { get; set; }\n        public string Address { get; set; }\n        public double Age { get; set; }\n        public string Gender { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Name { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Email { get; set; }\n        public string Phone { get; set; }\n        public string Photo { get; set; }\n        public double Salary { get; set; }\n        public double Sales { get; set; }\n        public string Income { get; set; }\n        public int Index { get; set; }\n\n        public DateTime Birthday { get; set; }\n        public List<ProductivityJA> Productivity { get; set; }\n\n        private string _Country;\n        public string Country\n        {\n            get { return _Country; }\n            set { if (_Country != value) { OnCountryChanged(value); } }\n        }\n\n        public string CountryFlag { get; set; }\n\n        protected void OnCountryChanged(string countryName)\n        {\n            // syncronizing country name and country flag\n            _Country = countryName;\n            CountryFlag = DataGeneratorJA.GetCountryFlag(countryName);\n            City = DataGeneratorJA.GetCity(countryName);\n            OnPropertyChanged(\"Country\");\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n\n    public class ProductivityJA\n    {\n        public double Value { get; set; }\n        public int Week { get; set; }\n    }\n\n    public static class EmployeeDataJA\n    {\n        public static List<EmployeeJA> Create(int? count, bool? useProductivity)\n        {\n            if (count == null) count = 100;\n\n            var employees = new List<EmployeeJA>();\n            for (int i = 0; i < count; i++)\n            {\n                var age = Math.Round(DataGeneratorJA.GetNumber(20, 40));\n                var gender = DataGeneratorJA.GetGender();\n                var firstName = DataGeneratorJA.GetNameFirst(gender);\n                var lastName = DataGeneratorJA.GetNameLast();\n                var street = DataGeneratorJA.GetStreet();\n                var country = DataGeneratorJA.GetCountry();\n                var city = DataGeneratorJA.GetCity(country);\n                var email = firstName.ToLower() + \"@\" + DataGeneratorJA.GetEmail();\n                var photoPath = DataGeneratorJA.GetPhoto(gender);\n\n                var employee = new EmployeeJA\n                {\n                    Index = i,\n                    Address = street + \", \" + city,\n                    Age = age,\n                    Birthday = DataGeneratorJA.GetBirthday(),\n                    City = city,\n                    Email = email,\n                    Gender = gender,\n                    ID = DataGeneratorJA.Pad(1001 + i, 4),\n                    FirstName = firstName,\n                    LastName = lastName,\n                    Name = firstName + \" \" + lastName,\n                    Photo = photoPath,\n                    Phone = DataGeneratorJA.GetPhone(),\n                    Street = DataGeneratorJA.GetStreet(),\n                    Salary = DataGeneratorJA.GetNumber(40, 200) * 1000,\n                    Sales = DataGeneratorJA.GetNumber(200, 980) * 1000,\n                };\n                employee.Country = country;\n\n                employee.Income = DataGeneratorJA.GetIncomeRange(employee.Salary);\n\n                if (useProductivity.HasValue && useProductivity.Value)\n                {\n                    employee.Productivity = GetProductivity(52);\n                }\n                employees.Add(employee);\n            }\n\n            return employees;\n        }\n\n        public static List<ProductivityJA> GetProductivity(int weekCount)\n        {\n            var productivity = new List<ProductivityJA>();\n\n            for (var w = 1; w <= weekCount; w++)\n            {\n                var value = DataGeneratorJA.GetNumber(-50, 50);\n                var prod = new ProductivityJA\n                {\n                    Value = value,\n                    Week = w\n                };\n                productivity.Add(prod);\n            };\n\n            return productivity;\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/grids/data-grid/localization/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}