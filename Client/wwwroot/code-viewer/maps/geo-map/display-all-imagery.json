{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-all-imagery/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n@using System.Reflection\n\n@inject NavigationManager NavManager\n\n<div class=\"container vertical\">\n    <div class=\"options horizontal\">\n        <span class=\"options-label\">Imagery Source: </span>\n        <select @onchange=\"OnImagerySourceChanged\">\n            <option>OpenStreetMaps (Default)</option>\n            <option>BingMaps Road</option>\n            <option>BingMaps Aerial</option>\n            <option>BingMaps Labels</option>\n            <option>WorldStreetMap (ESRI)</option>\n            <option>WorldTopographicMap (ESRI)</option>\n            <option>WorldImageryMap (ESRI)</option>\n            <option>WorldOceansMap (ESRI)</option>\n            <option>WorldNationalGeoMap (ESRI)</option>\n            <option>WorldTerrainMap (ESRI)</option>\n            <option>WorldDeLormesMap (ESRI)</option>\n            <option>WorldLightGrayMap (ESRI)</option>\n            <option>WorldShadedReliefMap (ESRI)</option>\n            <option>WorldPhysicalMap (ESRI)</option>\n            <option>WorldAdminOverlay (ESRI)</option>\n            <option>WorldTransportationOverlay (ESRI)</option>\n            <option>WorldBoundariesDarkOverlay (ESRI)</option>\n            <option>WorldBoundariesLightOverlay (ESRI)</option>\n            <option>WorldLabelsLightGrayOverlay (ESRI)</option>\n            <option>UsaOwnerOccupiedHousing (ESRI)</option>\n            <option>UsaSoilSurvey (ESRI)</option>\n            <option>UsaPopulationOlderThanAge64 (ESRI)</option>\n            <option>UsaPopulationYoungerThan18 (ESRI)</option>\n            <option>UsaPopulationGrowth2015 (ESRI)</option>\n            <option>UsaUnemploymentRate (ESRI)</option>\n            <option>UsaSocialVulnerability (ESRI)</option>\n            <option>UsaRetailSpendingPotential (ESRI)</option>\n            <option>UsaPopulationChange2010 (ESRI)</option>\n            <option>UsaPopulationChange2000 (ESRI)</option>\n            <option>UsaPopulationDensity (ESRI)</option>\n            <option>UsaPopulationByGender (ESRI)</option>\n            <option>UsaMedianHouseholdIncome (ESRI)</option>\n            <option>UsaMedianNetWorth (ESRI)</option>\n            <option>UsaMedianHomeValue (ESRI)</option>\n            <option>UsaMedianAge (ESRI)</option>\n            <option>UsaLaborForceParticipation (ESRI)</option>\n            <option>UsaAverageHouseholdSize (ESRI)</option>\n            <option>UsaDiversityIndex (ESRI)</option>\n            <option>UsaRailNetwork (ESRI)</option>\n        </select>\n    </div>\n\n    <div class=\"container vertical\">\n        <IgbGeographicMap Height=\"100%\" Width=\"100%\" Zoomable=\"true\" BackgroundContent=\"@MapContent\">\n        </IgbGeographicMap>\n    </div>\n</div>\n\n@code {\n\n    private IgbGeographicMapImagery MapContent;\n    private EsriStyle EsriRef;\n\n    protected override void OnInitialized()\n    {\n\n        EsriRef = new EsriStyle();\n        this.MapContent = new IgbOpenStreetMapImagery();\n    }\n\n    private void OnImagerySourceChanged(ChangeEventArgs args)\n    {\n        string str = args.Value.ToString();\n\n        if (str.Contains(\"ESRI\"))\n        {\n            str = str.Replace(\" (ESRI)\", \"\");\n\n            FieldInfo fieldInfo = typeof(EsriStyle).GetField(str);\n\n            if (fieldInfo != null)\n            {\n                EsriStyle obj = new EsriStyle();\n                string uri = fieldInfo.GetValue(obj).ToString();\n\n                IgbArcGISOnlineMapImagery mapImage = new IgbArcGISOnlineMapImagery()\n                {\n                    MapServerUri = uri\n                };\n\n                this.MapContent = mapImage;\n            }\n        }\n        else if (str.Contains(\"Bing\"))\n        {\n            IgbBingMapsMapImagery mapImage = null;\n\n            if (str.Contains(\"Aerial\"))\n            {\n                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.Aerial);\n            }\n            else if (str.Contains(\"Labels\"))\n            {\n                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.AerialWithLabels);\n            }\n            else\n            {\n                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.Road);\n            }\n\n            this.MapContent = mapImage;\n        }\n        else\n        {\n            this.MapContent = new IgbOpenStreetMapImagery();\n        }\n    }\n\n    private IgbBingMapsMapImagery CreateBingMapsImagery(BingMapsImageryStyle style)\n    {\n        string apiKey = MapUtils.GetBingKey();\n        var bingUrl = \"http://dev.virtualearth.net/REST/v1/Imagery/Metadata/{STYLE}?key={KEY}&include=ImageryProviders\";\n        bingUrl = bingUrl.Replace(\"{STYLE}\", style.ToString());\n        bingUrl = bingUrl.Replace(\"{KEY}\", apiKey);\n\n        var isHttpSecured = NavManager.Uri.StartsWith(\"https\");\n        if (isHttpSecured)\n            bingUrl = bingUrl.Replace(\"http:\", \"https:\");\n\n        var imagery = new IgbBingMapsMapImagery()\n        {\n             ApiKey = apiKey,\n             ImageryStyle = style,\n             ActualBingImageryRestUri = bingUrl\n        };\n\n        return imagery;\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-all-imagery/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbGeographicMapModule),\n                typeof(IgbDataChartInteractivityModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-all-imagery/Services/EsriUtility.cs",
    "content": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public class EsriStyle\n    {\n        // these Esri maps show geographic tiles for the whole of world\n        public static string WorldStreetMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\";\n        public static string WorldTopographicMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer\";\n        public static string WorldImageryMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\";\n        public static string WorldOceansMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer\";\n        public static string WorldNationalGeoMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer\";\n        public static string WorldTerrainMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer\";\n        public static string WorldDeLormesMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer\";\n        public static string WorldLightGrayMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer\";\n        public static string WorldShadedReliefMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer\";\n        public static string WorldPhysicalMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer\";\n\n        // these Esri maps show geographic tiles for the whole of world without contours of continents\n        // therefore the Map should also load a shapefile of continents when using them\n        public static string WorldAdminOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\";\n        public static string WorldTransportationOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer\";\n        public static string WorldBoundariesDarkOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer\";\n        public static string WorldBoundariesLightOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places_Alternate/MapServer\";\n        public static string WorldLabelsLightGrayOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer\";\n\n        // these Esri maps show only geographic tiles for the USA\n        // therefore the Map should be zoomed in to geographic bounds of USA when using them\n        public static string UsaOwnerOccupiedHousing = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Owner_Occupied_Housing/MapServer\";\n        public static string UsaSoilSurvey = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/Soil_Survey_Map/MapServer\";\n        public static string UsaPopulationOlderThanAge64 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Over_64/MapServer\";\n        public static string UsaPopulationYoungerThan18 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Under_18/MapServer\";\n        public static string UsaPopulationGrowth2015 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Projected_Population_Change/MapServer\";\n        public static string UsaUnemploymentRate = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Unemployment_Rate/MapServer\";\n        public static string UsaSocialVulnerability = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Social_Vulnerability_Index/MapServer\";\n        public static string UsaRetailSpendingPotential = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Retail_Spending_Potential/MapServer\";\n        public static string UsaPopulationChange2010 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Recent_Population_Change/MapServer\";\n        public static string UsaPopulationChange2000 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_1990-2000_Population_Change/MapServer\";\n        public static string UsaPopulationDensity = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_Density/MapServer\";\n        public static string UsaPopulationByGender = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_by_Sex/MapServer\";\n        public static string UsaMedianHouseholdIncome = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Household_Income/MapServer\";\n        public static string UsaMedianNetWorth = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Net_Worth/MapServer\";\n        public static string UsaMedianHomeValue = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Home_Value/MapServer\";\n        public static string UsaMedianAge = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Age/MapServer\";\n        public static string UsaLaborForceParticipation = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Labor_Force_Participation_Rate/MapServer\";\n        public static string UsaAverageHouseholdSize = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Average_Household_Size/MapServer\";\n        public static string UsaDiversityIndex = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Diversity_Index/MapServer\";\n        public static string UsaRailNetwork = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\";\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-all-imagery/Services/MapUtils.cs",
    "content": "ï»¿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public enum MapRegion\n    {\n        Caribbean,\n        UnitedStates,\n        UnitedKingdom,\n        European,\n        SouthAfrica,\n        Poland,\n        Australia,\n        Japan,\n        Uruguay,\n        Egypt,\n        Hawaii\n    }\n\n    public class MapUtils\n    {\n        public static Dictionary<MapRegion, Rect> Regions;\n\n        public static void NavigateTo(IgbGeographicMap map, MapRegion region)\n        {\n            Rect rect = Regions[region];\n            map.ZoomToGeographic(rect);\n        }\n\n        public static string ToPixel(double number)\n        {\n            string s = Math.Abs(number).ToString(\"N0\");\n            return s + \" px\";\n        }\n\n        public static string ToLng(double number)\n        {\n            number = Clamp(number, -180, 180);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n            if (number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"Â°E\";\n            }\n            else\n            {\n                return s + \"Â°W\";\n            }\n        }\n\n        public static string ToLat(double number)\n        {\n            number = Clamp(number, -90, 90);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n\n            if(number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"Â°N\";\n            }\n            else\n            {\n                return s + \"Â°S\";\n            }\n        }\n\n        public static double Clamp(double number, double min, double max)\n        {\n            return Math.Max(min, Math.Min(max, number));\n        }\n\n        public static double Pad(double number, double places)\n        {\n            //TODO\n            return 0;\n        }\n\n        public static string GetBingKey()\n        {\n            return \"Avlo7qsH1zZZI0XNpTwZ4XwvUJmCbd-mczMeUXVAW9kYYOKdmBIVRe8aoO02Xctq\";\n        }\n\n        public static Dictionary<MapRegion, Rect> GetRegions()\n        {\n            if(Regions == null || Regions.Count == 0)\n            {\n                CreateRegions();\n            }\n\n            return Regions;\n        }\n\n        private static void AddRegion(MapRegion name, Rect geoRect)\n        {\n            Regions.Add(name, geoRect);\n        }\n\n        private static void CreateRegions()\n        {\n            Regions = new Dictionary<MapRegion, Rect>();\n            AddRegion(MapRegion.Australia, new Rect() { Left= 81.5, Top= -52.0, Width= 98.0, Height= 56.0 });\n            AddRegion(MapRegion.Caribbean, new Rect() { Left= -92.9, Top= 5.4, Width= 35.1, Height= 25.8 });\n            AddRegion(MapRegion.Egypt, new Rect() { Left= 19.3, Top= 19.9, Width= 19.3, Height= 13.4 });\n            AddRegion(MapRegion.European, new Rect() { Left= -36.0, Top= 31.0, Width= 98.0, Height= 38.0 });\n            AddRegion(MapRegion.Japan, new Rect() { Left= 122.7, Top= 29.4, Width= 27.5, Height= 17.0 });\n            AddRegion(MapRegion.Hawaii, new Rect() { Left= -161.2, Top= 18.5, Width= 6.6, Height= 4.8 });\n            AddRegion(MapRegion.Poland, new Rect() { Left= 13.0, Top= 48.0, Width= 11.0, Height= 9.0 });\n            AddRegion(MapRegion.SouthAfrica, new Rect() { Left= 9.0, Top= -37.1, Width= 26.0, Height= 17.8 });\n            AddRegion(MapRegion.UnitedStates, new Rect() { Left= -134.5, Top= 16.0, Width= 70.0, Height= 37.0 });\n            AddRegion(MapRegion.UnitedKingdom, new Rect() { Left= -15.0, Top= 49.5, Width= 22.5, Height= 8.0 });\n            AddRegion(MapRegion.Uruguay, new Rect() { Left= -62.1, Top= -35.7, Width= 10.6, Height= 7.0 });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA SOURCE"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-all-imagery/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}