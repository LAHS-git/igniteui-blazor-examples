{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/type-shape-polygon-series/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container vertical\">\n    <div class=\"container vertical\">\n        <IgbGeographicMap Height=\"100%\" Width=\"100%\" Zoomable=\"true\" BackgroundContent=\"@null\">\n            <IgbGeographicShapeSeries ShapefileDataSource=\"Data\"\n                                   Outline=\"black\"\n                                   Thickness=\"0.5\"\n                                   StyleShapeScript=\"onStylingShape\"\n                                   MarkerTemplateScript=\"onStylingMarker\"\n                                   MarkerCollisionAvoidance=\"@CollisionAvoidanceType.Omit\"/>\n        </IgbGeographicMap>\n    </div>\n</div>\n\n@code {\n\n    private IgbShapeDataSource Data;\n\n    protected override void OnInitialized()\n    {\n\n        this.Data = new IgbShapeDataSource()\n        {\n            ShapefileSource = \"https://static.infragistics.com/xplatform/shapes/world_countries_all.shp\",\n            DatabaseSource  = \"https://static.infragistics.com/xplatform/shapes/world_countries_all.dbf\"\n        };\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/type-shape-polygon-series/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbGeographicMapModule),\n                typeof(IgbDataChartInteractivityModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/type-shape-polygon-series/wwwroot/mapStyling.js",
    "content": "function onStylingShape(o, e) {\r\n    // applying conditional styling based on Contient field loaded from DBF file\r\n    var c = e.item.getFieldValue(\"Continent\")\r\n    if (c == \"Africa\") {\r\n        e.shapeFill = \"#ECB912\"; \r\n    } else if (c == \"Asia\") {\r\n        e.shapeFill = \"#E11D1D\";\r\n    } else if (c == \"Europe\") {\r\n        e.shapeFill = \"#2894EC\";\r\n    } else if (c == \"South America\" || c == \"North America\") {\r\n        e.shapeFill = \"#0CC308\";\r\n    } else if (c == \"Australia\") {\r\n        e.shapeFill = \"#B42AE9\";\r\n    } else {\r\n        e.shapeFill = \"gray\";\r\n    }\r\n    e.shapeOutline = \"black\";\r\n}\r\nigRegisterScript(\"onStylingShape\", onStylingShape, false);\r\n\r\nfunction onStylingMarker(o, e) {\r\n\r\n    return {\r\n        // measuing size of a marker based on lenght of the Code text field loaded from DBF file\r\n        measure: function (measureInfo) {\r\n            var cont = measureInfo.context;\r\n            var data = measureInfo.data;\r\n            var code = \"null\";\r\n            if (data.item != null) {\r\n                code = data.item.getFieldValue(\"Code\").toString();\r\n            }\r\n            var height = cont.measureText(\"M\").width;\r\n            var width = cont.measureText(code).width;\r\n            measureInfo.width  = width;\r\n            measureInfo.height = height;\r\n        },\r\n\r\n        // rendering a marker with the Code text field inside of filled rectanlge\r\n        render: function (renderInfo) {\r\n            //console.log(\"mapStyling onStylingMarker render \");\r\n            var ctx = renderInfo.context;\r\n            if (renderInfo.isHitTestRender) {\r\n                ctx.fillStyle = renderInfo.data.actualItemBrush.fill;\r\n            } else {\r\n                ctx.fillStyle = \"black\";\r\n            }\r\n\r\n            var halfWidth  = renderInfo.availableWidth / 2.0;\r\n            var halfHeight = renderInfo.availableHeight / 2.0; \r\n\r\n            var cx = renderInfo.xPosition;\r\n            var cy = renderInfo.yPosition;\r\n\r\n            var x = renderInfo.xPosition - halfWidth;\r\n            var y = renderInfo.yPosition - (halfHeight);\r\n \r\n            if (renderInfo.isHitTestRender) {\r\n                ctx.fillRect(x, y, renderInfo.availableWidth, renderInfo.availableHeight);\r\n            } else { \r\n\r\n                ctx.fillStyle = \"rgba(100, 100, 100, 0.5)\";\r\n                ctx.fillRect(x - 2, cy - 2, renderInfo.availableWidth + 4, renderInfo.availableHeight + 4);\r\n\r\n                ctx.lineWidth = 0.5;\r\n                ctx.strokeStyle = \"#7A7A7A\"; \r\n                ctx.strokeRect(x - 2, cy - 2, renderInfo.availableWidth + 4, renderInfo.availableHeight + 4); \r\n\r\n                var data = renderInfo.data;\r\n                var code = data.item.getFieldValue(\"Code\").toString();\r\n                ctx.font = \"bold 8px Verdana\";\r\n                ctx.textAlign = \"center\";\r\n                ctx.textBaseline = \"top\";\r\n                ctx.fillStyle = \"#EEEEEE\";\r\n                ctx.fillText(code, cx, cy);\r\n            }\r\n        }\r\n    }\r\n}\r\n \r\nigRegisterScript(\"onStylingMarker\", onStylingMarker, true);\r\n ",
    "isMain": true,
    "fileExtension": "js",
    "fileHeader": "js"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/type-shape-polygon-series/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}