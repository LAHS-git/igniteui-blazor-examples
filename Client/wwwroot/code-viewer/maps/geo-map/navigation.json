{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/navigation/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n<div class=\"container horizontal\">\n    <div class=\"container vertical\">\n        <IgbGeographicMap Height=\"100%\" Width=\"100%\" Zoomable=\"true\" @ref=\"GeoMap\">\n        </IgbGeographicMap>\n    </div>\n\n    <div class=\"overlay-border overlay-bottom-right\" >\n        <label class=\"overlay-label\">Select Map Region</label>\n        <select @onchange=\"OnMapRegionSelectionChanged\">\n            <option>Australia</option>\n            <option>Caribbean</option>\n            <option>Egypt</option>\n            <option>European</option>\n            <option>Hawaii</option>\n            <option>Japan</option>\n            <option>Poland</option>\n            <option>SouthAfrica</option>\n            <option>UnitedKingdom</option>\n            <option>UnitedStates</option>\n            <option>Uruguay</option>\n        </select>\n        <label class=\"overlay-label\">Map Geographic Rect</label>\n        <div class=\"overlay-row\">\n            <label class=\"overlay-field\">Top:</label>\n            <label class=\"overlay-value\">@MapUtils.ToLat(MapRegionRect.Top)</label>\n        </div>\n        <div class=\"overlay-row\">\n            <label class=\"overlay-field\">Left:</label>\n            <label class=\"overlay-value\">@MapUtils.ToLng(MapRegionRect.Left)</label>\n        </div>\n        <div class=\"overlay-row\">\n            <label class=\"overlay-field\">Height:</label>\n            <label class=\"overlay-value\">@MapUtils.ToLat(MapRegionRect.Height)</label>\n        </div>\n        <div class=\"overlay-row\">\n            <label class=\"overlay-field\">Width:</label>\n            <label class=\"overlay-value\">@MapUtils.ToLng(MapRegionRect.Width)</label>\n        </div>\n        @* <label class=\"overlay-label\">Map Window Rect</label> *@\n        @*<div class=\"overlay-row\">\n                <label class=\"overlay-field\">Top:</label>\n                <label class=\"overlay-value\">@GeoMap.ActualWindowRect.Top</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Left:</label>\n                <label class=\"overlay-value\">@GeoMap.ActualWindowRect.Left</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Height:</label>\n                <label class=\"overlay-value\">@GeoMap.ActualWindowRect.Height</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Width:</label>\n                <label class=\"overlay-value\">@GeoMap.ActualWindowRect.Width</label>\n            </div>\n            <label class=\"overlay-label\">Map Window Position</label>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Horizontal:</label>\n                <label class=\"overlay-value\">@GeoMap.WindowPositionHorizontal</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Vertical:</label>\n                <label class=\"overlay-value\">@GeoMap.WindowPositionVertical</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Scale:</label>\n                <label class=\"overlay-value\">@GeoMap.WindowScale</label>\n            </div>*@\n        @* <label class=\"overlay-label\">Map Hover Coordinates</label> *@\n        @*<div class=\"overlay-row\">\n                <label class=\"overlay-field\">Longitude:</label>\n                <label class=\"overlay-value\">@MapUtils.ToLng(this.state.mapHoverGeographicCoordinate.x)</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Latitude:</label>\n                <label class=\"overlay-value\">@MapUtils.ToLat(this.state.mapHoverGeographicCoordinate.y)</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Window X:</label>\n                <label class=\"overlay-value\">{this.state.mapHoverWindowCoordinate.x}</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Window Y:</label>\n                <label class=\"overlay-value\">{this.state.mapHoverWindowCoordinate.y}</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Pixel X:</label>\n                <label class=\"overlay-value\">@MapUtils.ToPixel(this.state.mapHoverRelativeCoordinate.x)</label>\n            </div>\n            <div class=\"overlay-row\">\n                <label class=\"overlay-field\">Pixel Y:</label>\n                <label class=\"overlay-value\">@MapUtils.ToPixel(this.state.mapHoverRelativeCoordinate.y)</label>\n            </div>*@\n    </div>\n\n    @*<div class=\"overlay-border overlay-bottom-right\">Imagery Tiles: ESRI/ArcGIS</div>*@\n\n</div>\n\n@code {\n\n    private IgbGeographicMap GeoMap;\n    private Rect MapRegionRect;\n\n    Dictionary<MapRegion, Rect> regions;\n\n    protected override void OnInitialized()\n    {\n\n        regions = MapUtils.GetRegions();\n        this.MapRegionRect = regions[MapRegion.Australia];\n    }\n\n    public void OnMapRegionSelectionChanged(ChangeEventArgs args)\n    {\n        MapRegion region = (MapRegion)Enum.Parse(typeof(MapRegion), args.Value.ToString());\n        this.MapRegionRect = regions[region];\n        MapUtils.NavigateTo(this.GeoMap, region);\n    }\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/navigation/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbGeographicMapModule),\n                typeof(IgbDataChartInteractivityModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/navigation/Services/MapUtils.cs",
    "content": "﻿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public enum MapRegion\n    {\n        Caribbean,\n        UnitedStates,\n        UnitedKingdom,\n        European,\n        SouthAfrica,\n        Poland,\n        Australia,\n        Japan,\n        Uruguay,\n        Egypt,\n        Hawaii\n    }\n\n    public class MapUtils\n    {\n        public static Dictionary<MapRegion, Rect> Regions;\n\n        public static void NavigateTo(IgbGeographicMap map, MapRegion region)\n        {\n            Rect rect = Regions[region];\n            map.ZoomToGeographic(rect);\n        }\n\n        public static string ToPixel(double number)\n        {\n            string s = Math.Abs(number).ToString(\"N0\");\n            return s + \" px\";\n        }\n\n        public static string ToLng(double number)\n        {\n            number = Clamp(number, -180, 180);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n            if (number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"°E\";\n            }\n            else\n            {\n                return s + \"°W\";\n            }\n        }\n\n        public static string ToLat(double number)\n        {\n            number = Clamp(number, -90, 90);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n\n            if(number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"°N\";\n            }\n            else\n            {\n                return s + \"°S\";\n            }\n        }\n\n        public static double Clamp(double number, double min, double max)\n        {\n            return Math.Max(min, Math.Min(max, number));\n        }\n\n        public static double Pad(double number, double places)\n        {\n            //TODO\n            return 0;\n        }\n\n        public static string GetBingKey()\n        {\n            return \"Avlo7qsH1zZZI0XNpTwZ4XwvUJmCbd-mczMeUXVAW9kYYOKdmBIVRe8aoO02Xctq\";\n        }\n\n        public static Dictionary<MapRegion, Rect> GetRegions()\n        {\n            if(Regions == null || Regions.Count == 0)\n            {\n                CreateRegions();\n            }\n\n            return Regions;\n        }\n\n        private static void AddRegion(MapRegion name, Rect geoRect)\n        {\n            Regions.Add(name, geoRect);\n        }\n\n        private static void CreateRegions()\n        {\n            Regions = new Dictionary<MapRegion, Rect>();\n            AddRegion(MapRegion.Australia, new Rect() { Left= 81.5, Top= -52.0, Width= 98.0, Height= 56.0 });\n            AddRegion(MapRegion.Caribbean, new Rect() { Left= -92.9, Top= 5.4, Width= 35.1, Height= 25.8 });\n            AddRegion(MapRegion.Egypt, new Rect() { Left= 19.3, Top= 19.9, Width= 19.3, Height= 13.4 });\n            AddRegion(MapRegion.European, new Rect() { Left= -36.0, Top= 31.0, Width= 98.0, Height= 38.0 });\n            AddRegion(MapRegion.Japan, new Rect() { Left= 122.7, Top= 29.4, Width= 27.5, Height= 17.0 });\n            AddRegion(MapRegion.Hawaii, new Rect() { Left= -161.2, Top= 18.5, Width= 6.6, Height= 4.8 });\n            AddRegion(MapRegion.Poland, new Rect() { Left= 13.0, Top= 48.0, Width= 11.0, Height= 9.0 });\n            AddRegion(MapRegion.SouthAfrica, new Rect() { Left= 9.0, Top= -37.1, Width= 26.0, Height= 17.8 });\n            AddRegion(MapRegion.UnitedStates, new Rect() { Left= -134.5, Top= 16.0, Width= 70.0, Height= 37.0 });\n            AddRegion(MapRegion.UnitedKingdom, new Rect() { Left= -15.0, Top= 49.5, Width= 22.5, Height= 8.0 });\n            AddRegion(MapRegion.Uruguay, new Rect() { Left= -62.1, Top= -35.7, Width= 10.6, Height= 7.0 });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/navigation/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}