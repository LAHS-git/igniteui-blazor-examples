{
 "sampleFiles":
[
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-bing-imagery/App.razor",
    "content": "\n@using IgniteUI.Blazor.Controls\n\n@inject NavigationManager NavManager\n\n<div class=\"container horizontal\">\n\n    <IgbGeographicMap @ref=\"BingAerialMap\"\n                   Height=\"100%\" Width=\"100%\" Zoomable=\"true\"\n                   BackgroundContent=\"@AerialImagery\">\n    </IgbGeographicMap>\n    <IgbGeographicMap @ref=\"BingRoadMap\"\n                   Height=\"100%\" Width=\"100%\" Zoomable=\"true\"\n                   BackgroundContent=\"@RoadImagery\">\n    </IgbGeographicMap>\n\n</div>\n\n@code {\n\n    private IgbBingMapsMapImagery AerialImagery;\n    private IgbBingMapsMapImagery RoadImagery;\n    private IgbGeographicMap BingAerialMap;\n    private IgbGeographicMap BingRoadMap;\n\n    private string BingKey = MapUtils.GetBingKey();\n\n    protected override void OnInitialized()\n    {\n\n        this.RoadImagery = CreateImagery(BingMapsImageryStyle.Road);\n        this.AerialImagery = CreateImagery(BingMapsImageryStyle.AerialWithLabels);\n    }\n\n    public IgbBingMapsMapImagery CreateImagery(BingMapsImageryStyle style)\n    {\n        var bingUrl = \"http://dev.virtualearth.net/REST/v1/Imagery/Metadata/{STYLE}?key={KEY}&include=ImageryProviders\";\n        bingUrl = bingUrl.Replace(\"{STYLE}\", style.ToString());\n        bingUrl = bingUrl.Replace(\"{KEY}\", BingKey);\n\n        var isHttpSecured = NavManager.Uri.StartsWith(\"https\");\n        if (isHttpSecured)\n            bingUrl = bingUrl.Replace(\"http:\", \"https:\");\n\n        var imagery = new IgbBingMapsMapImagery();\n        imagery.ApiKey = BingKey;\n        imagery.ImageryStyle = style;\n        imagery.ActualBingImageryRestUri = bingUrl;\n\n        return imagery;\n    }\n\n    protected override void OnAfterRender(bool firstRender)\n    {\n        if (!firstRender)\n        {\n            //Task.Delay(300).ContinueWith((t) => OnZoomMap(this.BingAerialMap));\n            //Task.Delay(300).ContinueWith((t) => OnZoomMap(this.BingRoadMap));\n        }\n    }\n\n    private void OnZoomMap(IgbGeographicMap map)\n    {\n        var geoBounds = new Rect(-130, 15, new Size(65, 35));\n        if (map != null)\n            map.ZoomToGeographic(geoBounds);\n    }\n\n}",
    "isMain": true,
    "fileExtension": "razor",
    "fileHeader": "razor"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-bing-imagery/Program.cs",
    "content": "using System;\nusing System.Net.Http;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing IgniteUI.Blazor.Controls; // for registering Ignite UI modules\n\nnamespace Infragistics.Samples\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n            // registering Ignite UI modules\n            builder.Services.AddIgniteUIBlazor(\n                typeof(IgbGeographicMapModule),\n                typeof(IgbDataChartInteractivityModule)\n            );\n            await builder.Build().RunAsync();\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "MODULES"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-bing-imagery/Services/MapUtils.cs",
    "content": "﻿using IgniteUI.Blazor.Controls;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\n\nnamespace Infragistics.Samples\n{\n    public enum MapRegion\n    {\n        Caribbean,\n        UnitedStates,\n        UnitedKingdom,\n        European,\n        SouthAfrica,\n        Poland,\n        Australia,\n        Japan,\n        Uruguay,\n        Egypt,\n        Hawaii\n    }\n\n    public class MapUtils\n    {\n        public static Dictionary<MapRegion, Rect> Regions;\n\n        public static void NavigateTo(IgbGeographicMap map, MapRegion region)\n        {\n            Rect rect = Regions[region];\n            map.ZoomToGeographic(rect);\n        }\n\n        public static string ToPixel(double number)\n        {\n            string s = Math.Abs(number).ToString(\"N0\");\n            return s + \" px\";\n        }\n\n        public static string ToLng(double number)\n        {\n            number = Clamp(number, -180, 180);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n            if (number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"°E\";\n            }\n            else\n            {\n                return s + \"°W\";\n            }\n        }\n\n        public static string ToLat(double number)\n        {\n            number = Clamp(number, -90, 90);\n\n            string s = Math.Abs(number).ToString(\"N1\");\n\n            if(number < 100)\n            {\n                s = \"  \" + s;\n            }\n\n            if (number > 0)\n            {\n                return s + \"°N\";\n            }\n            else\n            {\n                return s + \"°S\";\n            }\n        }\n\n        public static double Clamp(double number, double min, double max)\n        {\n            return Math.Max(min, Math.Min(max, number));\n        }\n\n        public static double Pad(double number, double places)\n        {\n            //TODO\n            return 0;\n        }\n\n        public static string GetBingKey()\n        {\n            return \"Avlo7qsH1zZZI0XNpTwZ4XwvUJmCbd-mczMeUXVAW9kYYOKdmBIVRe8aoO02Xctq\";\n        }\n\n        public static Dictionary<MapRegion, Rect> GetRegions()\n        {\n            if(Regions == null || Regions.Count == 0)\n            {\n                CreateRegions();\n            }\n\n            return Regions;\n        }\n\n        private static void AddRegion(MapRegion name, Rect geoRect)\n        {\n            Regions.Add(name, geoRect);\n        }\n\n        private static void CreateRegions()\n        {\n            Regions = new Dictionary<MapRegion, Rect>();\n            AddRegion(MapRegion.Australia, new Rect() { Left= 81.5, Top= -52.0, Width= 98.0, Height= 56.0 });\n            AddRegion(MapRegion.Caribbean, new Rect() { Left= -92.9, Top= 5.4, Width= 35.1, Height= 25.8 });\n            AddRegion(MapRegion.Egypt, new Rect() { Left= 19.3, Top= 19.9, Width= 19.3, Height= 13.4 });\n            AddRegion(MapRegion.European, new Rect() { Left= -36.0, Top= 31.0, Width= 98.0, Height= 38.0 });\n            AddRegion(MapRegion.Japan, new Rect() { Left= 122.7, Top= 29.4, Width= 27.5, Height= 17.0 });\n            AddRegion(MapRegion.Hawaii, new Rect() { Left= -161.2, Top= 18.5, Width= 6.6, Height= 4.8 });\n            AddRegion(MapRegion.Poland, new Rect() { Left= 13.0, Top= 48.0, Width= 11.0, Height= 9.0 });\n            AddRegion(MapRegion.SouthAfrica, new Rect() { Left= 9.0, Top= -37.1, Width= 26.0, Height= 17.8 });\n            AddRegion(MapRegion.UnitedStates, new Rect() { Left= -134.5, Top= 16.0, Width= 70.0, Height= 37.0 });\n            AddRegion(MapRegion.UnitedKingdom, new Rect() { Left= -15.0, Top= 49.5, Width= 22.5, Height= 8.0 });\n            AddRegion(MapRegion.Uruguay, new Rect() { Left= -62.1, Top= -35.7, Width= 10.6, Height= 7.0 });\n        }\n    }\n}",
    "isMain": true,
    "fileExtension": "cs",
    "fileHeader": "DATA"
  },
  {
    "hasRelativeAssetsUrls": false,
    "path": "../../samples/maps/geo-map/display-bing-imagery/wwwroot/index.css",
    "content": "/* \r\nCSS styles are loaded from the shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/",
    "isMain": true,
    "fileExtension": "css",
    "fileHeader": "css"
  }
]
}