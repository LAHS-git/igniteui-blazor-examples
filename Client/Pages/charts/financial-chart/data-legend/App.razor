@page "/samples/charts/financial-chart/data-legend"
@page "/samples/charts/financial-chart-data-legend"
@page         "/charts/financial-chart/data-legend"
@page         "/charts/financial-chart-data-legend"

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="legend">
        <IgbDataLegend
        Name="Legend"
        @ref="legend"
        IncludedColumns="@(new string[] { "Open", "Close", "High", "Low", "Change" })">
        </IgbDataLegend>

    </div>

    <div class="container vertical fill">
        <IgbFinancialChart
        Name="chart"
        @ref="chart"
        ChartType="FinancialChartType.Candle"
        IsVerticalZoomEnabled="true"
        IsHorizontalZoomEnabled="true"
        DataSource="MultipleStocks"
        DataToolTipHeaderFormatTime="DataLegendHeaderTimeMode.None"
        ZoomSliderType="FinancialChartZoomSliderType.None">
        </IgbFinancialChart>

    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        IgbFinancialChartModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbDataLegendModule.Register(IgniteUIBlazor);

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var chart = this.chart;

        this.BindElements = () => {
            legend.Target = this.chart;
        };
        this.BindElements();

    }

    private IgbDataLegend legend;
    private IgbFinancialChart chart;

    private MultipleStocks _multipleStocks = null;
    public MultipleStocks MultipleStocks
    {
        get
        {
            if (_multipleStocks == null)
            {
                MultipleStocks.Fetch().ContinueWith((t) => {_multipleStocks = t.Result;  StateHasChanged(); });
            }
            return _multipleStocks;
        }
    }

}